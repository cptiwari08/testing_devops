using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

#pragma warning disable CA1814 // Prefer jagged arrays over multidimensional

namespace EY.CE.Copilot.Data.Migrations
{
    /// <inheritdoc />
    public partial class ContentGenerationTableAndData_Migration4 : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "AssistantContentGeneratorQueries",
                columns: table => new
                {
                    ID = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    APP = table.Column<string>(type: "nvarchar(256)", nullable: false),
                    Title = table.Column<string>(type: "nvarchar(256)", nullable: false),
                    Description = table.Column<string>(type: "nvarchar(MAX)", nullable: false),
                    GeneratorType = table.Column<string>(type: "nvarchar(256)", nullable: false),
                    Key = table.Column<string>(type: "nvarchar(256)", nullable: false),
                    SQLQuery = table.Column<string>(type: "nvarchar(MAX)", nullable: false),
                    IsActive = table.Column<bool>(type: "bit", nullable: false, defaultValue: true),
                    CreatedAt = table.Column<DateTime>(type: "datetime2", nullable: true),
                    UpdatedAt = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CreatedBy = table.Column<string>(type: "nvarchar(100)", nullable: false),
                    UpdatedBy = table.Column<string>(type: "nvarchar(100)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AssistantContentGeneratorQueries", x => x.ID);
                });

            migrationBuilder.InsertData(
                table: "AssistantContentGeneratorQueries",
                columns: new[] { "ID", "APP", "CreatedAt", "CreatedBy", "Description", "GeneratorType", "Key", "SQLQuery", "Title", "UpdatedAt", "UpdatedBy" },
                values: new object[,]
                {
                    { 1, "PMO", null, "System", "The workplan section specifically targets milestones that require immediate attention. The system filters milestones based on the following criteria:Timeframe: Next 7 daysCalculated Status: Not CompletedPriority: High, Medium, etc.Reporting Level: Executive, etc.", "ProjectStatus", "EXECUTIVE_SUMMARY_WORKPLAN", "WITH PriorityTasks AS (SELECT WP.Title, WP.TaskDueDate, WP.ReportingLevelId, WP.Priority, WP.WorkPlanTaskType, CASE WHEN WP.Priority = '(1) High' THEN 1 WHEN WP.Priority = '(2) Medium' THEN 2 WHEN WP.Priority = '(3) Low' THEN 3 END AS PriorityRank FROM Workplan WP WHERE WP.WorkPlanTaskType IN ('Milestone') AND WP.TimeBasedCalculatedStatusId NOT IN (6, 20, 23, 26, 28, 29, 31) AND WP.Priority IN ('(1) High', '(2) Medium', '(3) Low') AND WP.ReportingLevelId IN (4, 5) AND WP.TaskDueDate <= DATEADD(day, 7, CURRENT_TIMESTAMP) AND WP.ProjectTeamId = {{ProjectTeam}}), HighestPriority AS (SELECT MIN(PriorityRank) AS MinPriorityRank FROM PriorityTasks) SELECT PT.Title, PT.TaskDueDate, PT.ReportingLevelId, PT.Priority, PT.WorkPlanTaskType FROM PriorityTasks PT JOIN HighestPriority HP ON PT.PriorityRank = HP.MinPriorityRank", "Project Status Executive Summary Workplan", null, "System" },
                    { 2, "PMO", null, "System", "The system identifies high-priority risks and issues that need to be addressed promptly. The criteria for this search are:Timeframe: Whole history and next 7 daysCalculated Status: Not CompletedPriority: High or CriticalReporting Level: Executive", "ProjectStatus", "EXECUTIVE_SUMMARY_RISKS_ISSUES", "WITH PriorityTasks AS (SELECT RAI.IssueRiskCategory, RAI.TimeBasedCalculatedStatusId, RAI.ItemDescription, RAI.ItemDueDate, RAI.ItemPriority, RAI.Title, RAI.ReportingLevelId, CASE WHEN RAI.ItemPriority = 'Critical' THEN 1 WHEN RAI.ItemPriority = 'High' THEN 2 WHEN RAI.ItemPriority = 'Medium' THEN 3 WHEN RAI.ItemPriority = 'Low' THEN 4 END AS PriorityRank FROM RisksAndIssues RAI WHERE RAI.TimeBasedCalculatedStatusId NOT IN (6, 20, 23, 26, 28, 29, 31) AND RAI.ItemPriority IN ('Critical', 'High', 'Medium', 'Low') AND RAI.ReportingLevelId IN (4, 5) AND RAI.ItemDueDate <= DATEADD(day, 7, CURRENT_TIMESTAMP) AND RAI.ProjectTeamId = {{ProjectTeam}}), HighestPriority AS (SELECT MIN(PriorityRank) AS MinPriorityRank FROM PriorityTasks) SELECT PT.IssueRiskCategory, PT.TimeBasedCalculatedStatusId, PT.ItemDescription, PT.ItemDueDate, PT.ItemPriority, PT.Title, PT.ReportingLevelId FROM PriorityTasks PT JOIN HighestPriority HP ON PT.PriorityRank = HP.MinPriorityRank", "Project Status Executive Summary Risks and Issues", null, "System" },
                    { 3, "PMO", null, "System", "Actions are tasks or steps that need to be taken to move the project forward. The system searches for actions using the following parameters:Timeframe: Whole history and next 7 daysProgress Status: Not CompletedPriority: High or CriticalReporting Level: Executive", "ProjectStatus", "EXECUTIVE_SUMMARY_ACTIONS", "WITH PriorityTasks AS (SELECT ACT.Title, ACT.ItemDescription, ACT.ProjectTeamId, ACT.ItemPriority, ACT.ItemDueDate, CASE WHEN ACT.ItemPriority = 'Critical' THEN 1 WHEN ACT.ItemPriority = 'High' THEN 2 WHEN ACT.ItemPriority = 'Medium' THEN 3 WHEN ACT.ItemPriority = 'Low' THEN 4 END AS PriorityRank FROM Actions ACT WHERE ACT.ItemStatusId NOT IN (6, 20, 23, 26, 28, 29, 31) AND ACT.ItemPriority IN ('Critical', 'High', 'Medium', 'Low') AND ACT.ReportingLevelId IN (4, 5) AND ACT.ItemDueDate <= DATEADD(day, 7, CURRENT_TIMESTAMP) AND ACT.ProjectTeamId = {{ProjectTeam}}), HighestPriority AS (SELECT MIN(PriorityRank) AS MinPriorityRank FROM PriorityTasks) SELECT PT.Title, PT.ItemDescription, PT.ProjectTeamId, PT.ItemPriority, PT.ItemDueDate FROM PriorityTasks PT JOIN HighestPriority HP ON PT.PriorityRank = HP.MinPriorityRank", "Project Status Executive Summary Actions", null, "System" },
                    { 4, "PMO", null, "System", "Decisions are critical choices that need to be made regarding the project's direction. The system searches for decisions that are pending using these criteria:Timeframe: Whole history and next 7 daysCalculated Status: Not CompletedPriority: High or CriticalReporting Level: Executive", "ProjectStatus", "EXECUTIVE_SUMMARY_DECISIONS", "WITH PriorityTasks AS (SELECT DCS.Title, DCS.ItemDescription, DCS.ProjectTeamId, DCS.ItemPriority, DCS.ItemDueDate, CASE WHEN DCS.ItemPriority = 'Critical' THEN 1 WHEN DCS.ItemPriority = 'High' THEN 2 WHEN DCS.ItemPriority = 'Medium' THEN 3 WHEN DCS.ItemPriority = 'Low' THEN 4 END AS PriorityRank FROM Decisions DCS WHERE DCS.ItemStatusId NOT IN (6, 20, 23, 26, 28, 29, 31) AND DCS.ItemPriority IN ('Critical', 'High', 'Medium', 'Low') AND DCS.ReportingLevelId IN (4, 5) AND DCS.ItemDueDate <= DATEADD(day, 7, CURRENT_TIMESTAMP) AND DCS.ProjectTeamId = {{ProjectTeam}}), HighestPriority AS (SELECT MIN(PriorityRank) AS MinPriorityRank FROM PriorityTasks) SELECT PT.Title, PT.ItemDescription, PT.ProjectTeamId, PT.ItemPriority, PT.ItemDueDate FROM PriorityTasks PT JOIN HighestPriority HP ON PT.PriorityRank = HP.MinPriorityRank", "Project Status Executive Summary Decisions", null, "System" },
                    { 5, "PMO", null, "System", "The system identifies high-priority interdependencies that need to be addressed promptly. The criteria for this search are: Timeframe: Whole history and next 7 days Calculated Status: Not Completed Priority: High or Critical", "ProjectStatus", "EXECUTIVE_SUMMARY_INTERDEPENDENCIES", "WITH PriorityTasks AS (SELECT ID.Title, ID.ProviderProjectTeamId, ID.ReceiverProjectTeamId, ID.ItemPriority, ID.ItemDueDate, CASE WHEN ID.ItemPriority = 'Critical' THEN 1 WHEN ID.ItemPriority = 'High' THEN 2 WHEN ID.ItemPriority = 'Medium' THEN 3 WHEN ID.ItemPriority = 'Low' THEN 4 END AS PriorityRank FROM Interdependencies ID WHERE ID.InterdependencyStatusId NOT IN (6, 20, 23, 26, 28, 29, 31) AND ID.ItemPriority IN ('Critical', 'High', 'Medium', 'Low') AND ID.ReportingLevelId IN (4, 5) AND ID.ItemDueDate <= DATEADD(day, 7, CURRENT_TIMESTAMP) AND (ID.ProviderProjectTeamId = {{ProjectTeam}} OR ID.ReceiverProjectTeamId = {{ProjectTeam}})), HighestPriority AS (SELECT MIN(PriorityRank) AS MinPriorityRank FROM PriorityTasks) SELECT PT.Title, PT.ProviderProjectTeamId, PT.ReceiverProjectTeamId, PT.ItemPriority, PT.ItemDueDate FROM PriorityTasks PT JOIN HighestPriority HP ON PT.PriorityRank = HP.MinPriorityRank", "Project Status Executive Summary Interdependencies", null, "System" },
                    { 6, "PMO", null, "System", "The Workplan section highlights the milestones or tasks that have been successfully completed in the past week. Filters include: Timeframe: Last 7 days Calculated Status: Closed Priority: High Reporting Level: Executive or Global.", "ProjectStatus", "ACCOMPLISHMENTS_WORKPLAN", "WITH PriorityTasks AS (SELECT WP.Title, WP.TaskDueDate, WP.ReportingLevelId, WP.Priority, WP.WorkPlanTaskType, CASE WHEN WP.Priority = '(1) High' THEN 1 WHEN WP.Priority = '(2) Medium' THEN 2 WHEN WP.Priority = '(3) Low' THEN 3 END AS PriorityRank FROM Workplan WP WHERE WP.WorkPlanTaskType IN ('Milestone','Task') AND WP.TimeBasedCalculatedStatusId = 26 AND WP.Priority IN ('(1) High', '(2) Medium', '(3) Low') AND WP.ReportingLevelId IN (4, 5) AND WP.TaskDueDate >= DATEADD(day, -7, CAST(GETDATE() AS DATE)) AND WP.TaskDueDate < CAST(GETDATE() AS DATE) AND WP.ProjectTeamId = {{ProjectTeam}}), HighestPriority AS (SELECT MIN(PriorityRank) AS MinPriorityRank FROM PriorityTasks) SELECT PT.Title, PT.TaskDueDate, PT.ReportingLevelId, PT.Priority, PT.WorkPlanTaskType FROM PriorityTasks PT JOIN HighestPriority HP ON PT.PriorityRank = HP.MinPriorityRank", "Project Status Accomplishments Workplan", null, "System" },
                    { 7, "PMO", null, "System", "This section identifies risks and issues resolved within the last 7 days. Filters include: Timeframe: Last 7 days Calculated Status: Closed Priority: High or Critical Reporting Level: Executive or Global.", "ProjectStatus", "ACCOMPLISHMENTS_RISKS_ISSUES", "WITH PriorityTasks AS (SELECT RAI.IssueRiskCategory, RAI.TimeBasedCalculatedStatusId, RAI.ItemDescription, RAI.ItemDueDate, RAI.ItemPriority, RAI.Title, RAI.ReportingLevelId, CASE WHEN RAI.ItemPriority = 'Critical' THEN 1 WHEN RAI.ItemPriority = 'High' THEN 2 WHEN RAI.ItemPriority = 'Medium' THEN 3 WHEN RAI.ItemPriority = 'Low' THEN 4 END AS PriorityRank FROM RisksAndIssues RAI WHERE RAI.TimeBasedCalculatedStatusId =26 AND RAI.ItemPriority IN ('Critical', 'High', 'Medium', 'Low') AND RAI.ReportingLevelId IN (4, 5) AND RAI.ItemDueDate >= DATEADD(day, -7, CAST(GETDATE() AS DATE)) AND RAI.ItemDueDate < CAST(GETDATE() AS DATE) AND RAI.ProjectTeamId = {{ProjectTeam}}), HighestPriority AS (SELECT MIN(PriorityRank) AS MinPriorityRank FROM PriorityTasks) SELECT PT.IssueRiskCategory, PT.TimeBasedCalculatedStatusId, PT.ItemDescription, PT.ItemDueDate, PT.ItemPriority, PT.Title, PT.ReportingLevelId FROM PriorityTasks PT JOIN HighestPriority HP ON PT.PriorityRank = HP.MinPriorityRank", "Project Status Accomplishments Risks and Issues", null, "System" },
                    { 8, "PMO", null, "System", "Actions completed in the past week. Filters include: Progress Status: Closed Priority: High or Critical Reporting Level: Executive or Global.", "ProjectStatus", "ACCOMPLISHMENTS_ACTIONS", "WITH PriorityTasks AS (SELECT ACT.Title, ACT.ItemDescription, ACT.ProjectTeamId, ACT.ItemPriority, ACT.ItemDueDate, CASE WHEN ACT.ItemPriority = 'Critical' THEN 1 WHEN ACT.ItemPriority = 'High' THEN 2 WHEN ACT.ItemPriority = 'Medium' THEN 3 WHEN ACT.ItemPriority = 'Low' THEN 4 END AS PriorityRank FROM Actions ACT WHERE ACT.ItemStatusId = 26 AND ACT.ItemPriority IN ('Critical', 'High', 'Medium', 'Low') AND ACT.ReportingLevelId IN (4, 5) AND ACT.ItemDueDate >= DATEADD(day, -7, CAST(GETDATE() AS DATE)) AND ACT.ItemDueDate < CAST(GETDATE() AS DATE) AND ACT.ProjectTeamId = {{ProjectTeam}}), HighestPriority AS (SELECT MIN(PriorityRank) AS MinPriorityRank FROM PriorityTasks) SELECT PT.Title, PT.ItemDescription, PT.ProjectTeamId, PT.ItemPriority, PT.ItemDueDate FROM PriorityTasks PT JOIN HighestPriority HP ON PT.PriorityRank = HP.MinPriorityRank", "Project Status Accomplishments Actions", null, "System" },
                    { 9, "PMO", null, "System", "Decisions made and closed in the past week. Filters include: Calculated Status: Closed Priority: High or Critical Reporting Level: Executive or Global.", "ProjectStatus", "ACCOMPLISHMENTS_DECISIONS", "WITH PriorityTasks AS (SELECT DCS.Title, DCS.ItemDescription, DCS.ProjectTeamId, DCS.ItemPriority, DCS.ItemDueDate, CASE WHEN DCS.ItemPriority = 'Critical' THEN 1 WHEN DCS.ItemPriority = 'High' THEN 2 WHEN DCS.ItemPriority = 'Medium' THEN 3 WHEN DCS.ItemPriority = 'Low' THEN 4 END AS PriorityRank FROM Decisions DCS WHERE DCS.ItemStatusId =26 AND DCS.ItemPriority IN ('Critical', 'High', 'Medium', 'Low') AND DCS.ReportingLevelId IN (4, 5) AND DCS.ItemDueDate >= DATEADD(day, -7, CAST(GETDATE() AS DATE)) AND DCS.ItemDueDate < CAST(GETDATE() AS DATE) AND DCS.ProjectTeamId = {{ProjectTeam}}), HighestPriority AS (SELECT MIN(PriorityRank) AS MinPriorityRank FROM PriorityTasks) SELECT PT.Title, PT.ItemDescription, PT.ProjectTeamId, PT.ItemPriority, PT.ItemDueDate FROM PriorityTasks PT JOIN HighestPriority HP ON PT.PriorityRank = HP.MinPriorityRank", "Project Status Accomplishments Decisions", null, "System" },
                    { 10, "PMO", null, "System", "The system identifies high-priority interdependencies that need to be addressed promptly. The criteria for this search are: Calculated Status: Closed Priority: Critical, High Reporting Level: Executive, Global", "ProjectStatus", "ACCOMPLISHMENTS_INTERDEPENDENCIES", "WITH PriorityTasks AS (SELECT ID.Title, ID.ProviderProjectTeamId, ID.ReceiverProjectTeamId, ID.ItemPriority, ID.ItemDueDate, CASE WHEN ID.ItemPriority = 'Critical' THEN 1 WHEN ID.ItemPriority = 'High' THEN 2 WHEN ID.ItemPriority = 'Medium' THEN 3 WHEN ID.ItemPriority = 'Low' THEN 4 END AS PriorityRank FROM Interdependencies ID WHERE ID.InterdependencyStatusId =26 AND ID.ItemPriority IN ('Critical', 'High', 'Medium', 'Low') AND ID.ReportingLevelId IN (4, 5) AND ID.ItemDueDate >= DATEADD(day, -7, CAST(GETDATE() AS DATE)) AND ID.ItemDueDate < CAST(GETDATE() AS DATE) AND (ID.ProviderProjectTeamId = {{ProjectTeam}} OR ID.ReceiverProjectTeamId = {{ProjectTeam}})), HighestPriority AS (SELECT MIN(PriorityRank) AS MinPriorityRank FROM PriorityTasks) SELECT PT.Title, PT.ProviderProjectTeamId, PT.ReceiverProjectTeamId, PT.ItemPriority, PT.ItemDueDate FROM PriorityTasks PT JOIN HighestPriority HP ON PT.PriorityRank = HP.MinPriorityRank", "Project Status Accomplishments Interdependencies", null, "System" },
                    { 11, "PMO", null, "System", "The Workplan section outlines the upcoming milestones or tasks for the next week. Filters include: Timeframe: Next 7 days Calculated Status: On Track Priority: High, Medium, etc. Reporting Level: Executive, Global.", "ProjectStatus", "NEXT_STEPS_WORKPLAN", "WITH PriorityTasks AS (SELECT WP.Title, WP.TaskDueDate, WP.ReportingLevelId, WP.Priority, WP.WorkPlanTaskType, CASE WHEN WP.Priority = '(1) High' THEN 1 WHEN WP.Priority = '(2) Medium' THEN 2 WHEN WP.Priority = '(3) Low' THEN 3 END AS PriorityRank FROM Workplan WP WHERE WP.WorkPlanTaskType IN ('Milestone','Task') AND WP.TimeBasedCalculatedStatusId NOT IN (26, 6, 20, 23, 28, 29, 31) AND WP.Priority IN ('(1) High', '(2) Medium', '(3) Low') AND WP.ReportingLevelId IN (4, 5) AND WP.TaskDueDate >= GETDATE() AND WP.TaskDueDate <= DATEADD(day, 7, CURRENT_TIMESTAMP) AND WP.ProjectTeamId = {{ProjectTeam}}), HighestPriority AS (SELECT MIN(PriorityRank) AS MinPriorityRank FROM PriorityTasks) SELECT PT.Title, PT.TaskDueDate, PT.ReportingLevelId, PT.Priority, PT.WorkPlanTaskType FROM PriorityTasks PT JOIN HighestPriority HP ON PT.PriorityRank = HP.MinPriorityRank", "Project Status Next Steps Workplan", null, "System" },
                    { 12, "PMO", null, "System", "The system identifies high-priority risks and issues that need to be addressed promptly. Filters include: Timeframe: Next 7 days Calculated Status: On Track Priority: High, Medium, etc. Reporting Level: Executive, Global.", "ProjectStatus", "NEXT_STEPS_RISKS_ISSUES", "WITH PriorityTasks AS (SELECT RAI.IssueRiskCategory, RAI.TimeBasedCalculatedStatusId, RAI.ItemDescription, RAI.ItemDueDate, RAI.ItemPriority, RAI.Title, RAI.ReportingLevelId, CASE WHEN RAI.ItemPriority = 'Critical' THEN 1 WHEN RAI.ItemPriority = 'High' THEN 2 WHEN RAI.ItemPriority = 'Medium' THEN 3 WHEN RAI.ItemPriority = 'Low' THEN 4 END AS PriorityRank FROM RisksAndIssues RAI WHERE RAI.TimeBasedCalculatedStatusId NOT IN (26, 6, 20, 23, 28, 29, 31) AND RAI.ItemPriority IN ('Critical', 'High', 'Medium', 'Low') AND RAI.ReportingLevelId IN (4, 5) AND RAI.ItemDueDate >= GETDATE() AND RAI.ItemDueDate <= DATEADD(day, 7, CURRENT_TIMESTAMP) AND RAI.ProjectTeamId = {{ProjectTeam}}), HighestPriority AS (SELECT MIN(PriorityRank) AS MinPriorityRank FROM PriorityTasks) SELECT PT.IssueRiskCategory, PT.TimeBasedCalculatedStatusId, PT.ItemDescription, PT.ItemDueDate, PT.ItemPriority, PT.Title, PT.ReportingLevelId FROM PriorityTasks PT JOIN HighestPriority HP ON PT.PriorityRank = HP.MinPriorityRank", "Project Status Next Steps Risks and Issues", null, "System" },
                    { 13, "PMO", null, "System", "Actions are tasks or steps that need to be taken to move the project forward. Filters include: Timeframe: Next 7 days Calculated Status: On Track Priority: High, Medium, etc. Reporting Level: Executive, Global.", "ProjectStatus", "NEXT_STEPS_ACTIONS", "WITH PriorityTasks AS (SELECT ACT.Title, ACT.ItemDescription, ACT.ProjectTeamId, ACT.ItemPriority, ACT.ItemDueDate, CASE WHEN ACT.ItemPriority = 'Critical' THEN 1 WHEN ACT.ItemPriority = 'High' THEN 2 WHEN ACT.ItemPriority = 'Medium' THEN 3 WHEN ACT.ItemPriority = 'Low' THEN 4 END AS PriorityRank FROM Actions ACT WHERE ACT.ItemStatusId NOT IN (26, 6, 20, 23, 28, 29, 31) AND ACT.ItemPriority IN ('Critical', 'High', 'Medium', 'Low') AND ACT.ReportingLevelId IN (4, 5) AND ACT.ItemDueDate >= GETDATE() AND ACT.ItemDueDate <= DATEADD(day, 7, CURRENT_TIMESTAMP) AND ACT.ProjectTeamId = {{ProjectTeam}}), HighestPriority AS (SELECT MIN(PriorityRank) AS MinPriorityRank FROM PriorityTasks) SELECT PT.Title, PT.ItemDescription, PT.ProjectTeamId, PT.ItemPriority, PT.ItemDueDate FROM PriorityTasks PT JOIN HighestPriority HP ON PT.PriorityRank = HP.MinPriorityRank", "Project Status Next Steps Actions", null, "System" },
                    { 14, "PMO", null, "System", "Decisions are critical choices that need to be made regarding the project's direction. Filters include: Timeframe: Next 7 days Calculated Status: On Track Priority: High, Medium, etc. Reporting Level: Executive, Global.", "ProjectStatus", "NEXT_STEPS_DECISIONS", "WITH PriorityTasks AS (SELECT DCS.Title, DCS.ItemDescription, DCS.ProjectTeamId, DCS.ItemPriority, DCS.ItemDueDate, CASE WHEN DCS.ItemPriority = 'Critical' THEN 1 WHEN DCS.ItemPriority = 'High' THEN 2 WHEN DCS.ItemPriority = 'Medium' THEN 3 WHEN DCS.ItemPriority = 'Low' THEN 4 END AS PriorityRank FROM Decisions DCS WHERE DCS.ItemStatusId NOT IN (26, 6, 20, 23, 28, 29, 31) AND DCS.ItemPriority IN ('Critical', 'High', 'Medium', 'Low') AND DCS.ReportingLevelId IN (4, 5) AND DCS.ItemDueDate >= GETDATE() AND DCS.ItemDueDate <= DATEADD(day, 7, CURRENT_TIMESTAMP) AND DCS.ProjectTeamId = {{ProjectTeam}}), HighestPriority AS (SELECT MIN(PriorityRank) AS MinPriorityRank FROM PriorityTasks) SELECT PT.Title, PT.ItemDescription, PT.ProjectTeamId, PT.ItemPriority, PT.ItemDueDate FROM PriorityTasks PT JOIN HighestPriority HP ON PT.PriorityRank = HP.MinPriorityRank", "Project Status Next Steps Decisions", null, "System" },
                    { 15, "PMO", null, "System", "The system identifies high-priority interdependencies that need to be addressed promptly. The criteria for this search are: Calculated Status: On Track Priority: Critical, High, Medium, Low (cascading) Reporting Level: Executive, Global", "ProjectStatus", "NEXT_STEPS_INTERDEPENDENCIES", "WITH PriorityTasks AS (SELECT ID.Title, ID.ProviderProjectTeamId, ID.ReceiverProjectTeamId, ID.ItemPriority, ID.ItemDueDate, CASE WHEN ID.ItemPriority = 'Critical' THEN 1 WHEN ID.ItemPriority = 'High' THEN 2 WHEN ID.ItemPriority = 'Medium' THEN 3 WHEN ID.ItemPriority = 'Low' THEN 4 END AS PriorityRank FROM Interdependencies ID WHERE ID.InterdependencyStatusId NOT IN (6, 20, 23, 26, 28, 29, 31) AND ID.ItemPriority IN ('Critical', 'High', 'Medium', 'Low') AND ID.ReportingLevelId IN (4, 5) AND ID.ItemDueDate <= DATEADD(day, 7, CURRENT_TIMESTAMP) AND (ID.ProviderProjectTeamId = {{ProjectTeam}} OR ID.ReceiverProjectTeamId = {{ProjectTeam}})),HighestPriority AS (SELECT MIN(PriorityRank) AS MinPriorityRank FROM PriorityTasks) SELECT PT.Title, PT.ProviderProjectTeamId, PT.ReceiverProjectTeamId, PT.ItemPriority, PT.ItemDueDate FROM PriorityTasks PT JOIN HighestPriority HP ON PT.PriorityRank = HP.MinPriorityRank", "Project Status Next Steps Interdependencies", null, "System" },
                    { 16, "PMO", null, "System", "The Project Status section is crucial for understanding the overall health of the project. The system evaluates the project's history to determine the overall status as: - At Risk: If any item is marked as \"At Risk\". - Behind Schedule: If any item is marked as \"Behind Schedule\". - On Track: If no items are marked as \"At Risk\" or \"Behind Schedule\".", "ProjectStatus", "PROJECT_STATUS_OVERALL_STATUS", "SELECT CASE WHEN COUNT(CASE WHEN WorkPlanTaskStatusId = 1 THEN 1 END) > 0 THEN 'Behind Schedule' WHEN COUNT(CASE WHEN WorkPlanTaskStatusId = 2 THEN 1 END) > 0 THEN 'At Risk' ELSE 'On Track' END AS GeneralStatus FROM WorkPlan WHERE ProjectTeamId = {{ProjectTeam}} AND TaskDueDate < GETDATE() AND TaskDueDate >= DATEADD(DAY, -7, GETDATE())", "Project Status Overall Status", null, "System" }
                });

            migrationBuilder.CreateIndex(
                name: "IX_AssistantContentGeneratorQueries_Key",
                table: "AssistantContentGeneratorQueries",
                column: "Key",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "AssistantContentGeneratorQueries");
        }
    }
}

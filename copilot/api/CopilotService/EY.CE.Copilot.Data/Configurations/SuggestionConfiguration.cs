using EY.CE.Copilot.Data.Models;
using EY.CE.Copilot.Data.Static;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace EY.CE.Copilot.Data.Configurations
{
    public class SuggestionConfiguration : IEntityTypeConfiguration<Suggestion>
    {
        public void Configure(EntityTypeBuilder<Suggestion> modelBuilder)
        {
            SuggestionMatrix[] suggestionMatrix = new SuggestionMatrix[]
            {
                //Seed data for ProjectData
                new SuggestionMatrix
                {
                    Source = Constants.Source.ProjectData.Key,
                    AppAfinity = Constants.App.ProjectManagement,
                    Suggestions = new List<SuggestionData>
                    {
                        new SuggestionData { SuggestionText = "How many milestones does each team have?",
                            SQLQuery = "SELECT pt.Title, COUNT(wp.WorkPlanTaskType) AS MilestoneCount FROM WorkPlan wp LEFT JOIN ProjectTeams pt ON pt.ID = wp.ProjectTeamId LEFT JOIN TeamTypes TT on TT.ID = pt.TeamTypeId WHERE wp.WorkPlanTaskType = 'Milestone' and TT.[Key] = 'PROJECT_MANAGEMENT' GROUP BY pt.Title "},
                        new SuggestionData { SuggestionText = "How many risks does each team have?",
                            SQLQuery = "SELECT pt.Title, COUNT(*) AS RiskCount FROM RisksAndIssues RI left join ProjectTeams pt on pt.ID = ri.ProjectTeamId LEFT JOIN TeamTypes TT on TT.ID = pt.TeamTypeId WHERE IssueRiskCategory = 'Risk' and TT.[Key] = 'PROJECT_MANAGEMENT' GROUP BY pt.Title"},
                        new SuggestionData { SuggestionText = "How many interdependencies does each receiver team have?",
                            SQLQuery = "SELECT      ReceiverTeam.Title AS ReceiverTeamName,     COUNT(1) AS InterdependencyCount FROM      Interdependencies AS I INNER JOIN      ProjectTeams AS ReceiverTeam ON I.ReceiverProjectTeamId = ReceiverTeam.ID GROUP BY      ReceiverTeam.Title"},
                        new SuggestionData { SuggestionText = "List out behind schedule milestones.",
                            SQLQuery = "SELECT wp.Title Workplan, pt.Title ProjectTeam, s.Title [Status] ,Wp.TaskDueDate, wp.StartDate, wp.IsCritical, UP.Title TaskOwner from WorkPlan wp   LEFT JOIN Statuses s on wp.WorkPlanTaskStatusId = s.ID  left join ProjectTeams pt on pt.ID = wp.ProjectTeamId LEFT JOIN TeamTypes TT on TT.ID = pt.TeamTypeId LEFT JOIN UserProfiles UP ON wp.TaskOwnerId = UP.ID where s.[Key] = 'BEHIND_SCHEDULE'  AND wp.WorkPlanTaskType = 'Milestone' and TT.[Key] = 'PROJECT_MANAGEMENT'"},
                        new SuggestionData { SuggestionText = "List out behind schedule risks.",
                            SQLQuery = "SELECT RI.Title, RI.ItemDescription, RI.ItemDueDate, RI.RiskImpact, RI.RiskMitigation, RI.RiskProbability, PT.Title ProjectTeam, UP.Title ItemOwner  from RisksAndIssues RI    LEFT JOIN Statuses s on RI.ItemStatusId = s.ID    LEFT JOIN ProjectTeams pt on pt.ID = RI.ProjectTeamId  LEFT JOIN TeamTypes TT on TT.ID = pt.TeamTypeId  LEFT JOIN UserProfiles UP ON RI.ItemOwnerId = UP.ID where s.[Key] = 'BEHIND_SCHEDULE'  AND RI.IssueRiskCategory = 'Risk' and TT.[Key] = 'PROJECT_MANAGEMENT' "},
                        new SuggestionData { SuggestionText = "List out behind schedule interdependencies.",
                            SQLQuery = "SELECT I.Title,  R.Title ReceiverTeam, P.Title ProviderTeam, UR.Title ReceiverOwner, UP.Title ProviderOwner, I.ItemDueDate  from Interdependencies I   LEFT JOIN InterdependencyStatuses s on I.InterdependencyStatusId = s.ID   LEFT JOIN ProjectTeams R ON I.ReceiverProjectTeamID = R.ID LEFT JOIN ProjectTeams P ON I.ProviderProjectTeamId = P.ID LEFT JOIN UserProfiles UR ON I.ReceiverOwnerId = UR.ID LEFT JOIN UserProfiles UP ON I.ProviderOwnerId = UP.ID where s.[Key] = 'BEHIND_SCHEDULE'"},
                        new SuggestionData { SuggestionText = "How many of my milestones are due this week?",
                            SQLQuery = "SELECT COUNT(*) AS MilestonesDueThisWeek FROM WorkPlan wp LEFT JOIN statuses s ON wp.WorkPlanTaskStatusId = s.ID  LEFT JOIN ProjectTeams pt on pt.ID = wp.ProjectTeamId LEFT JOIN TeamTypes TT on TT.ID = pt.TeamTypeId LEFT JOIN UserProfiles up on wp.TaskOwnerId = up.ID  WHERE wp.WorkPlanTaskType = 'Milestone'    AND YEAR(wp.TaskDueDate) = YEAR(GETDATE())   AND DATEPART(WEEK, wp.TaskDueDate) = DATEPART(WEEK, GETDATE())    AND (s.[Key] IS NULL OR s.[Key]  NOT IN ('COMPLETED', 'CLOSED', 'CANCELLED'))  AND TT.[Key] = 'PROJECT_MANAGEMENT' AND up.EMail = '{Username}'"},
                        new SuggestionData { SuggestionText = "How many of my risks are due this week?",
                            SQLQuery = "SELECT COUNT(*) AS RisksAndIssuesDueThisWeek  FROM RisksAndIssues RI  LEFT JOIN statuses S ON RI.ItemStatusId = S.ID  LEFT JOIN UserProfiles up on RI.ItemOwnerId = up.ID  LEFT JOIN ProjectTeams pt on pt.ID = RI.ProjectTeamId LEFT JOIN TeamTypes TT on TT.ID = pt.TeamTypeId WHERE RI.IssueRiskCategory = 'Risk'    AND YEAR(RI.ItemDueDate) = YEAR(GETDATE())   AND DATEPART(WEEK, RI.ItemDueDate) = DATEPART(WEEK, GETDATE())   AND (S.[Key] IS NULL OR S.[Key] NOT IN ('COMPLETED', 'CLOSED', 'CANCELLED'))  AND TT.[Key] = 'PROJECT_MANAGEMENT' AND up.EMail = '{Username}'"},
                        new SuggestionData { SuggestionText = "How many interdependencies are due this week?",
                            SQLQuery = "SELECT      COUNT(*) AS InterdependenciesDueThisWeek FROM      Interdependencies I  LEFT JOIN      statuses S ON I.InterdependencyStatusId = S.ID LEFT JOIn ProjectTeams PT on PT.ID = I.ReceiverProjectTeamId LEFT JOIN TeamTypes TT on TT.ID = PT.TeamTypeId WHERE   YEAR(I.ItemDueDate) = YEAR(GETDATE())      AND DATEPART(WEEK, I.ItemDueDate) = DATEPART(WEEK, GETDATE())      AND (S.[Key] IS NULL OR S.[Key] NOT IN ('COMPLETED', 'CLOSED', 'CANCELLED')) AND TT.[Key] = 'PROJECT_MANAGEMENT'"},
                        new SuggestionData { SuggestionText = "Which project team has the most overdue milestones?",
                            SQLQuery = "SELECT     pt.Title AS ProjectTeamTitle, COUNT(*) AS OverdueMilestoneCount FROM   WorkPlan wp INNER JOIN  ProjectTeams pt ON wp.ProjectTeamId = pt.ID  LEFT JOIN  statuses s ON wp.WorkPlanTaskStatusId = s.ID  LEFT JOIN TeamTypes TT on TT.ID = pt.TeamTypeId WHERE  wp.WorkPlanTaskType = 'Milestone'  AND wp.TaskDueDate < GETDATE()    AND TT.[Key] = 'PROJECT_MANAGEMENT' AND (s.[Key] IS NULL OR s.[Key] NOT IN ('COMPLETED', 'CLOSED')) GROUP BY   pt.Title ORDER BY      OverdueMilestoneCount DESC"},
                        new SuggestionData { SuggestionText = "Which project team has the most overdue risks?",
                            SQLQuery = "SELECT  pt.Title AS ProjectTeamTitle,     COUNT(1) AS OverdueRiskCount FROM  RisksAndIssues RI  LEFT JOIN ProjectTeams pt ON RI.ProjectTeamId = pt.ID  LEFT JOIN TeamTypes TT on TT.ID = pt.TeamTypeId LEFT JOIN      statuses S ON RI.ItemStatusId = S.ID  WHERE      RI.IssueRiskCategory = 'Risk'      AND RI.ItemDueDate < GETDATE()      AND (S.[Key] IS NULL OR S.[Key] NOT IN ('COMPLETED', 'CLOSED')) AND TT.[Key] = 'PROJECT_MANAGEMENT' GROUP BY      pt.Title ORDER BY  OverdueRiskCount desc"},
                        new SuggestionData { SuggestionText = "Which provider project team has the most overdue interdependencies?",
                            SQLQuery = "SELECT      ProviderTeam.Title AS ProviderTeamTitle,     COUNT(1) AS OverdueDependencyCount FROM      Interdependencies I INNER JOIN      ProjectTeams ProviderTeam ON I.ProviderProjectTeamId = ProviderTeam.ID LEFT JOIN      InterdependencyStatuses S ON I.InterdependencyStatusId = S.ID WHERE      I.ItemDueDate < GETDATE()     AND (S.[Key] IS NULL OR S.[Key] NOT IN ('COMPLETED', 'CLOSED')) GROUP BY      ProviderTeam.Title ORDER BY      OverdueDependencyCount DESC"},
                        new SuggestionData { SuggestionText = "Show me open risks broken down by impact and probability.",
                            SQLQuery = "SELECT RI.RiskImpact, RI.RiskProbability, COUNT(*) AS RiskCount FROM RisksAndIssues RI LEFT JOIN ProjectTeams pt on pt.ID = RI.ProjectTeamId LEFT JOIN TeamTypes TT on TT.ID = pt.TeamTypeId WHERE RI.IssueRiskCategory = 'Risk' AND RI.ItemStatusId NOT IN (SELECT S.ID FROM statuses S WHERE S.[Key] IN ('COMPLETED', 'CLOSED', 'CANCELLED', 'DELETED', 'REJECTED',  'ON_HOLD' )) AND (RI.RiskImpact IS NOT NULL OR RI.RiskProbability IS NOT NULL) GROUP BY RI.RiskImpact, RI.RiskProbability ORDER BY RI.RiskImpact, RI.RiskProbability"},
                        new SuggestionData { SuggestionText = "Which receiver project team has the most overdue interdependencies?",
                            SQLQuery = "SELECT      ReceiverTeam.Title AS ReceiverTeamTitle,     COUNT(1) AS OverdueDependencyCount FROM      Interdependencies I INNER JOIN      ProjectTeams ReceiverTeam ON I.ReceiverProjectTeamId = ReceiverTeam.ID LEFT JOIN      InterdependencyStatuses S ON I.InterdependencyStatusId = S.ID WHERE      I.ItemDueDate < GETDATE()     AND (S.[Key] IS NULL OR S.[Key] NOT IN ('COMPLETED', 'CLOSED')) GROUP BY      ReceiverTeam.Title ORDER BY      OverdueDependencyCount DESC"},
                        new SuggestionData { SuggestionText = "How many interdependencies does each provider team have?",
                            SQLQuery = "SELECT      ProviderTeam.Title AS ProviderTeamame,     COUNT(1) AS InterdependencyCount FROM      Interdependencies AS I INNER JOIN      ProjectTeams AS ProviderTeam ON I.ProviderProjectTeamId = ProviderTeam.ID GROUP BY      ProviderTeam.Title"},
                        new SuggestionData { SuggestionText = "List out workplan items assigned to User in PMO app.",
                            SQLQuery = "SELECT wp.Title Workplan, pt.Title ProjectTeam, s.Title [Status] ,Wp.TaskDueDate, wp.StartDate, wp.IsCritical, UP.Title TaskOwner  from WorkPlan wp    LEFT JOIN Statuses s on wp.WorkPlanTaskStatusId = s.ID   left join ProjectTeams pt on pt.ID = wp.ProjectTeamId  LEFT JOIN TeamTypes TT on TT.ID = pt.TeamTypeId  LEFT JOIN UserProfiles UP ON wp.TaskOwnerId = UP.ID WHERE UP. Title = ( SELECT TOP 1 Title  FROM UserProfiles WHERE FREETEXT(Title, '{Username}') AND TT.[Key] = 'PROJECT_MANAGEMENT')",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "When is my weekly status report due?",
                            SQLQuery = "SELECT TOP 1      CAST(RP.PeriodEndDate AS DATE) AS WeeklyStatusDueDate,     RP.Title AS PeriodTitle,     RP.PeriodStartDate AS StartDate,     RP.PeriodEndDate AS \"End Date\",     RP.Created AS CreatedDate,     RP.Modified AS LastModifiedDate FROM      ReportingPeriods RP  WHERE      CAST(GETDATE() AS DATE) BETWEEN CAST(RP.PeriodStartDate AS DATE) AND CAST(RP.PeriodEndDate AS DATE)  ORDER BY      RP.Modified DESC",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "Who is the functional owner of HR team?",
                            SQLQuery = "SELECT PT.Title as ProjectTeam, UP.Title AS FunctionalOwner FROM ProjectTeams PT JOIN Userprofiles UP ON PT.ItemOwnerID = UP.ID WHERE PT.Title = {ProjectTeam}",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "List out Behind Schedule items for HR team in PMO app.",
                            SQLQuery= "SELECT      WP.Title,  WP.TaskDueDate,  WP.ActualStartDate,  WP.WorkPlanTaskType,  WP.TaskDescription,  WP.[Priority],  WP.IsCritical,  UP.Title TaskOwner,  PT.Title AS ProjectTeam,  S.Title AS [Status] FROM     Workplan WP JOIN      ProjectTeams PT ON WP.ProjectTeamId = PT.ID JOIN      Statuses S ON WP.WorkPlanTaskStatusId = S.ID JOIN      TeamTypes TT ON PT.TeamTypeID = TT.ID LEFT JOIN   UserProfiles UP ON wp.TaskOwnerId = UP.ID  WHERE      S.[Key] = 'BEHIND_SCHEDULE'     AND TT.[Key] = 'PROJECT_MANAGEMENT'     AND PT.Title = {ProjectTeam}",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "List out workplan items due next week in PMO app.",
                            SQLQuery= "SELECT      W.Title AS WorkPlanItem,  W.TaskDueDate,  W.ActualStartDate,  W.WorkPlanTaskType,  W.TaskDescription,  W.[Priority],  W.IsCritical,  UP.Title TaskOwner,  PT.Title AS ProjectTeam,  S.Title AS [Status]  FROM      Workplan W  LEFT JOIN      ProjectTeams PT ON W.ProjectTeamId = PT.ID  LEFT JOIN      TeamTypes TT ON PT.TeamTypeId = TT.ID  LEFT JOIN   UserProfiles UP ON W.TaskOwnerId = UP.ID  LEFT JOIN      Statuses S ON W.WorkPlanTaskStatusId = S.ID  WHERE      TT.[Key] = 'PROJECT_MANAGEMENT'      AND DATEPART(ww, W.TaskDueDate) = DATEPART(ww, GETDATE()) + 1 AND YEAR(W.TaskDueDate) = YEAR(GETDATE()) AND (S.[Key] IS NULL OR S.[Key] NOT IN ('COMPLETED', 'CLOSED', 'CANCELLED'))",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "List out sub functions of Finance.",
                            SQLQuery= "SELECT  SF.Title , F.Title AS [Function], SF.[Key] FROM  Subfunctions SF  JOIN  Functions F ON SF.FunctionID = F.ID  WHERE  F.Title = {ProjectTeam}",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "What was the status of Finance team last week?",
                            SQLQuery= "SELECT      WS.Title, PT.Title AS ProjectTeams, RP.PeriodStartDate, RP.PeriodEndDate, RP.Title ReportingPeriod, PSE.ID AS ProjectStatusEntriesID FROM      ProjectStatusEntries PSE JOIN      ProjectTeams PT ON PSE.ProjectTeamID = PT.ID JOIN      WeeklyStatusStatuses WS ON PSE.WeeklyStatusStatusId = WS.ID  JOIN      ReportingPeriods RP ON PSE.ReportingPeriodID = RP.ID WHERE      PT.Title = {ProjectTeam}      AND  RP.ID = (  SELECT RPID.ID - 1         FROM ReportingPeriods RPID         WHERE CAST (GETDATE() as DATE) BETWEEN CAST (RPID.PeriodStartDate as DATE) AND CAST (RPID.PeriodEndDate as DATE))",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "What were the accomplishment and next steps of Finance team last week?",
                            SQLQuery= "SELECT AN.Title, AN.AccomplishmentNextstepCategory, WS.Title, PT.Title AS ProjectTeams, RP.PeriodStartDate, RP.PeriodEndDate, RP.Title ReportingPeriod, PSE.ID AS ProjectStatusEntriesID  FROM      ProjectStatusEntries PSE JOIN      ProjectTeams PT ON PSE.ProjectTeamID = PT.ID  JOIN      AccomplishmentsAndNextSteps AN ON PSE.ID = AN.ProjectStatusEntryId JOIN      ReportingPeriods RP ON PSE.ReportingPeriodID = RP.ID  JOIN      WeeklyStatusStatuses WS ON PSE.WeeklyStatusStatusId = WS.ID    WHERE      PT.Title = {ProjectTeam}      AND RP.ID = (SELECT RPID.ID - 1 FROM ReportingPeriods RPID WHERE CAST( GETDATE() as DATE) BETWEEN CAST(RPID.PeriodStartDate as DATE) AND CAST(RPID.PeriodEndDate as DATE)) ORDER BY      AN.AccomplishmentNextstepCategory",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "List out overdue interdependencies.",
                            SQLQuery= "SELECT I.Title, R.Title ReceiverTeam, P.Title ProviderTeam, UR.Title ReceiverOwner, UP.Title ProviderOwner, I.ItemDueDate FROM Interdependencies I  LEFT JOIN InterdependencyStatuses S on I.InterdependencyStatusId = S.ID   LEFT JOIN ProjectTeams R ON I.ReceiverProjectTeamID = R.ID LEFT JOIN ProjectTeams P ON I.ProviderProjectTeamId = P.ID LEFT JOIN UserProfiles UR ON I.ReceiverOwnerId = UR.ID LEFT JOIN UserProfiles UP ON I.ProviderOwnerId = UP.ID WHERE CAST(I.ItemDueDate AS DATE) < CAST(GETDATE() AS DATE)",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "List out team with most overdue interdependencies.",
                            SQLQuery= "SELECT TOP 1 PT.Title Team, SUM(Counts) TotalInterdependencies  FROM  (SELECT ProviderProjectTeamID TeamID, Count(ID) Counts  FROM Interdependencies I WHERE CAST(I.ItemDueDate AS DATE) < CAST(GETDATE() AS DATE) GROUP BY I.ProviderProjectTeamID  UNION ALL  SELECT ReceiverProjectTeamID, Count(ID)  FROM Interdependencies I WHERE CAST(I.ItemDueDate AS DATE) < CAST(GETDATE() AS DATE) GROUP BY I.ReceiverProjectTeamID ) SUB  JOIN ProjectTeams PT ON SUB.TeamID = PT.ID GROUP BY PT.Title ORDER BY TotalInterdependencies DESC",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "List out Risks with no mitigation plan in place in PMO app.",
                            SQLQuery= "SELECT      RI.Title AS RisksWithNoMitigation,  RI.IsCritical,  RI.IssueRiskCategory,  RI.ItemDescription,  RI.ItemDueDate,  RI.ItemPriority,  RI.RiskImpact,  RI.RiskProbability,  TT.TITLE AS TeamType,  UP.Title TaskOwner,  PT.Title AS ProjectTeam,  S.Title AS [Status]  FROM      RisksandIssues RI LEFT JOIN      ProjectTeams PT ON RI.ProjectTeamId = PT.ID LEFT JOIN      TeamTypes TT ON PT.TeamTypeId = TT.ID LEFT JOIN  Statuses S ON S.ID = RI.ItemStatusId LEFT JOIN  UserProfiles UP ON UP.ID = RI.ItemOwnerId WHERE      RI.RiskMitigation IS NULL     AND RI.IssueRiskCategory = 'Risk'     AND TT.[Key] = 'PROJECT_MANAGEMENT'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "List out Risks with no owners assigned to them in PMO app.",
                            SQLQuery= "SELECT      RI.Title AS RisksWithNoOwner, RI.IsCritical, RI.IssueRiskCategory, RI.ItemDescription, RI.ItemDueDate, RI.ItemPriority, RI.RiskImpact, RI.RiskProbability, TT.TITLE AS TeamType, UP.Title TaskOwner, PT.Title AS ProjectTeam, S.Title AS [Status], RI.RiskMitigation FROM      RisksandIssues RI LEFT JOIN      ProjectTeams PT     ON RI.ProjectTeamId = PT.ID LEFT JOIN      TeamTypes TT     ON PT.TeamTypeId = TT.ID LEFT JOIN Statuses S ON S.ID = RI.ItemStatusId LEFT JOIN UserProfiles UP ON UP.ID = RI.ItemOwnerId WHERE      RI.ItemOwnerID IS NULL     AND RI.IssueRiskCategory = 'Risk'     AND TT.[Key] = 'PROJECT_MANAGEMENT'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "Show me upcoming milestones that have risks linked to it in PMO app.",
                            SQLQuery= "SELECT      W.Title AS Milestones, W.TaskDueDate, W.ActualStartDate, W.WorkPlanTaskType, W.TaskDescription, W.[Priority], W.IsCritical, UP.Title TaskOwner, PT.Title AS ProjectTeam, S.Title AS [Status] FROM      Workplan W LEFT JOIN      ProjectTeams PT ON W.ProjectTeamId = PT.ID LEFT JOIN      TeamTypes TT ON PT.TeamTypeId = TT.ID LEFT JOIN  UserProfiles UP ON W.TaskOwnerId = UP.ID LEFT JOIN      Statuses S ON W.WorkPlanTaskStatusId = S.ID WHERE      W.WorkplanTaskType = 'Milestone'     AND CAST(W.StartDate AS DATE) > CAST(GETDATE() AS DATE)     AND TT.[Key] = 'PROJECT_MANAGEMENT'     AND EXISTS (         SELECT 1          FROM WorkPlansToRisksAndIssuesForAssociatedRisksAndIssues WRIARI          WHERE WRIARI.WorkPlanId = W.ID     )",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "How many teams do I have in PMO app?",
                            SQLQuery= "SELECT  PT.Title AS Team , UP.Title AS [Owner], TT.Title AS TeamType, PT.[Key] FROM  ProjectTeams PT  JOIN  TeamTypes TT ON PT.TeamTypeID = TT.ID  LEFT JOIN  UserProfiles UP ON PT.ItemOwnerId = UP.ID WHERE  TT.[Key] = 'PROJECT_MANAGEMENT'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "What are child teams of Finance in PMO app?",
                            SQLQuery= "SELECT  Child.Title AS Teams, UP.Title AS [Owner], TT.Title AS TeamType, Child.[Key] FROM  ProjectTeams Parent  JOIN  ProjectTeams Child ON Child.ParentProjectTeamId = Parent.ID  JOIN  TeamTypes TT ON Child.TeamTypeID = TT.ID  LEFT JOIN  UserProfiles UP ON Child.ItemOwnerId = UP.ID WHERE  Parent.Title = {ProjectTeam}",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "What is the parent team of Tax in PMO app?",
                            SQLQuery= "SELECT  Parent.Title AS ParentTeam, UP.Title AS [Owner], TT.Title AS TeamType, Parent.[Key] FROM  ProjectTeams Parent  JOIN  ProjectTeams Child ON Child.ParentProjectTeamId = Parent.ID  JOIN  TeamTypes TT ON Parent.TeamTypeId = TT.ID  LEFT JOIN  UserProfiles UP ON Parent.ItemOwnerId = UP.ID WHERE  TT.[Key] = 'PROJECT_MANAGEMENT'  AND Child.Title = {ProjectTeam}",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "What are my accomplishments from last reporting period?",
                            SQLQuery= "SELECT      AN.Title AS Accomplishment, AN.AccomplishmentNextstepCategory, WS.Title, PT.Title AS ProjectTeams, RP.PeriodStartDate, RP.PeriodEndDate, RP.Title ReportingPeriod, PSE.ID AS ProjectStatusEntriesID FROM      ProjectStatusEntries PSE JOIN      ProjectTeams PT ON PSE.ProjectTeamID = PT.ID JOIN      UserProfiles UP ON PT.ItemOwnerID = UP.ID JOIN      AccomplishmentsAndNextSteps AN ON PSE.ID = AN.ProjectStatusEntryId JOIN      ReportingPeriods RP ON PSE.ReportingPeriodID = RP.ID JOIN      WeeklyStatusStatuses WS ON PSE.WeeklyStatusStatusId = WS.ID WHERE      UP.EMail = '{Username}'     AND RP.ID = (         SELECT RPID.ID - 1         FROM ReportingPeriods RPID         WHERE GETDATE() BETWEEN RPID.PeriodStartDate AND RPID.PeriodEndDate     )     AND AN.AccomplishmentNextstepCategory = 'Accomplishment'",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "What are next steps for Finance team?",
                            SQLQuery= "SELECT      AN.Title AS NextSteps,     AN.AccomplishmentNextstepCategory, WS.Title, PT.Title AS ProjectTeams, RP.PeriodStartDate, RP.PeriodEndDate, RP.Title ReportingPeriod, PSE.ID AS ProjectStatusEntriesID FROM      ProjectStatusEntries PSE JOIN      ProjectTeams PT ON PSE.ProjectTeamID = PT.ID JOIN      AccomplishmentsAndNextSteps AN ON PSE.ID = AN.ProjectStatusEntryId JOIN      ReportingPeriods RP ON PSE.ReportingPeriodID = RP.ID JOIN      WeeklyStatusStatuses WS ON PSE.WeeklyStatusStatusId = WS.ID WHERE      PT.Title = {ProjectTeam}     AND RP.ID = (         SELECT RPID.ID         FROM ReportingPeriods RPID         WHERE GETDATE() BETWEEN RPID.PeriodStartDate AND RPID.PeriodEndDate     )     AND AN.AccomplishmentNextstepCategory = 'Next Step'",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "List the interdependencies for which I'm the provider.",
                            SQLQuery= "SELECT I.Title, R.Title ReceiverTeam, P.Title ProviderTeam, UR.Title ReceiverOwner, UP.Title ProviderOwner, I.ItemDueDate FROM Interdependencies I LEFT JOIN InterdependencyStatuses S on I.InterdependencyStatusId = S.ID   LEFT JOIN ProjectTeams R ON I.ReceiverProjectTeamID = R.ID LEFT JOIN ProjectTeams P ON I.ProviderProjectTeamId = P.ID LEFT JOIN UserProfiles UR ON I.ReceiverOwnerId = UR.ID LEFT JOIN UserProfiles UP ON I.ProviderOwnerId = UP.ID WHERE UP.EMail = '{Username}'",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "How many issues don't have a mitigation plan in PMO app?",
                            SQLQuery= "SELECT Count(RI.ID) IssueCoutnwithNoMitigationPlan FROM RisksandIssues RI LEFT JOIN ProjectTeams PT ON RI.ProjectTeamId = PT.ID LEFT JOIN TeamTypes TT ON PT.TeamTypeId = TT.ID WHERE RiskMitigation IS NULL AND IssueRiskCategory = 'Issue' AND TT.[Key] = 'PROJECT_MANAGEMENT'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "List tasks that have missing owners in PMO app.",
                            SQLQuery= "SELECT      WP.UniqueItemIdentifier,     WP.Title, WP.TaskDueDate, WP.ActualStartDate, WP.WorkPlanTaskType, WP.TaskDescription, WP.[Priority], WP.IsCritical, UP.Title TaskOwner, PT.Title AS ProjectTeam, S.Title AS [Status] FROM      WORKPLAN WP JOIN      ProjectTeams PT ON WP.ProjectTeamId = PT.ID JOIN      Statuses S ON WP.WorkPlanTaskStatusId = S.ID JOIN      TeamTypes TT ON PT.TeamTypeID = TT.ID LEFT JOIN  UserProfiles UP ON WP.TaskOwnerId = UP.ID  WHERE      TaskOwnerId IS NULL     AND WorkPlanTaskType = 'Task'     AND TT.[Key] = 'PROJECT_MANAGEMENT'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "How many high risk items are there for IT in PMO app?",
                            SQLQuery= "SELECT  COUNT(1) [HighRiskItemCount]  FROM RisksAndIssues R  LEFT JOIN ProjectTeams PT ON PT.ID = R.ProjectTeamId  LEFT JOIN TeamTypes TT on TT.ID  = PT.TeamTypeId WHERE  RiskImpact = 'High'  AND IssueRiskCategory = 'Risk' AND TT.[Key]='PROJECT_MANAGEMENT' AND PT.Title ={ProjectTeam}",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "List all workplan, raid and interdependencies assigned to user.",
                            SQLQuery= "SELECT      W.Title,     'Workplan' AS [Category],     UP.Title AS UserName, PT.Title AS ProjectTeam, S.Title AS [Status] FROM      Workplan W LEFT JOIN      UserProfiles UP ON W.TaskOwnerID = UP.ID JOIN      ProjectTeams PT ON W.ProjectTeamId = PT.ID JOIN      Statuses S ON W.WorkPlanTaskStatusId = S.ID  WHERE      UP.Title = (SELECT TOP 1 Title FROM UserProfiles WHERE FREETEXT(Title, '{Username}'))  UNION ALL  SELECT      RI.Title,     IssueRiskCategory AS [Category],     UP.Title AS UserName, PT.Title AS ProjectTeam, S.Title AS [Status] FROM      RisksAndIssues RI LEFT JOIN      UserProfiles UP ON RI.ItemOwnerId = UP.ID JOIN      ProjectTeams PT ON RI.ProjectTeamId = PT.ID JOIN      Statuses S ON RI.ItemStatusId = S.ID WHERE      UP.Title = (SELECT TOP 1 Title FROM UserProfiles WHERE FREETEXT(Title, '{Username}'))  UNION ALL  SELECT      A.Title,     'Action' AS [Category],     UP.Title AS UserName, PT.Title AS ProjectTeam, S.Title AS [Status] FROM      Actions A LEFT JOIN      UserProfiles UP ON A.ItemOwnerId = UP.ID JOIN      ProjectTeams PT ON A.ProjectTeamId = PT.ID JOIN      Statuses S ON A.ItemStatusId = S.ID WHERE      UP.Title = (SELECT TOP 1 Title FROM UserProfiles WHERE FREETEXT(Title, '{Username}'))  UNION ALL  SELECT      D.Title,     'Decision' AS [Category],     UP.Title AS UserName, PT.Title AS ProjectTeam, S.Title AS [Status] FROM      Decisions D LEFT JOIN      UserProfiles UP ON D.ItemOwnerId = UP.ID JOIN      ProjectTeams PT ON D.ProjectTeamId = PT.ID JOIN      Statuses S ON D.ItemStatusId = S.ID WHERE      UP.Title = (SELECT TOP 1 Title FROM UserProfiles WHERE FREETEXT(Title, '{Username}'))  UNION ALL  SELECT      I.Title,     'Interdependecy as Provider' AS [Category],     UP.Title AS UserName, PT.Title AS ProjectTeam, S.Title AS [Status] FROM      Interdependencies I LEFT JOIN      UserProfiles UP ON I.ProviderOwnerId = UP.ID JOIN      ProjectTeams PT ON I.ProviderProjectTeamId = PT.ID JOIN      Statuses S ON I.InterdependencyStatusId = S.ID WHERE      UP.Title = (SELECT TOP 1 Title FROM UserProfiles WHERE FREETEXT(Title, '{Username}'))  UNION ALL  SELECT      I.Title,     'Interdependecy as Receiver' AS [Category],     UP.Title AS UserName, PT.Title AS ProjectTeam, S.Title AS [Status] FROM      Interdependencies I LEFT JOIN      UserProfiles UP ON I.ReceiverOwnerId = UP.ID JOIN      ProjectTeams PT ON I.ReceiverProjectTeamId = PT.ID JOIN      Statuses S ON I.InterdependencyStatusId = S.ID WHERE      UP.Title = (SELECT TOP 1 Title FROM UserProfiles WHERE FREETEXT(Title, '{Username}'))",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "Are there any project teams that are 'At Risk' or 'Behind Schedule'?",
                            SQLQuery= "SELECT PT.Title [Project Team] , WS.Title WeeklyStatus,  PSE.ExecutiveSummary FROM ProjectStatusEntries PSE   LEFT JOIN ProjectTeams PT ON PSE.ProjectTeamID = PT.ID   LEFT JOIN TeamTypes TT on TT.ID  = PT.TeamTypeId  LEFT JOIN ReportingPeriods RP ON PSE.ReportingPeriodID = RP.ID   LEFT JOIN WeeklyStatusStatuses WS ON WS.ID = PSE.WeeklyStatusStatusId   WHERE  RP.ID = (SELECT RPID.ID       FROM ReportingPeriods RPID      WHERE GETDATE() BETWEEN RPID.PeriodStartDate AND RPID.PeriodEndDate)      AND WS.[KEY] IN ('AT_RISK','BEHIND_SCHEDULE')      AND TT.[Key]='PROJECT_MANAGEMENT'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "How many workplan tasks were completed last week in PMO app?",
                            SQLQuery= "SELECT    Count(W.ID) as TasksCompletedLastWeek   FROM    Workplan W    JOIN Statuses S ON W.WorkPlanTaskStatusId = S.ID     JOIN ProjectTeams PT ON W.ProjectTeamId = PT.ID    JOIN TeamTypes TT ON PT.TeamTypeId = TT.ID WHERE  YEAR(W.ActualEndDate) = YEAR(GETDATE()) AND DATEPART(ww, W.ActualEndDate) = DATEPART(ww, GETDATE()) -1 AND S.[KEY] IN ('COMPLETED')   AND TT.[Key] = 'PROJECT_MANAGEMENT'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "How many workplan tasks are completed this week in PMO app?",
                            SQLQuery= "SELECT    Count(W.ID) as TasksCompletedThisWeek   FROM    Workplan W    JOIN Statuses S ON W.WorkPlanTaskStatusId = S.ID     JOIN ProjectTeams PT ON W.ProjectTeamId = PT.ID    JOIN TeamTypes TT ON PT.TeamTypeId = TT.ID WHERE  YEAR(W.ActualEndDate) = YEAR(GETDATE()) AND DATEPART(ww, W.ActualEndDate) = DATEPART(ww, GETDATE()) AND S.[KEY] IN ('COMPLETED')   AND TT.[Key] = 'PROJECT_MANAGEMENT'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "How many workplan tasks that are due this week in PMO app?",
                            SQLQuery= "SELECT    Count(W.ID) as TasksDueThisWeek  FROM    Workplan W    JOIN Statuses S ON W.WorkPlanTaskStatusId = S.ID    JOIN ProjectTeams PT ON W.ProjectTeamId = PT.ID    JOIN TeamTypes TT ON PT.TeamTypeId = TT.ID  WHERE  YEAR(W.ActualEndDate) = YEAR(GETDATE()) AND DATEPART(ww, W.ActualEndDate) = DATEPART(ww, GETDATE()) AND S.[KEY] NOT IN ('COMPLETED', 'CLOSED', 'CANCELLED')   AND TT.[Key] = 'PROJECT_MANAGEMENT'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "How many workplan tasks that are due next week in PMO app?",
                            SQLQuery= "SELECT    Count(W.ID) as TasksDueNextWeek   FROM    Workplan W    JOIN Statuses S ON W.WorkPlanTaskStatusId = S.ID     JOIN ProjectTeams PT ON W.ProjectTeamId = PT.ID   JOIN TeamTypes TT ON PT.TeamTypeId = TT.ID WHERE    YEAR(W.ActualEndDate) = YEAR(GETDATE()) AND DATEPART(ww, W.ActualEndDate) = DATEPART(ww, GETDATE()) + 1   AND S.[KEY] NOT IN ('COMPLETED', 'CLOSED', 'CANCELLED')   AND TT.[Key] = 'PROJECT_MANAGEMENT'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "How many Risks, Issues, Actions and Decisions linked to Workplan Tasks?",
                            SQLQuery= "SELECT COUNT(WR.ID) Count,'Risks' as Category FROM Workplan W   JOIN WorkPlansToRisksAndIssuesForAssociatedRisksAndIssues WR On WR.WorkPlanId = W.ID   LEFT JOIN RisksAndIssues RI ON RI.ID = WR.RisksAndIssueId   LEFT JOIN ProjectTeams PT ON W.ProjectTeamID = PT.ID   LEFT JOIN TeamTypes TT on TT.ID  = PT.TeamTypeId  WHERE RI.IssueRiskCategory = 'Risk'  and TT.[Key] = 'PROJECT_MANAGEMENT'    UNION ALL SELECT COUNT(WR.ID) Count, 'Issues' as Category   FROM Workplan W   JOIN WorkPlansToRisksAndIssuesForAssociatedRisksAndIssues WR On WR.WorkPlanId = W.ID   LEFT JOIN ProjectTeams PT ON W.ProjectTeamID = PT.ID   LEFT JOIN TeamTypes TT on TT.ID  = PT.TeamTypeId  LEFT JOIN RisksAndIssues RI ON RI.ID = WR.RisksAndIssueId  WHERE RI.IssueRiskCategory = 'Issue'  and TT.[Key] = 'PROJECT_MANAGEMENT'    UNION ALL SELECT COUNT(WA.ID) Count, 'Actions' as Category    FROM Workplan W   JOIN WorkPlansToActionsForAssociatedActions WA On WA.WorkPlanId = W.ID    LEFT JOIN ProjectTeams PT ON W.ProjectTeamID = PT.ID   LEFT JOIN TeamTypes TT on TT.ID  = PT.TeamTypeId  where TT.[Key] = 'PROJECT_MANAGEMENT'    UNION ALL SELECT    COUNT(WD.ID) Count,    'Decisions' as Category    FROM    Workplan W      JOIN WorkPlansToDecisionsForAssociatedDecisions WD On WD.WorkPlanId = W.ID  LEFT JOIN ProjectTeams PT ON W.ProjectTeamID = PT.ID   LEFT JOIN TeamTypes TT on TT.ID  = PT.TeamTypeId  where TT.[Key] = 'PROJECT_MANAGEMENT'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "What's prior week and current week status for Finance function?",
                            SQLQuery= "SELECT WSS.Title StatusValue ,'CurrentStatus' as Category FROM ProjectStatusEntries PSE  LEFT JOIN WeeklyStatusStatuses WSS ON WSS.ID=PSE.WeeklyStatusStatusId  LEFT JOIN ProjectTeams PT on PT.ID=PSE.ProjectTeamId  WHERE PSE.ReportingPeriodId=(SELECT TOP 1 RP.ID  FROM ReportingPeriods RP Where cast(RP.PeriodStartDate as date) <= cast(getDate() as date) Order BY RP.PeriodEndDate DESC) AND PT.Title like {ProjectTeam}  UNION SELECT WSS.Title StatusValue ,'PreviousStatus' as Category  FROM ProjectStatusEntries PSE   LEFT JOIN WeeklyStatusStatuses WSS ON WSS.ID=PSE.WeeklyStatusStatusId  LEFT JOIN ProjectTeams PT on PT.ID=PSE.ProjectTeamId  WHERE PSE.ReportingPeriodId=(SELECT  RP.ID FROM   ReportingPeriods RP Where cast(RP.PeriodStartDate as date) <= cast(getDate() as date)  Order BY RP.PeriodEndDate DESC Offset 1 Rows FETCH NEXT 1 ROWS ONLY) AND  PT.Title like {ProjectTeam}",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "List all Open Risks, Issues, Actions and Decisions in PMO app.",
                            SQLQuery= "SELECT RI.UniqueItemIdentifier, RI.Title,    'Risks' as Category , PT.Title ProjectTeam, U.Title ItemOwner FROM    RisksAndIssues RI    LEFT JOIN Statuses S ON RI.ItemStatusId = S.ID   LEFT JOIN ProjectTeams PT ON RI.ProjectTeamId = PT.ID  LEFT JOIN TeamTypes TT ON PT.TeamTypeId = TT.ID  LEFT JOIN UserProfiles U ON RI.ItemOwnerId = U.ID WHERE    S.[KEY] NOT IN ('COMPLETED', 'CLOSED', 'CANCELLED', 'DELETED', 'REJECTED',  'ON_HOLD' )      AND RI.IssueRiskCategory = 'Risk'     AND TT.[Key] = 'PROJECT_MANAGEMENT'   UNION   SELECT     RI.UniqueItemIdentifier,     RI.Title,    'Issues' as Category  , PT.Title ProjectTeam, U.Title ItemOwner FROM    RisksAndIssues RI   LEFT JOIN Statuses S ON RI.ItemStatusId = S.ID  LEFT JOIN ProjectTeams PT ON RI.ProjectTeamId = PT.ID LEFT JOIN TeamTypes TT ON PT.TeamTypeId = TT.ID  LEFT JOIN UserProfiles U ON RI.ItemOwnerId = U.ID WHERE    S.[KEY] NOT IN (   'COMPLETED', 'CLOSED', 'CANCELLED', 'DELETED', 'REJECTED',  'ON_HOLD'   )     AND RI.IssueRiskCategory = 'Issue'     AND TT.[Key] = 'PROJECT_MANAGEMENT'  UNION   SELECT     A.UniqueItemIdentifier,     A.Title,    'Actions' as Category , PT.Title ProjectTeam, U.Title ItemOwner FROM    Actions A    JOIN Statuses S ON A.ItemStatusId = S.ID    JOIN ProjectTeams PT ON A.ProjectTeamId = PT.ID JOIN TeamTypes TT ON PT.TeamTypeId = TT.ID  LEFT JOIN UserProfiles U ON A.ItemOwnerId = U.ID WHERE    S.[KEY] NOT IN (  'COMPLETED', 'CLOSED', 'CANCELLED', 'DELETED', 'REJECTED',  'ON_HOLD' )     AND TT.[Key] = 'PROJECT_MANAGEMENT'  UNION   SELECT     D.UniqueItemIdentifier,     D.Title,    'Decisions' as Category  ,PT.Title ProjectTeam, U.Title ItemOwner FROM    Decisions D    LEFT JOIN Statuses S ON D.ItemStatusId = S.ID      JOIN ProjectTeams PT ON D.ProjectTeamId = PT.ID JOIN TeamTypes TT ON PT.TeamTypeId = TT.ID  LEFT JOIN UserProfiles U ON D.ItemOwnerId = U.ID WHERE    S.[KEY] NOT IN (   'COMPLETED', 'CLOSED', 'CANCELLED', 'DELETED', 'REJECTED',  'ON_HOLD'  )    AND TT.[Key] = 'PROJECT_MANAGEMENT'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "List all Open Interdependencies.",
                            SQLQuery= "SELECT I.UniqueItemIdentifier, I.Title as OpenInterdependencies, S.Title [Status], R.Title ReceiverTeam, P.Title ProviderTeam, UR.Title ReceiverOwner, UP.Title ProviderOwner, I.ItemDueDate FROM Interdependencies I  LEFT JOIN InterdependencyStatuses S on I.InterdependencyStatusId = S.ID LEFT JOIN ProjectTeams R ON I.ReceiverProjectTeamID = R.ID LEFT JOIN ProjectTeams P ON I.ProviderProjectTeamId = P.ID LEFT JOIN UserProfiles UR ON I.ReceiverOwnerId = UR.ID LEFT JOIN UserProfiles UP ON I.ProviderOwnerId = UP.ID  WHERE S.[KEY] NOT IN ('COMPLETED', 'CLOSED', 'CANCELLED', 'DELETED', 'REJECTED',  'ON_HOLD')",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "List all critical workplan tasks in PMO app.",
                            SQLQuery= "SELECT W.UniqueItemIdentifier, W.Title CriticalTasks, PT.Title WorkStream, S.Title [Status] , W.TaskDueDate, W.StartDate, W.IsCritical, UP.Title TaskOwner  FROM WorkPlan W   LEFT JOIN Statuses S on W.WorkPlanTaskStatusId = S.ID   LEFT JOIN ProjectTeams PT on PT.ID = W.WorkstreamId LEFT JOIN TeamTypes TT on TT.ID = PT.TeamTypeId  LEFT JOIN UserProfiles UP ON W.TaskOwnerId = UP.ID WHERE W.IsCritical = 1  AND TT.[Key] = 'PROJECT_MANAGEMENT'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "List all Interdependencies where IT is Interdependency Provider.",
                            SQLQuery= "SELECT I.UniqueItemIdentifier, I.Title as ITIntProvider, S.Title [Status], RT.Title ReceiverTeam, PT.Title ProviderTeam, UR.Title ReceiverOwner, UP.Title ProviderOwner, I.ItemDueDate FROM Interdependencies I  LEFT JOIN InterdependencyStatuses S on I.InterdependencyStatusId = S.ID LEFT JOIN ProjectTeams RT ON I.ReceiverProjectTeamID = RT.ID LEFT JOIN ProjectTeams PT ON I.ProviderProjectTeamId = PT.ID LEFT JOIN UserProfiles UR ON I.ReceiverOwnerId = UR.ID LEFT JOIN UserProfiles UP ON I.ProviderOwnerId = UP.ID  WHERE PT.Title = {ProjectTeam}",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "List all Interdependencies where IT is Interdependency Receiver.",
                            SQLQuery= "SELECT I.UniqueItemIdentifier, I.Title as as ITIntReceiver, S.Title [Status], RT.Title ReceiverTeam, PT.Title ProviderTeam, UR.Title ReceiverOwner, UP.Title ProviderOwner, I.ItemDueDate FROM Interdependencies I  LEFT JOIN InterdependencyStatuses S on I.InterdependencyStatusId = S.ID LEFT JOIN ProjectTeams RT ON I.ReceiverProjectTeamID = RT.ID LEFT JOIN ProjectTeams PT ON I.ProviderProjectTeamId = PT.ID LEFT JOIN UserProfiles UR ON I.ReceiverOwnerId = UR.ID LEFT JOIN UserProfiles UP ON I.ProviderOwnerId = UP.ID  WHERE RT.Title = {ProjectTeam}",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "How many critical milestones in workplan in PMO app?",
                            SQLQuery= "SELECT    COUNT(W.ID) as CountofCriticalPath   FROM    Workplan W      JOIN ProjectTeams PT On W.WorkstreamId = PT.ID  JOIN TeamTypes TT ON PT.TeamTypeId = TT.ID WHERE    W.IsCritical = 1   AND TT.[Key] = 'PROJECT_MANAGEMENT'   and W.WorkPlanTaskType = 'Milestone'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "How many tasks are due in next 30 days in PMO app?",
                            SQLQuery= "SELECT    COUNT(W.ID) AS TasksDueIn30Days  FROM    Workplan W    LEFT JOIN Statuses S ON W.WorkPlanTaskStatusId = S.ID        JOIN ProjectTeams PT On W.WorkstreamId = PT.ID  JOIN TeamTypes TT ON PT.TeamTypeId = TT.ID WHERE    CAST(W.TaskDueDate AS DATE) <= CAST(GETDATE() + 30 AS DATE)    AND CAST(W.TaskDueDate AS DATE) >= CAST(GETDATE() AS DATE)    AND S.[KEY] NOT IN ('COMPLETED', 'CLOSED', 'CANCELLED')   AND TT.[Key] = 'PROJECT_MANAGEMENT'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "List any workplan items that do not have an owner assigned in PMO app.",
                            SQLQuery= "SELECT W.UniqueItemIdentifier, W.Title TasksWithoutOwner, PT.Title WorkStream, S.Title [Status] , W.TaskDueDate, W.StartDate, W.IsCritical FROM WorkPlan W   LEFT JOIN Statuses S on W.WorkPlanTaskStatusId = S.ID   LEFT JOIN ProjectTeams PT on PT.ID = W.WorkstreamId LEFT JOIN TeamTypes TT on TT.ID = PT.TeamTypeId  WHERE W.TaskOwnerId IS NULL AND TT.[Key] = 'PROJECT_MANAGEMENT'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "List any RAID log items that do not have an owner assigned in PMO app.",
                            SQLQuery= "SELECT  RI.UniqueItemIdentifier,RI.Title ItemsWithoutOwner, IssueRiskCategory AS Category , PT.Title ProjectTeam, ItemPriority FROM  RisksAndIssues RI  LEFT JOIN ProjectTeams PT ON RI.ProjectTeamId = PT.ID LEFT JOIN TeamTypes TT ON PT.TeamTypeId = TT.ID  WHERE  RI.ItemOwnerId IS NULL AND TT.[Key] = 'PROJECT_MANAGEMENT'   UNION    SELECT  A.UniqueItemIdentifier,A.Title  ItemsWithoutOwner, 'Actions' AS Category , PT.Title ProjectTeam, ItemPriority FROM  Actions A LEFT JOIN ProjectTeams PT ON A.ProjectTeamId = PT.ID LEFT JOIN TeamTypes TT ON PT.TeamTypeId = TT.ID WHERE  A.ItemOwnerId IS NULL AND TT.[Key] = 'PROJECT_MANAGEMENT'    UNION    SELECT  D.UniqueItemIdentifier,D.Title  ItemsWithoutOwner, 'Decisions' AS Category , PT.Title ProjectTeam, ItemPriority FROM  Decisions D LEFT JOIN ProjectTeams PT ON D.ProjectTeamId = PT.ID LEFT JOIN TeamTypes TT ON PT.TeamTypeId = TT.ID WHERE  D.ItemOwnerId IS NULL AND TT.[Key] = 'PROJECT_MANAGEMENT'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "List interdependencies that do not have a provider or receiver task linked.",
                            SQLQuery= "SELECT I.UniqueItemIdentifier, I.Title AS InterdependencyWithoutTasks , P.Title ProviderTeam, R.Title ReceiverTeam FROM Interdependencies I  LEFT JOIN WorkPlansToInterdependenciesForProviderTasks WTP ON WTP.InterdependencyId = I.ID LEFT JOIN ProjectTeams P ON I.ProviderProjectTeamID = P.ID LEFT JOIN ProjectTeams R ON I.ReceiverProjectTeamId = R.ID WHERE WTP.ID IS NULL    UNION    SELECT I.UniqueItemIdentifier, I.Title AS InterdependencyWithoutTasks , P.Title ProviderTeam, R.Title ReceiverTeam FROM Interdependencies I  LEFT JOIN WorkPlansToInterdependenciesForReceiverTasks WTR ON WTR.InterdependencyId = I.ID  LEFT JOIN ProjectTeams P ON I.ProviderProjectTeamID = P.ID LEFT JOIN ProjectTeams R ON I.ReceiverProjectTeamId = R.ID WHERE WTR.ID IS NULL;",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "Show me a list of all users that have behind schedule or at risk items assigned to them in PMO app.",
                            SQLQuery = "SELECT DISTINCT UP.Title AS UserName, UP.Email   FROM WorkPlan W  JOIN UserProfiles UP ON UP.ID = W.TaskOwnerId  JOIN Statuses S ON S.ID = W.WorkPlanTaskStatusId  JOIN ProjectTeams PT ON W.ProjectTeamId = PT.ID JOIN TeamTypes TT ON PT.TeamTypeId = TT.ID  WHERE S.[Key] IN ('AT_RISK', 'BEHIND_SCHEDULE')      AND UP.Title IS NOT NULL AND TT.[Key] =  'PROJECT_MANAGEMENT'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "Show me all Risks and issues that are flagged as Critical and not complete.",
                            SQLQuery= "SELECT RI.Title RisksAndIssues, IssueRiskCategory , PT.Title ProjectTeam, IsCritical, ItemPriority, ItemDescription, RiskMitigation, RiskImpact   FROM RisksAndIssues RI  LEFT JOIN Statuses S ON S.ID = RI.ItemStatusId   LEFT JOIN ProjectTeams PT ON RI.ProjectTeamID = PT.ID  LEFT JOIN TeamTypes TT on TT.ID  = PT.TeamTypeId  WHERE IsCritical IN (1) AND S.[Key] NOT IN ('CLOSED') AND TT.[Key]='PROJECT_MANAGEMENT'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "Which functions has made the least # of updates to their workplan in last week in PMO app?",
                            SQLQuery= "SELECT ProjectTeam FROM(   SELECT      PT.Title AS Projectteam,     COUNT(PT.ID) AS TeamUpdateCount,  DENSE_RANK() OVER (ORDER BY COUNT(PT.ID)) ROW_NUM FROM      WorkPlan W JOIN ProjectTeams PT ON PT.ID = W.ProjectTeamId JOIN TeamTypes TT ON PT.TeamTypeId = TT.ID  WHERE      YEAR(W.Modified) = YEAR(GETDATE()) AND DATEPART(ww, W.Modified) = DATEPART(ww, GETDATE()) - 1   AND PT.ItemIsActive=1 AND TT.[Key] =  'PROJECT_MANAGEMENT' GROUP BY PT.Title) A",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "Can you please list down all milestones due in next 15 days which are on critical path and have no owners assigned to them in PMO app??",
                            SQLQuery= "SELECT      W.Title AS [List of Critical Milestones due in next 15 days with no owners Assigned yet],      PT.Title ProjectTeam,      W.TaskDueDate DueDate,      W.StartDate StartDate,      UP.Title AS TaskOwner,      W.IsCritical IsCritical FROM      WorkPlan W JOIN      ProjectTeams PT ON PT.ID = W.ProjectTeamId JOIN      TeamTypes TT ON PT.TeamTypeId = TT.ID LEFT JOIN      UserProfiles UP ON W.TaskOwnerId = UP.ID WHERE      W.WorkPlanTaskType = 'Milestone'     AND CAST(W.TaskDueDate AS DATE) BETWEEN CAST(GETDATE() AS DATE) AND DATEADD(day, 15, CAST(GETDATE() AS DATE))     AND W.IsCritical = 1     AND W.TaskOwnerId IS NULL     AND TT.[Key] = 'PROJECT_MANAGEMENT'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "Can you please list down all tasks associated with interdependencies?",
                            SQLQuery= "SELECT W.Title as [List down all tasks associated with interdependencies] , W.StartDate, W.TaskDueDate, PT.Title ProjectTeam, S.Title TaskStatus, W.IsCritical from Workplan W  LEFT JOIN ProjectTeams PT ON W.ProjectTeamID = PT.ID LEFT JOIN Statuses S ON W.WorkPlanTaskStatusId = S.ID where W.ID in  ( SELECT WTIR.WorkPlanId  FROM WorkPlansToInterdependenciesForReceiverTasks WTIR  UNION  select WTIP.WorkPlanId  FROM WorkPlansToInterdependenciesForProviderTasks WTIP) AND W.WorkPlanTaskType='Task'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "Can you please list down all tasks whose due date is less than the due date of the associated interdependency?",
                            SQLQuery= "SELECT W.Title as WorkplanAssociatedWithInterdependencies , W.StartDate, W.TaskDueDate, PT.Title ProjectTeam, S.Title TaskStatus, W.IsCritical from Workplan W  INNER JOIN WorkPlansToInterdependenciesForReceiverTasks WPRT ON W.id = WPRT.WorkPlanId  LEFT JOIN ProjectTeams PT ON W.ProjectTeamID = PT.ID LEFT JOIN Statuses S ON W.WorkPlanTaskStatusId = S.ID LEFT JOIN Interdependencies IR ON WPRT.InterdependencyId = IR.ID  WHERE CAST(W.TaskDueDate AS DATE) < CAST(IR.ItemDueDate AS DATE) AND W.WorkPlanTaskType='Task'   UNION   SELECT W.Title  , W.StartDate, W.TaskDueDate, PT.Title ProjectTeam, S.Title TaskStatus, W.IsCritical FROM WorkPlan W  INNER JOIN WorkPlansToInterdependenciesForProviderTasks WPPT ON W.id = WPPT.WorkPlanId  LEFT JOIN ProjectTeams PT ON W.ProjectTeamID = PT.ID LEFT JOIN Statuses S ON W.WorkPlanTaskStatusId = S.ID LEFT JOIN Interdependencies IR ON WPPT.InterdependencyId = IR.ID  WHERE CAST(W.TaskDueDate AS DATE) < CAST(IR.ItemDueDate AS DATE) AND W.WorkPlanTaskType='Task'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List out workplan items due this week in PMO app.",
                            SQLQuery="SELECT  W.UniqueItemIdentifier,     W.Title WorkPlanItem, W.TaskDueDate, W.ActualStartDate, W.WorkPlanTaskType, W.TaskDescription, W.[Priority], W.IsCritical, UP.Title TaskOwner, PT.Title AS ProjectTeam, S.Title AS [Status]  FROM  Workplan W  LEFT JOIN  ProjectTeams PT ON W.ProjectTeamId = PT.ID  LEFT JOIN  TeamTypes TT ON PT.TeamTypeId = TT.ID  JOIN      Statuses S ON W.WorkPlanTaskStatusId = S.ID LEFT JOIN  UserProfiles UP ON W.TaskOwnerId = UP.ID   WHERE  TT.[Key] = 'PROJECT_MANAGEMENT'  AND DATEPART(ww,W.TaskDueDate) = DATEPART(ww,GETDATE()) AND YEAR(W.TaskDueDate) = YEAR(GETDATE()) AND S.[KEY] NOT IN ('COMPLETED', 'CANCELLED')",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="Provide details for workplan ID HR.2.2.6.",
                            SQLQuery="SELECT  W.Title,  W.WorkPlanTaskType,  W.StartDate,  W.TaskDueDate,  W.UniqueItemIdentifier, W.ActualStartDate, W.TaskDescription, W.[Priority], W.IsCritical, PT.Title ProjectTeam,  S.Title [Status],  UP.Title TaskOwner , TT.Title AS TeamType FROM  Workplan W  LEFT JOIN  Statuses S ON W.WorkPlanTaskStatusId = S.ID  LEFT JOIN  ProjectTeams PT ON W.ProjectTeamId = PT.ID  LEFT JOIN  UserProfiles UP ON W.TaskOwnerId = UP.ID  LEFT JOIN  TeamTypes TT ON PT.TeamTypeId = TT.ID  WHERE  W.UniqueItemIdentifier = 'HR.2.2.6'",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="How many issues are in pending status in PMO app?",
                            SQLQuery="SELECT Count(RI.ID) IssueCoutnwithPendingStatus FROM RisksandIssues RI LEFT JOIN ProjectTeams PT ON RI.ProjectTeamId = PT.ID JOIN RiskAndIssueStatuses RS ON RI.ItemStatusID = RS.ID LEFT JOIN TeamTypes TT ON PT.TeamTypeId = TT.ID WHERE IssueRiskCategory = 'Issue' AND TT.[Key] = 'PROJECT_MANAGEMENT' AND RS.Title = 'Pending'",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="List RAID items that do not have an owner assigned.",
                            SQLQuery="SELECT  RI.UniqueItemIdentifier, RI.Title, RI.IssueRiskCategory, PT.Title ProjectTeam, RI.ItemDueDate ,S.Title ItemStatus   FROM RisksAndIssues RI  LEFT JOIN ProjectTeams PT ON RI.ProjectTeamID = PT.ID   LEFT JOIN TeamTypes TT on TT.ID  = PT.TeamTypeId  LEFT JOIN Statuses S ON RI.ItemStatusId  = S.ID WHERE   RI.ItemOwnerId IS NULL     UNION ALL    SELECT   D.UniqueItemIdentifier, D.Title  ,'Decision'  , PT.Title ProjectTeam, D.ItemDueDate ,S.Title ItemStatus   FROM Decisions D LEFT JOIN ProjectTeams PT ON D.ProjectTeamID = PT.ID  LEFT JOIN TeamTypes TT on TT.ID  = PT.TeamTypeId  LEFT JOIN Statuses S ON D.ItemStatusId  = S.ID WHERE   D.ItemOwnerId IS NULL     UNION ALL     SELECT A.UniqueItemIdentifier, A.Title ,'Action',  PT.Title ProjectTeam, A.ItemDueDate ,S.Title ItemStatus   FROM Actions A LEFT JOIN ProjectTeams PT ON A.ProjectTeamID = PT.ID  LEFT JOIN TeamTypes TT on TT.ID  = PT.TeamTypeId LEFT JOIN Statuses S ON A.ItemStatusId  = S.ID WHERE  A.ItemOwnerId IS NULL",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="List all Workplan tasks that are 'Not Started' and planned start date has passed in PMO app.",
                            SQLQuery="SELECT    W.UniqueItemIdentifier,    W.TITLE as WorkplansWithDueDatePassed  , W.TaskDueDate, W.StartDate, PT.Title ProjectTeam, W.IsCritical, S.Title TaskStatus FROM    Workplan W     LEFT JOIN Statuses S On S.ID = W.WorkPlanTaskStatusId    LEFT JOIN ProjectTeams PT on PT.ID = W.ProjectTeamId    LEFT JOIN TeamTypes TT on TT.ID = PT.TeamTypeId  WHERE S.[KEY] NOT IN ( 'COMPLETED' , 'CANCELLED')    AND CAST(W.TaskDueDate as DATE)< CAST(GETDATE() AS DATE)     AND TT.[Key] = 'PROJECT_MANAGEMENT'",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="List all Workplan tasks which are past due in PMO app.",
                            SQLQuery="SELECT    W.UniqueItemIdentifier,    W.TITLE as WorkplansWithDueDatePassed  , W.TaskDueDate, W.StartDate, PT.Title ProjectTeam, W.IsCritical, S.Title TaskStatus FROM    Workplan W    LEFT JOIN Statuses S On S.ID = W.WorkPlanTaskStatusId    LEFT JOIN ProjectTeams PT on PT.ID = W.ProjectTeamId   LEFT JOIN TeamTypes TT on TT.ID = PT.TeamTypeId WHERE    S.[KEY] NOT IN ( 'COMPLETED' , 'CANCELLED')   AND CAST(W.TaskDueDate as DATE)< CAST(GETDATE() AS DATE)    AND TT.[Key] = 'PROJECT_MANAGEMENT'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List all project teams with workplan items that are 'At Risk' in PMO app.",
                            SQLQuery="SELECT DISTINCT PT.Title as ProjectTeams_With_Items_At_Risk, U.Title TeamOwner FROM ProjectTeams PT     JOIN Workplan W ON W.ProjectTeamID = PT.ID     JOIN Statuses S ON S.ID = W.WorkplanTaskStatusID     JOIN TeamTypes TT ON PT.TeamTypeId = TT.ID  LEFT JOIN UserProfiles U ON PT.ItemOwnerId = U.ID WHERE S.[Key] = 'AT_RISK'   AND TT.[Key] = 'PROJECT_MANAGEMENT'",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="Which teams have not entered their weekly status report for this reporting period?",
                            SQLQuery="SELECT PT.Title FROM ProjectTeams PT LEFT JOIN TeamTypes TT on TT.ID = PT.TeamTypeId WHERE ManageProjectStatus = 1 AND  TT.[Key] = 'PROJECT_MANAGEMENT'  EXCEPT   SELECT PT.Title  FROM ProjectStatusEntries PSE  LEFT JOIN ReportingPeriods RP ON PSE.ReportingPeriodId = RP.ID  LEFT JOIN ProjectTeams PT ON PSE.ProjectTeamId = PT.ID  WHERE RP.ID = (SELECT RPID.ID FROM ReportingPeriods RPID WHERE CAST(GETDATE() AS DATE) BETWEEN CAST(RPID.PeriodStartDate AS DATE) AND CAST(RPID.PeriodEndDate AS DATE)      )   AND PSE.WeeklyStatusStatusId IS NOT NULL",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="How many new risks have been created in the last 5 days in PMO app?",
                            SQLQuery="SELECT COUNT(R.ID) AS NewRisksCount FROM  RisksAndIssues R JOIN ProjectTeams PT ON R.ProjectTeamId = PT.ID JOIN TeamTypes TT ON PT.TeamTypeId = TT.ID WHERE R.IssueRiskCategory = 'Risk' AND DATEDIFF(day, R.Created, GETDATE()) <= 5 AND TT.[Key] = 'PROJECT_MANAGEMENT'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="Which tasks have a predecessor or successor linked to them?",
                            SQLQuery="SELECT W.Title Workplan , W.TaskDueDate, W.StartDate, S.Title TaskStatus, PT.Title ProjectTeam , U.Title TaskOwner FROM Workplan W  JOIN ( SELECT   DISTINCT W.Title, WorkPlanLinksTargetId AS TaskID         FROM WorkPlanLinks WL           LEFT JOIN WorkPlan W ON W.ID = WL.WorkPlanLinksTargetId    LEFT JOIN ProjectTeams PT ON W.ProjectTeamID = PT.ID     LEFT JOIN TeamTypes TT on TT.ID  = PT.TeamTypeId where TT.[Key]='PROJECT_MANAGEMENT'        UNION            SELECT    DISTINCT W.Title, WorkPlanLinksSourceId AS TaskID        FROM WorkPlanLinks WL            LEFT JOIN WorkPlan W ON W.ID = WL.WorkPlanLinksSourceId    LEFT JOIN ProjectTeams PT ON W.ProjectTeamID = PT.ID     LEFT JOIN TeamTypes TT on TT.ID  = PT.TeamTypeId where TT.[Key]='PROJECT_MANAGEMENT' )  SUB  ON W.ID = TaskID LEFT JOIN Statuses S ON W.WorkPlanTaskStatusId = S.ID LEFT JOIN ProjectTeams PT ON W.ProjectTeamId = PT.ID LEFT JOIN UserProfiles U ON W.TaskOwnerId = U.ID ORDER BY TaskID",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="Which function has the highest number of risk associated with in PMO app?",
                            SQLQuery="SELECT ProjectTeam FROM(   SELECT      PT.Title AS Projectteam,     COUNT(PT.ID) AS TeamUpdateCount, DENSE_RANK() OVER (ORDER BY COUNT(PT.ID) DESC) ROW_NUM FROM      RisksAndIssues RI JOIN ProjectTeams PT ON PT.ID = RI.ProjectTeamId JOIN TeamTypes TT ON PT.TeamTypeId = TT.ID WHERE PT.ItemIsActive=1 and RI.IssueRiskCategory = 'Risk' AND TT.[Key] =  'PROJECT_MANAGEMENT' GROUP BY      pt.title) A",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="Can you please list down all milestones due in next 7 days which are on critical path and have no update made to them in last 2 weeks in PMO app?",
                            SQLQuery="SELECT W.Title AS [List of Milestones due in next 7 days and Not Updated Since Last 2 weeks] , W.TaskDueDate, W.StartDate, S.Title TaskStatus, PT.Title ProjectTeam , U.Title TaskOwner FROM      WorkPlan W  JOIN Statuses S on s.ID = W.WorkPlanTaskStatusId  JOIN ProjectTeams PT  ON PT.ID = W.ProjectTeamId  JOIN TeamTypes TT ON PT.TeamTypeId = TT.ID  JOIN Userprofiles U ON W.TaskOwnerId = U.ID WHERE      W.WorkPlanTaskType IN ('Milestone')     AND W.IsCritical IN (1)      AND CAST(W.Modified AS DATE) < DATEADD(day, -14, CAST(GETDATE() AS DATE))  AND S.[Key] not in ('COMPLETED', 'CANCELLED') AND TT.[Key] =  'PROJECT_MANAGEMENT'",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="Are there any risks items that doesn't have risk mitigation plan?",
                            SQLQuery="SELECT RI.TITLE AS [Risk items that does not have Risk Mitigation plan], RI.ItemDescription, RI.ItemDueDate, RI.RiskImpact, RI.RiskMitigation, RI.RiskProbability, PT.Title ProjectTeam, UP.Title ItemOwner  FROM RisksAndIssues RI  LEFT JOIN ProjectTeams PT ON RI.ProjectTeamID = PT.ID   LEFT JOIN TeamTypes TT on TT.ID  = PT.TeamTypeId  LEFT JOIN UserProfiles UP ON RI.ItemOwnerId = UP.ID WHERE RI.IssueRiskCategory = 'Risk' AND RI.RiskMitigation IS NULL AND TT.[Key]='PROJECT_MANAGEMENT'",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="How many Analytics reports are available for PMO App?",
                            SQLQuery="SELECT COUNT(R.ID) [Reports available in PMO] FROM Reports R JOIN MenuOptions M ON R.ParentMenuItemId = M.ID WHERE M.[Key] = 'PROJECT_ANALYTICS' AND R.ReportIsActive = 1",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="What week has the most workplan items due across the project?",
                            SQLQuery="SELECT  A.*,  B.StartOfWeek,  B.EndOfWeek  FROM ( SELECT TOP 1 COUNT(*) AS NumberOfItemsDue,         DATEPART(week, TaskDueDate) AS WeekNumber  FROM WorkPlan  W LEFT JOIN ProjectTeams PT ON W.ProjectTeamID = PT.ID  LEFT JOIN TeamTypes TT on TT.ID  = PT.TeamTypeId LEFT JOIN Statuses S ON S.ID = W.WorkPlanTaskStatusId     WHERE TaskDueDate IS NOT NULL AND S.[key] <> 'COMPLETE'  AND TT.[Key]='PROJECT_MANAGEMENT' GROUP BY DATEPART(week, TaskDueDate)     ORDER BY COUNT(*) DESC ) AS A   INNER JOIN (    SELECT DATEADD(week, DATEDIFF(week, 0, TaskDueDate), 0) AS StartOfWeek,         DATEADD(week, DATEDIFF(week, 0, TaskDueDate) + 1, 0) - 1 AS EndOfWeek,         DATEPART(week, TaskDueDate) AS WeekNumber     FROM WorkPlan W    LEFT JOIN ProjectTeams PT ON W.ProjectTeamID = PT.ID  LEFT JOIN TeamTypes TT on TT.ID  = PT.TeamTypeId  LEFT JOIN Statuses S ON S.ID = W.WorkPlanTaskStatusId      WHERE TaskDueDate IS NOT NULL AND S.[key] <> 'COMPLETE'    AND TT.[Key]='PROJECT_MANAGEMENT'   GROUP BY DATEPART(week, TaskDueDate), DATEADD(week, DATEDIFF(week, 0, TaskDueDate), 0),       DATEADD(week, DATEDIFF(week, 0, TaskDueDate) + 1, 0) ) AS B ON B.WeekNumber = A.WeekNumber",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "What are the key action items scheduled for next week?",
                            SQLQuery= "SELECT AN.Title, AN.AccomplishmentNextStepCategory FROM  ProjectStatusEntries  PSE   LEFT OUTER JOIN AccomplishmentsAndNextSteps AN ON PSE.ID = AN.ProjectStatusEntryId      LEFT JOIN ProjectTeams PT ON PT.ID = PSE.ProjectTeamId      LEFT OUTER JOIN ReportingPeriods RP ON PSE.ReportingPeriodId = RP.ID  where AN.Title IS NOT NULL AND RP.PeriodStartDate = (    SELECT TOP 1 RP.PeriodStartDate    FROM ReportingPeriods RP   WHERE CAST (GETDATE() AS DATE) BETWEEN CAST(RP.PeriodStartDate AS DATE) AND CAST(RP.PeriodEndDate AS DATE)  )",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "Which function has the most overdue items?",
                            SQLQuery= ";WITH CTE AS (SELECT COUNT(*) AS OverdueItemCount,      PT.Title AS [ProjectTeam With Most Overdue Item]  FROM WorkPlan W  LEFT JOIN [ProjectTeams] PT ON PT.ID = W.ProjectteamId   LEFT JOIN TeamTypes TT on TT.ID  = PT.TeamTypeId LEFT JOIN Statuses S ON S.ID = W.WorkPlanTaskStatusId  WHERE  S.[Key] <> '{Key}'    AND TT.[Key]='PROJECT_MANAGEMENT'    AND CAST(W.TaskDueDate AS DATE ) < CAST(GETDATE() AS DATE) AND PT.Title IS NOT NULL GROUP BY PT.Title )  SELECT Top 1 [ProjectTeam With Most Overdue Item] FROM CTE ORDER BY OverdueItemCount DESC",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "How many risks were assigned to User?",
                            SQLQuery= "SELECT COUNT(*) AS RisksAssignedTo, UP.Title FROM RisksAndIssues RAI LEFT JOIN UserProfiles UP ON RAI.ItemOwnerId = UP.ID WHERE UP. Title = ( SELECT TOP 1 Title   FROM UserProfiles WHERE FREETEXT(Title, '{Username}'))",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "How  many initiatives are assigned to User?",
                            SQLQuery= "SELECT VI.Title, UP.Title from ValueCaptureInitiatives VI LEFT JOIN UserProfiles UP on UP.ID = VI.ItemOwnerId WHERE UP. Title = ( SELECT TOP 1 Title  FROM UserProfiles WHERE FREETEXT(Title, '{Username}'))",
                            VisibleToAssistant=false, IsIncluded = false},

                        new SuggestionData { SuggestionText = "What are the accomplishment and next steps of Finance team last week?",
                            SQLQuery= "SELECT AN.Title, AN.AccomplishmentNextstepCategory FROM ProjectStatusEntries PSE  JOIN ProjectTeams PT ON PSE.ProjectTeamID = PT.ID  JOIN AccomplishmentsAndNextSteps AN ON PSE.ID = AN.ProjectStatusEntryId  JOIN ReportingPeriods RP ON PSE.ReportingPeriodID = RP.ID WHERE PT.Title = 'Finance' AND RP.ID = (SELECT RPID.ID -1 FROM ReportingPeriods RPID WHERE GETDATE() BETWEEN RPID.PeriodStartDate AND RPID.PeriodEndDate) ORDER BY AN.AccomplishmentNextstepCategory",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "What is the executive summary for Finance from the last reporting period?",
                            SQLQuery= "select PSE.ExecutiveSummary from ProjectStatusEntries PSE JOIN ProjectTeams PT ON PSE.ProjectTeamID = PT.ID  JOIN ReportingPeriods RP ON PSE.ReportingPeriodID = RP.ID WHERE PT.Title = 'Finance' AND RP.ID = (SELECT RPID.ID -1 FROM ReportingPeriods RPID WHERE GETDATE() BETWEEN RPID.PeriodStartDate AND RPID.PeriodEndDate)",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "What is the executive summary for Finance from the current reporting period?",
                            SQLQuery= "select PSE.ExecutiveSummary from ProjectStatusEntries PSE JOIN ProjectTeams PT ON PSE.ProjectTeamID = PT.ID  JOIN ReportingPeriods RP ON PSE.ReportingPeriodID = RP.ID WHERE PT.Title = 'Finance' AND RP.ID = (SELECT RPID.ID  FROM ReportingPeriods RPID WHERE GETDATE() BETWEEN RPID.PeriodStartDate AND RPID.PeriodEndDate)",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "What is the executive summary of Finance team this week?",
                            SQLQuery= "select PSE.ExecutiveSummary from ProjectStatusEntries PSE JOIN ProjectTeams PT ON PSE.ProjectTeamID = PT.ID  JOIN ReportingPeriods RP ON PSE.ReportingPeriodID = RP.ID  WHERE PT.Title = 'Finance' AND RP.ID = (SELECT RPID.ID  FROM ReportingPeriods RPID WHERE CAST(GETDATE() as DATE) BETWEEN CAST(RPID.PeriodStartDate as DATE) AND CAST (RPID.PeriodEndDate as DATE))",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "How many users have access to the PMO app?",
                            SQLQuery= "select COUNT(UP.ID) from UserProfiles UP LEFT JOIN AccountStatuses ACCS on ACCS.ID = UP.AccountStatusId where ACCS.[Key] = 'PROJECT_ENABLED'",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "How many users have access to this project?",
                            SQLQuery= "select COUNT(UP.ID) from UserProfiles UP LEFT JOIN AccountStatuses ACCS on ACCS.ID = UP.AccountStatusId where ACCS.[Key] = 'PROJECT_ENABLED'",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "What are the Finance workplan items that have linkages to a risk?",
                            SQLQuery= "SELECT WP.Title AS [WorkPlan Title],  WP.TaskDescription AS [Task Description],      WP.TaskDueDate AS [Task Due Date],  RAI.Title AS [Risk Title],     RAI.ItemDescription AS [Risk Description],      RAI.ItemDueDate AS [Risk Due Date],     TT.Title AS [Team Type],     PT.Title AS [Project Team] FROM      WorkPlan WP  JOIN      WorkPlansToRisksAndIssuesForAssociatedRisksAndIssues WPTRAIFARAI ON WP.ID = WPTRAIFARAI.WorkPlanId  JOIN      RisksAndIssues RAI ON RAI.ID = WPTRAIFARAI.RisksAndIssueId  JOIN      ProjectTeams PT ON WP.ProjectTeamId = PT.ID  JOIN      TeamTypes TT ON PT.TeamTypeId = TT.ID WHERE      TT.ID = 1       AND PT.Title = 'Finance'",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "Can I have a breakdown of IT tasks by status?",
                            SQLQuery= "SELECT    WP.UniqueItemIdentifier,  WP.Title AS TaskTitle,     S18.Title AS TaskStatus,     PT6.Title AS ProjectTeam,     WP.TaskDueDate,      WP.StartDate,     WP.IsCritical,     UP13.Title AS TaskOwner FROM      WorkPlan WP  LEFT JOIN      ProjectTeams PT6 ON WP.ProjectTeamId = PT6.ID  LEFT JOIN      Statuses S18 ON WP.WorkPlanTaskStatusId = S18.ID  LEFT JOIN      TeamTypes TT ON PT6.TeamTypeId = TT.ID  LEFT JOIN      UserProfiles UP13 ON WP.TaskOwnerId = UP13.ID  WHERE      PT6.Title = 'IT'     AND TT.ID = 1     AND WP.WorkPlanTaskType = 'Task'  GROUP BY    WP.UniqueItemIdentifier,  WP.Title, S18.Title, PT6.Title, WP.TaskDueDate, WP.StartDate, WP.IsCritical, UP13.Title",
                            VisibleToAssistant=false, IsIncluded = false}
                    }
                },
                new SuggestionMatrix
                {
                    Source = Constants.Source.ProjectData.Key,
                    AppAfinity = Constants.App.ValueCapture,
                    Suggestions = new List<SuggestionData>
                    {
                        new SuggestionData { SuggestionText = "What are our targets for this engagement?",
                            SQLQuery = "SELECT 'Total Top Down Target' AS KPI,  FORMAT((SUM(VTE.HeadcountCostReductionEst)+SUM(VTE.NonHeadcountCostReductionEst)+SUM(VTE.RevenueGrowthEstimate))/1000000,'N2') AS 'Value (Million)'  FROM ValueCaptureTopDownEstimates VTE"},
                        new SuggestionData { SuggestionText = "How are my initiatives doing?",
                            SQLQuery = "SELECT S.Title, COUNT(VI.ID) AS InitiativeCount FROM ValueCaptureStages S LEFT JOIN ValueCaptureInitiatives VI ON S.ID = VI.ValueCaptureStageId LEFT JOIN UserProfiles UP on UP.ID = VI.ItemOwnerId Where UP.EMail = '{Username}' GROUP BY S.Title "},
                        new SuggestionData { SuggestionText = "Are there any risks or issues with initiatives that I’m responsible for?",
                            SQLQuery = "SELECT RI.Title FROM RisksAndIssuesToValueCaptureInitiativesForValueCaptureInitiativeIDs RIV JOIN ValueCaptureInitiatives VI ON VI.ID = RIV.ValueCaptureInitiativeId JOIN RisksAndIssues RI ON RI.ID = RIV.RisksAndIssueId JOIN UserProfiles U ON U.ID = VI.ItemOwnerId WHERE U.Email = '{Username}' "},
                        new SuggestionData { SuggestionText = "How  many initiatives are assigned to me?",
                            SQLQuery = "select VI.Title from ValueCaptureInitiatives VI LEFT JOIN UserProfiles U on U.ID = VI.ItemOwnerId where U.EMail = '{Username}' "},
                        new SuggestionData { SuggestionText = "Give my cost reduction initiatives.",
                            SQLQuery = "SELECT VI.Title  FROM ValueCaptureInitiatives VI LEFT JOIN ValueCaptureTypes VT ON VT.ID = VI.ValueCaptureTypeId LEFT JOIN UserProfiles U ON U.ID = VI.ItemOwnerId WHERE VT.ID = 1 AND U.EMail = '{Username}' "},
                        new SuggestionData { SuggestionText = "What are the revenue growth targets for Sales & Marketing?",
                            SQLQuery= "SELECT SUM(ISNULL(VT.RevenueGrowthEstimate,0)) [RevenueGrowthTarget] FROM [ValueCaptureTopDownEstimates] VT LEFT JOIN ProjectTeams PT ON PT.ID = VT.ProjectTeamId WHERE PT.Title = {ProjectTeam}",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "What are the cost to achieve targets for R&D?",
                            SQLQuery= "SELECT SUM(ISNULL(VT.CostToAchieveEstimate,0)) [CostToAchieveTarget] FROM [ValueCaptureTopDownEstimates] VT LEFT JOIN ProjectTeams PT ON PT.ID = VT.ProjectTeamId WHERE PT.Title ={ProjectTeam}",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "How many initiatives are there in IT across different stages?",
                            SQLQuery= "SELECT S.Title [Value Capture Stage] , COUNT(VI.ID) [No. of Initiatives] FROM ValueCaptureInitiatives VI LEFT JOIN ProjectTeams PT ON PT.ID = VI.ProjectTeamId LEFT JOIN ValueCaptureStages S ON S.ID = VI.ValueCaptureStageId WHERE PT.Title = {ProjectTeam} GROUP BY S.Title",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "List IT initiatives that are in approved stage.",
                            SQLQuery= "SELECT VI.Title [Approved Initiaves] FROM ValueCaptureInitiatives VI LEFT JOIN ProjectTeams PT ON PT.ID = VI.ProjectTeamId LEFT JOIN ValueCaptureStages S ON S.ID = VI.ValueCaptureStageId WHERE PT.Title = {ProjectTeam} AND S.Title = 'Approved'",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "List initiatives that have workplan item linked to them.",
                            SQLQuery= "SELECT VI.Title [Initiaves with Workplan] FROM ValueCaptureInitiatives VI JOIN WorkPlanToValueCaptureInitiativesForValueCaptureInitiativeIDs WV ON VI.ID = WV.ValueCaptureInitiativeId",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "How many initiatives have Risks linked?",
                            SQLQuery= "SELECT DISTINCT VI.Title [Initiaves with Risk] FROM ValueCaptureInitiatives VI JOIN RisksAndIssuesToValueCaptureInitiativesForValueCaptureInitiativeIDs RV ON VI.ID = RV.ValueCaptureInitiativeId LEFT JOIN RisksAndIssues RI ON RI.ID = RV.RisksAndIssueId WHERE RI.IssueRiskCategory = 'Risk'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "What is the total headcount cost reduction target?",
                            SQLQuery= "SELECT SUM(ISNULL(VT.HeadcountCostReductionEst,0)) [HeadCountCostReductionTarget] FROM ValueCaptureTopDownEstimates VT",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "List initiatives that are not active.",
                            SQLQuery= "SELECT VI.Title [Non Active Initiaves] FROM ValueCaptureInitiatives VI WHERE ISNULL(VI.IsItemActive ,0) = 0",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "How many initiatives have been realized?",
                            SQLQuery= "SELECT COUNT(VCI.ID) AS InitativesCount FROM ValueCaptureInitiatives VCI LEFT JOIN ValueCaptureStages  VCS ON VCI.ValueCaptureStageId = VCS.ID WHERE VCS.Title = {ValueCaptureStage} ",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "What is the Total Top Down Target Value?",
                            SQLQuery= "SELECT SUM(VTE.NonHeadcountCostReductionEst) + SUM(VTE.RevenueGrowthEstimate) + SUM(VTE.HeadcountCostReductionEst) 'Total Top Down Target Value' FROM ValueCaptureTopDownEstimates VTE ",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "Show my top down target values by cost reduction and revenue growth.",
                            SQLQuery= "SELECT SUM(VTE.RevenueGrowthEstimate) RevenueGrowth,SUM(VTE.TotalCostReduction) CostReduction FROM ValueCaptureTopDownEstimates VTE",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "How many active initatives are there in my project?",
                            SQLQuery= "SELECT COUNT(1) FROM ValueCaptureInitiatives VI WHERE VI.IsItemActive = 1",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "What is the total of revenue growth by team?",
                            SQLQuery= "SELECT PT.Title [Project Team] ,CAST(SUM(ISNULL(VT.RevenueGrowthEstimate,0))/1000000 AS FLOAT) [Revenue Growth(in Million)] FROM ValueCaptureTopDownEstimates VT LEFT JOIN ProjectTeams PT ON PT.ID = VT.ProjectTeamId GROUP BY PT.Title",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "List out initiatives with no owners assigned.",
                            SQLQuery= "SELECT VC.Title AS [ValueCaptureInitiatives with no Owners] FROM ValueCaptureInitiatives VC WHERE VC.ItemOwnerId IS NULL",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "List out initiatives that have at risk workplan task linked.",
                            SQLQuery= "SELECT VI.Title [Initiative with Workplan at Risk] FROM WorkPlanToValueCaptureInitiativesForValueCaptureInitiativeIDs WTVI LEFT JOIN Workplan W ON W.ID = WTVI.WorkPlanId LEFT JOIN Statuses S ON S.ID = W.WorkPlanTaskStatusId LEFT JOIN ValueCaptureInitiatives VI on VI.ID = WTVI.ValueCaptureInitiativeId WHERE S.[KEY] = 'AT_RISK'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "Show me initiatives count by priority.",
                            SQLQuery= "SELECT VP.Title AS ValueCapturepriority, COUNT(VC.ValueCapturePriorityId) AS ValueCapturePriorityCount FROM ValueCaptureInitiatives VC LEFT JOIN ValueCapturePriorities VP ON VP.ID = VC.ValueCapturePriorityId where VC.ValueCapturePriorityId is not null GROUP BY VC.ValueCapturePriorityId, VP.Title",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "Show me initiatives count by owner.",
                            SQLQuery= "SELECT UP.Title AS UserProfile, COUNT(VC.ID) AS ValueCaptureOwnerwiseCount FROM ValueCaptureInitiatives VC LEFT JOIN UserProfiles UP ON UP.ID = VC.ItemOwnerId WHERE VC.ItemOwnerId IS NOT NULL GROUP BY VC.ItemOwnerId, UP.Title",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List initiatives where I'm assigned as the Owner.",
                            SQLQuery="SELECT VI.Title [Initiaves] FROM ValueCaptureInitiatives VI JOIN UserProfiles UP ON VI.ItemOwnerId = UP.ID WHERE UP.Title = '{Username}'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="How many initiatives are identified?",
                            SQLQuery="SELECT COUNT(VCI.ID) as IdentifiedInitiatives FROM ValueCaptureInitiatives VCI LEFT JOIN ValueCaptureStages VCS ON VCS.ID = VCI.ValueCaptureStageId WHERE VCS.Title = 'Identified'",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="How many initiatives have been approved?",
                            SQLQuery="SELECT COUNT(VCI.ID) as ApprovedInitiatives FROM ValueCaptureInitiatives VCI LEFT JOIN ValueCaptureStages VCS ON VCS.ID = VCI.ValueCaptureStageId WHERE VCS.Title = 'Approved' ",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="How many initiatives have been validated?",
                            SQLQuery="SELECT COUNT(VCI.ID) as ValidatedInitiatives FROM ValueCaptureInitiatives VCI LEFT JOIN ValueCaptureStages VCS ON VCS.ID = VCI.ValueCaptureStageId WHERE VCS.Title = 'Validated' ",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="Can you provide breakdown of the initiatives across various stages?",
                            SQLQuery="SELECT VCS.Title AS [Value Capture Stage] ,COUNT(VCI.ID) AS InitativesCount FROM ValueCaptureInitiatives VCI LEFT JOIN ValueCaptureStages VCS ON VCI.ValueCaptureStageId = VCS.ID GROUP BY VCS.Title",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="What initatives have I been assigned to?",
                            SQLQuery="SELECT VI.Title AS Initiatives FROM ValueCaptureInitiatives VI JOIN UserProfiles UP ON VI.ItemOwnerId = UP.ID WHERE UP.Email = '{Username}'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List my initatives by stages.",
                            SQLQuery="SELECT VI.Title AS Initiatives, VS.Title ValueCaptureStage FROM ValueCaptureInitiatives VI JOIN ValueCaptureStages VS ON VI.ValueCaptureStageID = VS.ID JOIN UserProfiles UP ON VI.ItemOwnerId = UP.ID WHERE UP.Email = '{Username}' ORDER BY ValueCaptureStage",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List my initatives by Value Capture Type.",
                            SQLQuery="SELECT VI.Title AS Initiatives, VT.Title ValueCaptureType FROM ValueCaptureInitiatives VI JOIN ValueCaptureTypes VT ON VI.ValueCaptureStageID = VT.ID JOIN UserProfiles UP ON VI.ItemOwnerId = UP.ID WHERE UP.Email = '{Username}' ORDER BY ValueCaptureType",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="What is the top-down target for this project?",
                            SQLQuery="SELECT PT.Title,SUM(ISNULL(VTE.NonHeadcountCostReductionEst,0)) + SUM(ISNULL(VTE.RevenueGrowthEstimate,0)) + SUM(ISNULL(VTE.HeadcountCostReductionEst,0)) AS TotalTopDownTarget  FROM ValueCaptureTopDownEstimates VTE LEFT JOIN ProjectTeams PT ON PT.ID = VTE.Projectteamid GROUP BY PT.Title",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="Show me initiatives count by stage.",
                            SQLQuery="SELECT VCS.Title AS ValueCaptureStage, COUNT(VC.ID) AS ValueCaptureStageCount FROM ValueCaptureInitiatives VC LEFT JOIN ValueCaptureStages VCS ON VCS.ID = VC.ValueCaptureStageId GROUP BY VC.ValueCaptureStageId, VCS.Title",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="Show me initiatives count by function.",
                            SQLQuery="SELECT F.Title as Functions, COUNT(VC.FunctionId) AS ValueCaptureFunction FROM ValueCaptureInitiatives VC LEFT JOIN Functions F ON F.ID = VC.FunctionId WHERE VC.FunctionId IS NOT NULL GROUP BY VC.FunctionId, F.Title ",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="List all Cost/Revenue Centers linked to PnL Line Items.",
                            SQLQuery="SELECT DISTINCT     CC.Title AS [Cost/Revenue Centers linked to PnL Line Items], CC.Account FROM CostCenters CC     LEFT JOIN ValueCaptureFinancialLineItems Fin         ON CC.FinancialLineItemId = Fin.ID     LEFT JOIN ValueCaptureFinancialLineItemTypes FinType         ON Fin.FinancialLineItemTypeId = FinType.ID WHERE FinType.Title = 'PnL'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="Can you provide Top Down Targets KPIs?",
                            SQLQuery="SELECT COUNT(1) AS [Top Down targets #],         SUM(ISNULL(VTE.NonHeadcountCostReductionEst, 0)) AS [Total Non Headcount Cost Reduction Estimate],         SUM(ISNULL(VTE.RevenueGrowthEstimate, 0)) AS [Total Revenue Growth Estimate],         SUM(ISNULL(VTE.CostToAchieveEstimate, 0)) AS [Total Cost To Achieve Estimate],        SUM(ISNULL(VTE.HeadcountCostReductionEst, 0)) AS [Total Headcount Cost Reduction Estimate],         SUM(ISNULL(VTE.HeadcountCostReductionEst, 0)) + SUM(ISNULL(VTE.NonHeadcountCostReductionEst, 0))  + SUM(ISNULL(VTE.RevenueGrowthEstimate, 0)) AS [Total Top Down Target Value] FROM ValueCaptureTopDownEstimates VTE",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="How many top down targets do we have for this project?",
                            SQLQuery="SELECT  VCTT.Title, PT.Title, VCTT.CostToAchieveEstimate, VCTT.NonHeadcountCostReductionEst, VCTT.HeadcountCostReductionEst, VCTT.RevenueGrowthEstimate FROM   ValueCaptureTopDownEstimates VCTT  LEFT JOIN ProjectTeams PT on PT.ID = VCTT.ProjectTeamId",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="What is the Total Headcount Cost Reduction Target?",
                            SQLQuery="SELECT SUM(ISNULL(VTE.HeadcountCostReductionEst,0)) AS HeadcountCostReduction FROM ValueCaptureTopDownEstimates VTE",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="What is the Total Non Headcount Cost Reduction Target?",
                            SQLQuery="SELECT  SUM(ISNULL(VTE.NonHeadcountCostReductionEst,0)) AS NonHeadcountCostReduction FROM  ValueCaptureTopDownEstimates VTE",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="What is the Total Revenue Growth Target?",
                            SQLQuery="SELECT  SUM(ISNULL(VTE.RevenueGrowthEstimate,0)) AS RevenueGrowth FROM  ValueCaptureTopDownEstimates VTE",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="What is the Total Cost to Achieve Target?",
                            SQLQuery="SELECT  SUM(ISNULL(VTE.CostToAchieveEstimate,0)) AS CostToAchive FROM  ValueCaptureTopDownEstimates VTE",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="Are there any benchmarks for this project?",
                            SQLQuery="SELECT  PT.Title ProjectTeams, VBM.Title Benchmark FROM  ValueCaptureCostBenchmarks VBM LEFT JOIN  ProjectTeams PT ON PT.ID = VBM.ProjectTeamId",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="What is my program Client Baseline PnL?",
                            SQLQuery="SELECT A.Amount as [Client Baseline PnL Amount], A.FinancialLineItem as FinancialLineItem FROM( SELECT F.ID, F.Ordinal, F.Title FinancialLineItem , SUM(C.Amount)/1000000 Amount FROM ValueCaptureFinancialLineItems F LEFT JOIN CostCenters C ON C.FinancialLineItemId = F.ID  GROUP BY F.ID, F.Title, F.Ordinal ) A WHERE A.Amount IS NOT NULL",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="List all recommended initiatives for my program.",
                            SQLQuery="SELECT VCRI.Title AS [Recommended Initiatives List] FROM ValueCaptureRecommendedInitiatives VCRI",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="Compare Top Down Targets vs Bottom Up Initiatives for my project.",
                            SQLQuery="SELECT 	SUM(a.[Total Top Down Target Value]) AS [Top Down Targets],      SUM(b.[Bottom Up Initiatives Value]) AS [Bottom Up Initiatives Value], 	( SUM(b.[Bottom Up Initiatives Value])-SUM(a.[Total Top Down Target Value])) AS Variance FROM ( SELECT   SUM(ISNULL(VCTDE.HeadcountCostReductionEst, 0)) + SUM(ISNULL(VCTDE.NonHeadcountCostReductionEst, 0))        + SUM(ISNULL(VCTDE.RevenueGrowthEstimate, 0)) AS [Total Top Down Target Value] FROM ValueCaptureTopDownEstimates VCTDE) a, ( select SUM(Amount)*12 as [Bottom Up Initiatives Value]  FROM vwUnpivotEstimates where MYear='Y3M12' AND Recurring =1 ) b ",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="What is cumulative one-time cost for all initiatives?",
                            SQLQuery="   SELECT ISNULL(SUM(Act.AMOUNT),0.0) AS [Cumulative One Time Cost Amount] 			   FROM vwUnpivotActuals Act 			   LEFT JOIN ValueCaptureImpactTypes VCIT ON Act.ValueCaptureImpactTypeID=VCIT.ID 			   LEFT JOIN ValueCaptureInitiatives VCI ON Act.ValueCaptureInitiativeID=VCI.ID 			   WHERE VCIT.PositiveOrNegativeValues='Negative' 			   AND Act.Recurring<>1 			   AND VCI.Title = '{ValueCaptureInitiative}'",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="List all workplan items linked to VC initiatives.",
                            SQLQuery="  SELECT  	   WP.Title AS [Workplan Items Linked to Value Capture Initiatives]  	   FROM WorkPlan WP 	   LEFT JOIN WorkPlanToValueCaptureInitiativesForValueCaptureInitiativeIDs WPVC  	             ON WP.ID=WPVC.WorkPlanId 	   LEFT JOIN ValueCaptureInitiatives VCI  	             ON VCI.ID=WPVC.ValueCaptureInitiativeId",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List all initiatives that had an estimate annualized run-rate differed by more than 10% from the Actual annualized run-rate.",
                            SQLQuery="WITH EstimatedRunRates AS (     SELECT          E.ValueCaptureInitiativeId,  B.Title AS Initiative,          ISNULL(SUM(E.Amount),0) * 12 AS EstimatedAnnualizedRunRate     FROM          vwUnPivotEstimates E     JOIN          ValueCaptureInitiatives B ON E.ValueCaptureInitiativeId = B.ID     WHERE          E.Recurring = 1     GROUP BY          E.ValueCaptureInitiativeId, B.Title ), ActualRunRates AS (     SELECT          A.ValueCaptureInitiativeId, B.Title AS Initiative,          SUM(ISNULL(A.Amount, 0)) * 12 AS ActualAnnualizedRunRate     FROM          vwUnpivotActuals A     JOIN          ValueCaptureInitiatives B ON A.ValueCaptureInitiativeId = B.ID     WHERE          A.Recurring = 1      GROUP BY          A.ValueCaptureInitiativeId, B.Title )   SELECT Initiative AS [List of Initiatives with 10% differ between Estimate and Actual] FROM ( SELECT      E.ValueCaptureInitiativeId,E.Initiative,     E.EstimatedAnnualizedRunRate,     A.ActualAnnualizedRunRate,    IIF(E.EstimatedAnnualizedRunRate = 0 ,0 , (A.ActualAnnualizedRunRate - E.EstimatedAnnualizedRunRate) / E.EstimatedAnnualizedRunRate * 100) AS PercentageDifference FROM      EstimatedRunRates E JOIN      ActualRunRates A ON E.ValueCaptureInitiativeId = A.ValueCaptureInitiativeId ) A WHERE      PercentageDifference > 10",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="What's the tracking period for my project?",
                            SQLQuery="SELECT     CONCAT('Tracking Period of the Program is from ', CAST(MIN(VTM.StartDt) AS DATE), ' to ', CAST(MAX(VTM.EndDt) AS DATE)) FROM     ValueCaptureTransactionMonths VTM WHERE     VTM.IsItemActive = 1",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="What's the variance for Legal function?",
                            SQLQuery="SELECT ISNULL(SUM(Act.Amount), 0.0) - ISNULL(SUM(Est.Amount), 0.0) AS Variance FROM (     SELECT SUM(Est.Amount) AS Amount     FROM vwUnpivotEstimates Est         LEFT JOIN ValueCaptureInitiatives VCI             ON Est.ValueCaptureInitiativeId = VCI.ID         LEFT JOIN ProjectTeams PT             ON VCI.ProjectTeamId = PT.ID     WHERE PT.Title = '{ProjectTeam}' ) Est     JOIN     (         SELECT SUM(Act.Amount) AS Amount         FROM vwUnpivotActuals Act             LEFT JOIN ValueCaptureInitiatives VCI                 ON Act.ValueCaptureInitiativeId = VCI.ID             LEFT JOIN ProjectTeams PT                 ON VCI.ProjectTeamId = PT.ID         WHERE PT.Title = '{ProjectTeam}'    ) Act         ON 1 = 1",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="Based on Evaluator comparison, how many initiatives have 'High Benefit, High Complexity'?",
                            SQLQuery="	SELECT   	    COUNT(VCI.ID) AS [Initiative Count for Selected Evaluator Quad]  		     FROM ValueCaptureInitiatives VCI 		LEFT JOIN VCInitiativeEvaluatorQuadInfo VCQ  		    ON VCI.VCInitiativeEvaluatorQuadInfoId=VCQ.ID 		       WHERE VCQ.Title= {EvaluatorQuad}",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="What is my variance for the IT initiatives?",
                            SQLQuery="SELECT  ISNULL(SUM(Act.Amount), 0.0) - ISNULL(SUM(Est.Amount), 0.0) AS Variance FROM (     SELECT SUM(Est.Amount) AS Amount     FROM vwUnpivotEstimates Est         LEFT JOIN ValueCaptureInitiatives VCI             ON Est.ValueCaptureInitiativeId = VCI.ID         LEFT JOIN ProjectTeams PT             ON VCI.ProjectTeamId = PT.ID     WHERE PT.Title = '{ProjectTeam}' ) Est     JOIN     (         SELECT SUM(Act.Amount) AS Amount         FROM vwUnpivotActuals Act             LEFT JOIN ValueCaptureInitiatives VCI                 ON Act.ValueCaptureInitiativeId = VCI.ID             LEFT JOIN ProjectTeams PT                 ON VCI.ProjectTeamId = PT.ID         WHERE PT.Title = '{ProjectTeam}'     ) Act         ON 1 = 1",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="What is my Y1M1 Estimates, Actuals and Variance for Finance - [Initiative 1]?",
                            SQLQuery="SELECT ISNULL(SUM(Est.Amount), 0.0) AS Estimates,        ISNULL(SUM(Act.Amount), 0.0) AS Actuals,        ISNULL(SUM(Act.Amount), 0.0) - ISNULL(SUM(Est.Amount), 0.0) AS Variance FROM (     SELECT SUM(Est.Amount) AS Amount     FROM vwUnpivotEstimates Est         LEFT JOIN ValueCaptureInitiatives VCI             ON Est.ValueCaptureInitiativeId = VCI.ID         LEFT JOIN ProjectTeams PT             ON VCI.ProjectTeamId = PT.ID     WHERE PT.Title = 'Finance'           and VCI.Title = 'Initiative 1'           and Est.MYear = 'Y1M1' ) Est     JOIN     (         SELECT SUM(Act.Amount) AS Amount         FROM vwUnpivotActuals Act             LEFT JOIN ValueCaptureInitiatives VCI                 ON Act.ValueCaptureInitiativeId = VCI.ID             LEFT JOIN ProjectTeams PT                 ON VCI.ProjectTeamId = PT.ID         WHERE PT.Title = 'Finance'               AND VCI.Title = 'Initiative 1'               AND MYear = 'Y1M1'     ) Act         ON 1 = 1",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "List initiatives that had an Estimate ARR that differed by 10% (higher or lower) from the Actual ARR for previous month.",
                            SQLQuery= "WITH EstimatedRunRates AS (     SELECT          E.ValueCaptureInitiativeId,  B.Title AS Initiative,          ISNULL(SUM(E.Amount),0) * 12 AS EstimatedAnnualizedRunRate     FROM          vwUnPivotEstimates E     JOIN          ValueCaptureInitiatives B ON E.ValueCaptureInitiativeId = B.ID 	LEFT JOIN ValueCaptureTransactionMonths VT ON VT.[Key] = E.MYear      WHERE          E.Recurring = 1 		AND (CAST( DATEADD(MM, 3 , GETDATE()) AS DATE) BETWEEN VT.StartDt AND VT.EndDt)     GROUP BY          E.ValueCaptureInitiativeId, B.Title ), ActualRunRates AS (     SELECT          A.ValueCaptureInitiativeId, B.Title AS Initiative,          SUM(ISNULL(A.Amount, 0)) * 12 AS ActualAnnualizedRunRate     FROM          vwUnpivotActuals A     JOIN          ValueCaptureInitiatives B ON A.ValueCaptureInitiativeId = B.ID  	LEFT JOIN ValueCaptureTransactionMonths VT ON VT.[Key] = A.MYear      WHERE          A.Recurring = 1  		AND (CAST( DATEADD(MM, 3 , GETDATE()) AS DATE) BETWEEN VT.StartDt AND VT.EndDt)     GROUP BY          A.ValueCaptureInitiativeId, B.Title )  SELECT Initiative AS [List of Initiatives with 10% differ between Estimate and Actual] FROM ( SELECT      E.ValueCaptureInitiativeId,E.Initiative,     E.EstimatedAnnualizedRunRate,     A.ActualAnnualizedRunRate,    IIF(E.EstimatedAnnualizedRunRate = 0 ,0 , ABS(A.ActualAnnualizedRunRate - E.EstimatedAnnualizedRunRate) / E.EstimatedAnnualizedRunRate * 100) AS PercentageDifference FROM      EstimatedRunRates E JOIN      ActualRunRates A ON E.ValueCaptureInitiativeId = A.ValueCaptureInitiativeId ) A WHERE      PercentageDifference > 10",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "In the PnL, what is my net sales?",
                            SQLQuery= "SELECT  ISNULL(SUM(UE.Amount)/1000000,0) AS TotalNetSales FROM ValueCaptureEstimates VE LEFT JOIN ValueCaptureFinancialLineItems FL ON FL.ID = VE.FinancialLineItemId LEFT JOIN ValueCaptureInitiatives VI ON VI.id = VE.ValueCaptureInitiativeId LEFT JOIN vwUnpivotEstimates UE ON UE.ID = VE.ID LEFT JOIN ValueCaptureFinancialLineItemTypes FLT ON FLT.ID = FL.FinancialLineItemTypeId WHERE FLT.Title = 'PnL' AND FL.Title in ('Net sales')",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "In the PnL, what is my total operating performance?",
                            SQLQuery= "SELECT  	ISNULL(SUM(UE.Amount)/1000000,0) AS TotalOperatingPerformance FROM      ValueCaptureEstimates VE LEFT JOIN      ValueCaptureFinancialLineItems FL ON FL.ID = VE.FinancialLineItemId LEFT JOIN      ValueCaptureInitiatives VI ON VI.id = VE.ValueCaptureInitiativeId LEFT JOIN  	vwUnpivotEstimates UE ON UE.ID = VE.ID LEFT JOIN 	ValueCaptureFinancialLineItemTypes FLT ON FLT.ID = FL.FinancialLineItemTypeId LEFT JOIN 	ValueCaptureFinancialLineItemGroups FLG ON FLG.ID = FL.FinancialLineItemGroupId WHERE      FLT.Title = 'PnL'  AND FLG.Title in ('Total Operating Performance') ",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "In the PnL, what is my gross profit?",
                            SQLQuery= "SELECT  	ISNULL(SUM(UE.Amount)/1000000,0) AS GrossProfit FROM      ValueCaptureEstimates VE LEFT JOIN      ValueCaptureFinancialLineItems FL ON FL.ID = VE.FinancialLineItemId LEFT JOIN      ValueCaptureInitiatives VI ON VI.id = VE.ValueCaptureInitiativeId LEFT JOIN  	vwUnpivotEstimates UE ON UE.ID = VE.ID LEFT JOIN 	ValueCaptureFinancialLineItemTypes FLT ON FLT.ID = FL.FinancialLineItemTypeId LEFT JOIN 	ValueCaptureFinancialLineItemGroups FLG ON FLG.ID = FL.FinancialLineItemGroupId WHERE      FLT.Title = 'PnL'  AND FLG.Title in ('Gross Profit') ",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "In the PnL, what is my EBITDA and Net Income?",
                            SQLQuery= "SELECT  	ISNULL(SUM(UE.Amount)/1000000,0) AS [EBITA & Net Income] FROM      ValueCaptureEstimates VE LEFT JOIN      ValueCaptureFinancialLineItems FL ON FL.ID = VE.FinancialLineItemId LEFT JOIN      ValueCaptureInitiatives VI ON VI.id = VE.ValueCaptureInitiativeId LEFT JOIN  	vwUnpivotEstimates UE ON UE.ID = VE.ID LEFT JOIN 	ValueCaptureFinancialLineItemTypes FLT ON FLT.ID = FL.FinancialLineItemTypeId LEFT JOIN 	ValueCaptureFinancialLineItemGroups FLG ON FLG.ID = FL.FinancialLineItemGroupId WHERE      FLT.Title = 'PnL' AND FLG.Title in ('EBITDA','Net Income') ",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "In the Balance Sheet, what is my Total Assets?",
                            SQLQuery= "SELECT  	ISNULL(SUM(UE.Amount)/1000000,0) AS [Total Assets] FROM      ValueCaptureEstimates VE LEFT JOIN      ValueCaptureFinancialLineItems FL ON FL.ID = VE.FinancialLineItemId LEFT JOIN      ValueCaptureInitiatives VI ON VI.id = VE.ValueCaptureInitiativeId LEFT JOIN  	vwUnpivotEstimates UE ON UE.ID = VE.ID LEFT JOIN 	ValueCaptureFinancialLineItemTypes FLT ON FLT.ID = FL.FinancialLineItemTypeId LEFT JOIN 	ValueCaptureFinancialLineItemGroups FLG ON FLG.ID = FL.FinancialLineItemGroupId WHERE      FLT.Title = 'Balance Sheet'  AND FLG.Title in ('Total Current Assets','Total Non-Current Assets') ",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "In the Balance Sheet, what is my Total Liabilities?",
                            SQLQuery= "SELECT  	ISNULL(SUM(UE.Amount)/1000000,0) AS [Total Liabilities] FROM      ValueCaptureEstimates VE LEFT JOIN      ValueCaptureFinancialLineItems FL ON FL.ID = VE.FinancialLineItemId LEFT JOIN      ValueCaptureInitiatives VI ON VI.id = VE.ValueCaptureInitiativeId LEFT JOIN  	vwUnpivotEstimates UE ON UE.ID = VE.ID LEFT JOIN 	ValueCaptureFinancialLineItemTypes FLT ON FLT.ID = FL.FinancialLineItemTypeId LEFT JOIN 	ValueCaptureFinancialLineItemGroups FLG ON FLG.ID = FL.FinancialLineItemGroupId WHERE      FLT.Title = 'Balance Sheet'  AND FLG.Title in ('Total Current Liabilities','Total Non-Current Liabilities') ",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "In the Balance Sheet, what is my Total Equity?",
                            SQLQuery= "SELECT  	ISNULL(SUM(UE.Amount)/1000000,0) AS [Total Equity] FROM      ValueCaptureEstimates VE LEFT JOIN      ValueCaptureFinancialLineItems FL ON FL.ID = VE.FinancialLineItemId LEFT JOIN  	vwUnpivotEstimates UE ON UE.ID = VE.ID LEFT JOIN 	ValueCaptureFinancialLineItemTypes FLT ON FLT.ID = FL.FinancialLineItemTypeId LEFT JOIN 	ValueCaptureFinancialLineItemGroups FLG ON FLG.ID = FL.FinancialLineItemGroupId WHERE      FLT.Title = 'Balance Sheet'  AND FLG.Title in ('Equity') ",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="What is the total of headcount and non-headcount related cost reduction?",
                            SQLQuery="SELECT  SUM(VTE.NonHeadcountCostReductionEst) NonHeadcountCostReduction, SUM(VTE.HeadcountCostReductionEst) HeadcountCostReduction FROM ValueCaptureTopDownEstimates VTE",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="List out teams that have bottom-up estimates but missing top-down targets.",
                            SQLQuery=";WITH CTE AS  ( 	SELECT I.ProjectTeamId  	FROM ValueCaptureEstimates E 		LEFT JOIN ValueCaptureInitiatives I ON I.ID = E.ValueCaptureInitiativeId 	EXCEPT 	SELECT VCTDE.ProjectTeamId FROM ValueCaptureTopDownEstimates VCTDE )  SELECT PT.Title [ProjectTeam]  FROM CTE LEFT JOIN ProjectTeams PT ON PT.ID = CTE.ProjectTeamId",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="What is the variance between Top down and bottom up? Provide overall variance and variance by the team.",
                            SQLQuery=" DECLARE @CurrentYR NVARCHAR(10), @SQL NVARCHAR(MAX)  SELECT  TOP 1 @CurrentYR = [YEAR] FROM vwValueCaptureTransactionMonths WHERE RelativeYear = YEAR(GETDATE())   SELECT @SQL = ' ;WITH TopDownCTE AS ( 	SELECT  		PT.ID  PROJECTTEAMID 		,PT.Title [ProjectTeam] 		,(SUM(ISNULL(VT.RevenueGrowthEstimate,0))  + SUM(ISNULL(VT.NonHeadcountCostReductionEst,0)) + SUM(ISNULL(VT.HeadcountCostReductionEst,0)))/1000000  [Target] 	FROM ValueCaptureTopDownEstimates VT 		LEFT JOIN ProjectTeams PT ON PT.ID = VT.ProjectTeamId 	WHERE PT.ManageValueCapture = 1 	GROUP BY  		PT.ID  		,PT.Title 	UNION ALL 	SELECT  		-1 		,''Overall'' 		,(SUM(ISNULL(VT.RevenueGrowthEstimate,0))  + SUM(ISNULL(VT.NonHeadcountCostReductionEst,0)) + SUM(ISNULL(VT.HeadcountCostReductionEst,0)))/1000000  [Target] 	FROM ValueCaptureTopDownEstimates VT 		LEFT JOIN ProjectTeams PT ON PT.ID = VT.ProjectTeamId 	WHERE PT.ManageValueCapture = 1 ) , BottomUPCTE AS ( 	SELECT  		VI.ProjectTeamId 		,PT.Title [ProjectTeam] 		,(SUM(ISNULL(E.'+@CurrentYR+'M12Estimate,0))*12)/1000000 [Estimate] 	FROM ValueCaptureEstimates E 	 JOIN ValueCaptureInitiatives VI ON VI.ID =E.ValueCaptureInitiativeId 	 LEFT JOIN ProjectTeams PT ON PT.ID = VI.ProjectTeamId 	WHERE  		VI.IsItemActive = 1  		AND E.Recurring = 1  		AND PT.ManageValueCapture = 1 	GROUP BY  		VI.PROJECTTEAMID 		,PT.Title 	UNION ALL 	SELECT  		-1 		,''Overall'' 		,(SUM(ISNULL(E.'+@CurrentYR+'M12Estimate,0))*12)/1000000 [Estimate] 	FROM ValueCaptureEstimates E 	 JOIN ValueCaptureInitiatives VI ON VI.ID =E.ValueCaptureInitiativeId 	 LEFT JOIN ProjectTeams PT ON PT.ID = VI.ProjectTeamId 	WHERE  		VI.IsItemActive = 1  		AND E.Recurring = 1  		AND PT.ManageValueCapture = 1 )  SELECT  	COALESCE(T.PROJECTTEAMID,B.PROJECTTEAMID) ProjectTeamID 	,COALESCE(T.ProjectTeam,B.ProjectTeam) ProjectTeam 	,ISNULL(T.[Target],0) [TopDown Target(M)] 	,ISNULL(B.Estimate,0) [BottomUP Estimate(M)] 	,ISNULL(T.[Target],0) - ISNULL(B.Estimate,0) [Variance(M)] FROM TopDownCTE T 	FULL OUTER JOIN BottomUPCTE B ON T.ProjectTeamId = B.ProjectTeamId ORDER BY ProjectTeamId'  EXEC sp_executesql  @SQL",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="List out initiatives that have an Estimate Annualized Run Rate that differed by 10% (higher or lower) from the Actual Annualized Run Rate for Y1M12.",
                            SQLQuery="WITH EstimatedRunRates AS (     SELECT          E.ValueCaptureInitiativeId,  B.Title AS Initiative,          ISNULL(SUM(E.Amount),0) * 12 AS EstimatedAnnualizedRunRate     FROM          vwUnPivotEstimates E     JOIN          ValueCaptureInitiatives B ON E.ValueCaptureInitiativeId = B.ID     WHERE          E.Recurring = 1 		AND E.MYear IN ('Y1M12')     GROUP BY          E.ValueCaptureInitiativeId, B.Title ), ActualRunRates AS (     SELECT          A.ValueCaptureInitiativeId, B.Title AS Initiative,          SUM(ISNULL(A.Amount, 0)) * 12 AS ActualAnnualizedRunRate     FROM          vwUnpivotActuals A     JOIN          ValueCaptureInitiatives B ON A.ValueCaptureInitiativeId = B.ID     WHERE          A.Recurring = 1          AND A.MYear IN ('Y1M12')     GROUP BY          A.ValueCaptureInitiativeId, B.Title )   SELECT Initiative AS [List of Initiatives with 10% differ between Estimate and Actual] FROM ( SELECT      E.ValueCaptureInitiativeId,E.Initiative,     E.EstimatedAnnualizedRunRate,     A.ActualAnnualizedRunRate,    IIF(E.EstimatedAnnualizedRunRate = 0 ,0 , ABS(A.ActualAnnualizedRunRate - E.EstimatedAnnualizedRunRate) / E.EstimatedAnnualizedRunRate * 100) AS PercentageDifference FROM      EstimatedRunRates E JOIN      ActualRunRates A ON E.ValueCaptureInitiativeId = A.ValueCaptureInitiativeId ) A WHERE      PercentageDifference > 10",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="List out validated initiatives that are ready to be approved.",
                            SQLQuery="SELECT  VC.Title AS ValueCaptureInitiativesReadyForApproval FROM  ValueCaptureInitiatives VC WHERE  VC.ReadyForApproval = 1",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List out initiatives that are impacting PnL.",
                            SQLQuery="SELECT      VI.title AS InitiativeImpactOnPnL FROM      ValueCaptureEstimates VE LEFT JOIN      ValueCaptureFinancialLineItems FL ON FL.ID = VE.FinancialLineItemId LEFT JOIN      ValueCaptureInitiatives VI ON VI.id = VE.ValueCaptureInitiativeId WHERE      FL.FinancialLineItemTypeId = 1 GROUP BY      VI.Title",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List out top 5 initiatives that are positively impacting PnL.",
                            SQLQuery="SELECT TOP 5 A.Initiatives, A.Amount FROM( SELECT VI.Title Initiatives ,sum(VE.Amount) Amount FROM vwUnpivotActuals VE LEFT JOIN ValueCaptureInitiatives VI ON VI.id = VE.ValueCaptureInitiativeId LEFT JOIN ValueCaptureImpactTypes VIT ON VIT.ID = VE.ValueCaptureImpactTypeid GROUP BY VI.Title,VE.Amount ) A WHERE A.Amount > 0 ORDER BY A.Amount DESC",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="List out top 5 initiatives with best benefit score that have high financial impact.",
                            SQLQuery="	SELECT TOP 5  		VI.Title [top 5 initiatives with best benefit score] 	FROM  		ValueCaptureInitiatives VI 	LEFT JOIN  		ValueCaptureImpacts VIM ON VIM.ID = VI.ValueCaptureImpactid 	WHERE  		VIM.ID in (1) 	ORDER BY  		VI.BenefitScore DESC",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List out top 5 most complex initiatives that have low financial impact.",
                            SQLQuery="	SELECT TOP 5  		VI.Title [top 5 most complex initiatives] 	FROM  		ValueCaptureInitiatives VI 	LEFT JOIN  		ValueCaptureImpacts VIM ON VIM.ID = VI.ValueCaptureImpactid 	WHERE  		VIM.ID in (3) 	ORDER BY  		VI.ComplexityScore DESC",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="Which team has most amount of headcount related cost reduction?",
                            SQLQuery="SELECT TOP 1  PT.Title, SUM(ISNULL(VTE.HeadcountCostReductionEst,0)) AS MostHeadcountCostReduction FROM   ValueCaptureTopDownEstimates VTE LEFT JOIN   ProjectTeams PT ON PT.ID = VTE.Projectteamid GROUP BY   PT.Title ORDER BY   SUM(ISNULL(VTE.HeadcountCostReductionEst,0)) DESC",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List all Iniatives that are Cost Reduction and are Easy for Implementation Ease.",
                            SQLQuery="SELECT VI.Title [Iniatives that are Cost Reduction and are Easy for Implementation Ease] FROM ValueCaptureInitiatives VI     LEFT JOIN ValueCaptureTypes VT         ON VT.ID = VI.ValueCaptureTypeID     LEFT JOIN ImplementationEase VD         ON VD.ID = VI.ImplementationEaseID WHERE VT.Title = 'Cost Reduction'       AND VD.Title = 'Easy'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="Provide me a list of Iniatives by stage that have Talent iniative value drivers.",
                            SQLQuery="SELECT VS.Title [Value Capture Stage],        VI.Title [Initiatives that have Talent intiative value drivers] FROM ValueCaptureInitiatives VI     LEFT JOIN ValueCaptureStages VS         ON VS.ID = VI.ValueCaptureStageID     LEFT JOIN ValueCaptureInitiativesToValueCaptureValueDriversForValueCaptureValueDrivers VD         ON VD.ValueCaptureInitiativeId = VI.ID     LEFT JOIN ValueCaptureValueDrivers VV         ON VD.ValueCaptureValueDriverId = VV.ID WHERE VV.Title = 'Talent' ",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="Show me all iniatives that do not have an owner.",
                            SQLQuery="SELECT VC.Title as [Value Capture Initiatives with No Owners] FROM ValueCaptureInitiatives as VC WHERE VC.ItemOwnerId IS NULL",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="Provide me a count of initiatives by prioirty and stage.",
                            SQLQuery="SELECT      ISNULL(VP.Title, 'No Priority') AS Category,     COUNT(VC.ID) AS Count,     'Priority' AS Type FROM      ValueCaptureInitiatives VC LEFT JOIN      ValueCapturePriorities VP ON VP.ID = VC.ValueCapturePriorityId GROUP BY      VC.ValueCapturePriorityId, VP.Title  UNION ALL  SELECT      ISNULL(VS.Title, 'No Stage Assigned') AS Category,     COUNT(VC.ID) AS Count,     'Stage' AS Type FROM      ValueCaptureInitiatives VC LEFT JOIN      ValueCaptureStages VS ON VS.ID = VC.ValueCaptureStageId WHERE      VC.ValueCaptureStageId IS NOT NULL GROUP BY      VC.ValueCaptureStageId, VS.Title;",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="Show me all Balance sheet line items that do not have a linked account.",
                            SQLQuery="SELECT FL.Title [Balance sheet line items that do not have a linked account] FROM ValueCaptureFinancialLineItems FL     LEFT JOIN ValueCaptureFinancialLineItemTypes FLT         ON FLT.ID = FL.FinancialLineItemTypeID     LEFT JOIN BalanceSheetAccounts BLA         ON BLA.FinancialLineItemID = FL.ID WHERE FLT.Title = 'Balance Sheet'       AND BLA.ID IS NULL",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="What is the Run Rate for iniatives in Approved, Committed and Realized?",
                            SQLQuery="SELECT SUM(ISNULL(E.Amount, 0) * 12) [Run Rate for iniatives in Approved, Committed and Realized] FROM ValueCaptureInitiatives VI LEFT JOIN vwUnpivotEstimates E ON E.ValueCaptureInitiativeId = VI.ID LEFT JOIN ValueCaptureStages VS ON VS.ID = VI.ValueCaptureStageID WHERE VS.Title IN ( 'Approved', 'Committed', 'Realized' ) AND MYear = ( select VCTMK.[Key] from ValueCaptureTransactionMonths VCTMK where CAST(VCTMK.EndDt AS date) = (SELECT MAX(CAST(VCTM.EndDt AS date)) FROM ValueCaptureTransactionMonths VCTM))",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="Provide the total Headcount cost redutciton target listed out by project team and provide the number of FTEs.",
                            SQLQuery="SELECT PT.Title [Project Team],        SUM(T.HeadCountCostReductionEst) [Total target Headcount cost redutciton] FROM ValueCaptureTopDownEstimates T     LEFT JOIN ProjectTeams PT         ON PT.ID = T.ProjectTeamId GROUP BY PT.Title",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="How many FTEs are part of the top down targets for EMEIA?",
                            SQLQuery="SELECT SUM(T.FTEs) [FTEs part of the top down targets for EMEIA] FROM ValueCaptureTopDownEstimates T     LEFT JOIN Regions R         ON R.ID = T.RegionID WHERE R.Title = 'EMEIA'",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="Which HR iniatives have a benefit score over 75?",
                            SQLQuery="SELECT VI.Title [Initiatives with Benefit score over 75] FROM ValueCaptureInitiatives VI LEFT JOIN ProjectTeams PT ON PT.ID = VI.ProjectTeamId WHERE CAST(VI.BenefitScore AS INT) > 75 AND PT.Title IN ('HR')",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="List out all Committed Iniatives that have a risk associated with them.",
                            SQLQuery="SELECT 	VI.Title [Initiatives that have Risk associated with them] FROM 	ValueCaptureInitiatives VI LEFT JOIN  	ValueCaptureStages VS ON VS.ID = VI.ValueCaptureStageId LEFT JOIN  	RisksAndIssuesToValueCaptureInitiativesForValueCaptureInitiativeIDs VIR ON VIR.ValueCaptureInitiativeId = VI.ID LEFT JOIN 	RisksAndIssues RI ON RI.ID = VIR.RisksAndIssueId WHERE  	RI.IssueRiskCategory IN ('Risk') 	AND VS.Title IN ('Committed')",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="List all High Benefit iniatives that are in the Identified Stage.",
                            SQLQuery="select Top 5 VC.Title, VS.Title, VC.BenefitScore From ValueCaptureInitiatives VC LEFT JOIN ValueCaptureStages VS on VS.ID = VC.ValueCaptureStageId where VS.Title in ('Identified') order by BenefitScore desc",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="Show me all iniatives that are approved and do not have an owner assigned.",
                            SQLQuery="SELECT 	VI.Title [Initiative is Approved with no Owner] FROM 	ValueCaptureInitiatives VI LEFT JOIN  	ValueCaptureStages VS ON VS.ID = VI.ValueCaptureStageId WHERE  	VS.Title IN ('Approved') 	AND 	VI.ItemOwnerId IS NULL",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="How many iniatives are assigned to me?",
                            SQLQuery="SELECT 	COUNT(VI.ID) FROM 	ValueCaptureInitiatives VI LEFT JOIN 	UserProfiles UP ON UP.ID = VI.ItemOwnerId WHERE  	UP.EMail = '{Username}'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="Provide the total non-headcount cost reduciton targets listed out by project team.",
                            SQLQuery="SELECT  PT.Title ProjectTeam,SUM(ISNULL(VTE.NonHeadcountCostReductionEst,0)) NonHeadcountCostReductionTarget  FROM   ValueCaptureTopDownEstimates VTE LEFT JOIN   ProjectTeams PT ON PT.ID = VTE.Projectteamid GROUP BY   PT.Title",
                            VisibleToAssistant=true, IsIncluded = true}
                    }
                },
                new SuggestionMatrix
                {
                    Source = Constants.Source.ProjectData.Key,
                    AppAfinity = Constants.App.OperatingModel,
                    Suggestions = new List<SuggestionData>
                    {
                        new SuggestionData { SuggestionText = "Provide a summary of Day 1 process dispositions.",
                        SQLQuery = "SELECT D.Title, STRING_AGG(N.Title, ', ') AS NodeTitles FROM NodesToDispositionsForDispositionNew ND LEFT JOIN Nodes N ON N.ID = ND.NodeId LEFT JOIN Dispositions D ON D.ID = ND.DispositionId LEFT JOIN TransactionStates T on T.ID = N.TransactionStateId Where T.[Key] = 'DAY_ONE' GROUP BY D.Title "},
                        new SuggestionData { SuggestionText = "How many systems are tagged to Current State processes?",
                        SQLQuery = "SELECT DISTINCT S.Title FROM NodesToSystemsForEnablerSystems NS LEFT JOIN Nodes N ON N.ID = NS.NodesId LEFT JOIN Systems S ON S.ID = NS.SystemsId LEFT JOIN TransactionStates T ON T.ID = N.TransactionStateId WHERE T.[Key] = 'CURRENT_STATE' "},
                        new SuggestionData { SuggestionText = "How many systems are tagged to Day 1 processes?",
                        SQLQuery = "SELECT DISTINCT S.Title FROM NodesToSystemsForEnablerSystems NS LEFT JOIN Nodes N ON N.ID = NS.NodesId LEFT JOIN Systems S ON S.ID = NS.SystemsId LEFT JOIN TransactionStates T ON T.ID = N.TransactionStateId WHERE T.[Key] = 'DAY_ONE' "},
                        new SuggestionData { SuggestionText = "How many assets are tagged to Day 1 processes? ",
                        SQLQuery = "SELECT DISTINCT A.Title FROM NodesToAssetsForEnablerAssets NA LEFT JOIN Nodes N ON N.ID = NA.NodesId LEFT JOIN Assets A ON A.ID = NA.AssetsId LEFT JOIN TransactionStates T ON T.ID = N.TransactionStateId WHERE T.[Key] = 'DAY_ONE' AND A.Title IS NOT NULL "},
                        new SuggestionData { SuggestionText = "How many assets are tagged to Current State processes? ",
                        SQLQuery = "SELECT DISTINCT A.Title FROM NodesToAssetsForEnablerAssets NA LEFT JOIN Nodes N ON N.ID = NA.NodesId LEFT JOIN Assets A ON A.ID = NA.AssetsId LEFT JOIN TransactionStates T ON T.ID = N.TransactionStateId WHERE T.[Key] = 'CURRENT_STATE' AND A.Title IS NOT NULL "},
                        new SuggestionData { SuggestionText = "Can you provide me number of processes by op model?",
                        SQLQuery ="SELECT ns.Title, a.TotalCount FROM ( SELECT COUNT(Title) AS TotalCount, BusinessEntityId FROM Nodes nds WHERE NodeTypeId = 3 GROUP BY BusinessEntityId ) a INNER JOIN Nodes ns ON a.BusinessEntityId = ns.ID" },
                        new SuggestionData { SuggestionText = "How many processes we have in current state?",
                        SQLQuery = "SELECT ns.Title, a.TotalCount FROM ( SELECT COUNT(N.Title) AS TotalCount, BusinessEntityId FROM Nodes N LEFT JOIN TransactionStates T ON T.ID = N.TransactionStateId WHERE NodeTypeId = 3 AND T.[Key] = 'CURRENT_STATE' GROUP BY BusinessEntityId ) a INNER JOIN Nodes ns ON a.BusinessEntityId = ns.ID "},
                        new SuggestionData { SuggestionText = "How many processes we have in Day1 state?",
                        SQLQuery = "SELECT ns.Title, a.TotalCount FROM ( SELECT COUNT(N.Title) AS TotalCount, BusinessEntityId FROM Nodes N LEFT JOIN TransactionStates T ON T.ID = N.TransactionStateId WHERE NodeTypeId = 3 AND T.[Key] = 'DAY_ONE' GROUP BY BusinessEntityId ) a INNER JOIN Nodes ns ON a.BusinessEntityId = ns.ID "},
                        new SuggestionData { SuggestionText ="How many processes don't have an Owner assigned in Current State?",
                        SQLQuery="SELECT COUNT(1) FROM Nodes N JOIN TransactionStates T ON T.ID = N.TransactionStateId WHERE T.[Key] = 'CURRENT_STATE'  AND N.NodeTypeId = 3  AND N.ID NOT IN (   SELECT DISTINCT NTO.NodeId   FROM Nodes N1   LEFT JOIN NodesToOwnersForOwnerNew NTO ON NTO.NodeId = N1.ID 	where NTO.NodeId is not null  )", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List processes that don't have Disposition assigned in Day 1 state.",
                        SQLQuery="SELECT PR.ID 	,PR.Title FROM Nodes PR JOIN TransactionStates T ON T.ID = PR.TransactionStateId WHERE T.[Key] = 'DAY_ONE' 	AND PR.NodeTypeId = 3 	AND NOT EXISTS  				(SELECT 1 FROM [NodesToDispositionsForDispositionNew] D WHERE D.NodeId = PR.ID)", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List the Disposition options available.",
                        SQLQuery="SELECT Title FROM Dispositions d", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="How many enablers are associated with each Process Group?",
                        SQLQuery="SELECT N.Title [ProcessGroup] ,COUNT(A.AssetsId) + COUNT(F.FacilitiesId) +COUNT(S.SystemsId) + COUNT(T.ThirdPartyAgreementsId) [Enablers Count] FROM Nodes N LEFT JOIN [NodesToAssetsForEnablerAssets] A ON A.NodesId = N.ID LEFT JOIN [NodesToFacilitiesForEnablerFacilities] F ON F.NodesId = N.ID LEFT JOIN [NodesToSystemsForEnablerSystems] S ON S.NodesId = N.ID LEFT JOIN [NodesToThirdPartyAgreementsForEnablerTpa] T ON T.NodesId = N.ID WHERE NodeTypeId = 2 GROUP BY N.Title ORDER BY [Enablers Count] DESC", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List the total number of systems by disposition.",
                        SQLQuery="SELECT D.Title [Disposition] 	,COUNT(SD.SystemId) [SystemCount] FROM Dispositions D 	JOIN [SystemsToDispositionsForDispositionDay1New] SD ON SD.DispositionId = D.ID GROUP BY D.Title", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="Can you please list down all Day 1 processes where no disposition has been tagged?",
                        SQLQuery=" SELECT PR.Title [Process] , D.DispositionId FROM Nodes PR 	JOIN TransactionStates S ON S.ID = PR.TransactionStateId  	LEFT JOIN NodesToDispositionsForDispositionNew D ON D.NodeId = PR.ID WHERE PR.NodeTypeId = 3 	AND D.NodeId IS NULL 	AND S.[Key] = 'DAY_ONE'", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="Can you please list all processes with no Enablers?",
                        SQLQuery=" SELECT 	N.Title [Process]	 FROM Nodes N LEFT JOIN [NodesToAssetsForEnablerAssets] A ON A.NodesId = N.ID LEFT JOIN [NodesToFacilitiesForEnablerFacilities] F ON F.NodesId = N.ID LEFT JOIN [NodesToSystemsForEnablerSystems] S ON S.NodesId = N.ID LEFT JOIN [NodesToThirdPartyAgreementsForEnablerTpa] T ON T.NodesId = N.ID WHERE NodeTypeId = 3 GROUP BY N.Title HAVING COUNT(A.AssetsId) + COUNT(F.FacilitiesId) +COUNT(S.SystemsId) + COUNT(T.ThirdPartyAgreementsId) = 0", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="Can you please compare the Current state & day 1 operating model and list all processes which are missing in Day1 as compared to current state?", SQLQuery="SELECT PR.Title as MissingInDay1 FROM Nodes PR 	JOIN TransactionStates S ON S.ID = PR.TransactionStateId WHERE PR.NodeTypeId = 3 	AND S.[Key] = 'CURRENT_STATE' EXCEPT SELECT 	PR.Title [Process] FROM Nodes PR 	JOIN TransactionStates S ON S.ID = PR.TransactionStateId WHERE PR.NodeTypeId = 3 	AND S.[Key] = 'DAY_ONE'", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="What Enablers are we tracking for this project?",
                        SQLQuery="SELECT DISTINCT A.Title Enabler, 'Asset' as Category	 FROM Nodes N LEFT JOIN [NodesToAssetsForEnablerAssets] NA ON NA.NodesId = N.ID LEFT JOIN [Assets] A ON A.ID = NA.AssetsId WHERE A.Title IS NOT NULL UNION ALL SELECT DISTINCT F.Title Enabler, 'Facility' as Category FROM Nodes N LEFT JOIN [NodesToFacilitiesForEnablerFacilities] NF ON NF.NodesId = N.ID LEFT JOIN [Facilities] F ON F.ID = NF.FacilitiesId WHERE F.Title IS NOT NULL  UNION ALL SELECT DISTINCT S.Title Enabler , 'System' as Category FROM Nodes N LEFT JOIN [NodesToSystemsForEnablerSystems] NS ON NS.NodesId = N.ID LEFT JOIN [Systems] S ON S.ID = NS.SystemsId WHERE S.Title IS NOT NULL  UNION ALL SELECT DISTINCT T.Title Enabler	, 'TPA' as Category FROM Nodes N LEFT JOIN [NodesToThirdPartyAgreementsForEnablerTpa] NT ON NT.NodesId = N.ID LEFT JOIN [ThirdPartyAgreements] T ON T.ID = NT.ThirdPartyAgreementsId WHERE T.Title IS NOT NULL ", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="How many Systems are there in this functional op model?",
                        SQLQuery="SELECT Count(ID) AS [# Systems present in this functional OP model] FROM Systems s", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="How many TPAs are there in this functional op model?",
                        SQLQuery="SELECT Count(ID) AS [# TPAs present in this functional OP model] FROM ThirdPartyAgreements tpa", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List the number of Systems by Type.",
                        SQLQuery="SELECT ST.Title AS SystemType, COUNT(S.ID) [# Systems by Type] FROM Systems S LEFT JOIN SystemTypes ST ON ST.ID = S.TypeId WHERE S.TypeId IS NOT NULL GROUP BY ST.Title", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List the number of TPAs by Ownership.",
                        SQLQuery="SELECT O.Title AS Owners, Count(*) AS [# TPAs by Ownership] FROM ThirdPartyAgreements TP LEFT JOIN Owners O ON O.ID = TP.OwnerID WHERE TP.OwnerID IS NOT NULL GROUP BY O.Title", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List down all process groups with no process within them.",
                        SQLQuery="SELECT N.Title [ProcessGroups With No Process] FROM Nodes N WHERE N.nodetypeid = 2 AND ID NOT IN (SELECT ns.NodeParentId FROM Nodes ns)", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List the number of processes across op models.",
                            SQLQuery="SELECT COUNT(P.[ID]) AS [Number of Process across Op Model] FROM Nodes P     LEFT JOIN NodeTypes NType         ON P.NodeTypeId = NType.ID WHERE NType.Title = 'Process'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List history of changes to the op model in the past one hour.",
                            SQLQuery="SELECT [Object],        Details,        FieldImpacted,        OldValue AS [Old Value],        NewValue AS [New Value],        [Title] AS [Activity] FROM OperatingModelActivityLog opma WHERE Modified >= DATEADD(hh, -1, GETDATE())",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List the history of changes to Ownership in the op model today.",
                            SQLQuery="SELECT [Object],        Details,        FieldImpacted,        OldValue AS [Old Value],        NewValue AS [New Value],        [Title] AS [Activity] FROM OperatingModelActivityLog opma WHERE FieldImpacted = 'Owner'       AND CAST(Modified AS DATE) = CAST(GETDATE() AS DATE)",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List the history of deletes in the op model this week.",
                            SQLQuery="SELECT [Object],        Details,        FieldImpacted,        OldValue AS [Old Value],        NewValue AS [New Value],        [Title] AS [Activity] FROM OperatingModelActivityLog opma WHERE Title = 'Deleted'       AND DATEPART(wk, CAST(Modified AS DATE)) = DATEPART(wk, CAST(GETDATE() AS DATE))       AND YEAR(Modified) = YEAR(GETDATE())",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List the functional operating models across different states.",
                            SQLQuery="SELECT T.Title [State], N.Title AS OperatingModel FROM Nodes N JOIN TransactionStates T ON T.ID = N.TransactionStateId  WHERE N.NodeTypeId = 1",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="Are there any Live Notes in this op model?",
                            SQLQuery="SELECT N.Title Opmodel, L.Title LiveNote, Note FROM OperatingModelLiveNotes L LEFT JOIN Nodes N ON N.Id = L.NodeId",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List down all processes which were updated since last 1 week.",
                            SQLQuery="SELECT DISTINCT N.Title Process FROM OperatingModelActivityLog OL  LEFT JOIN Nodes N ON N.ID = Ol.ObjectID WHERE OL.Title = 'Updated' AND Object = 'Process' AND (CAST(OL.Modified AS DATE) BETWEEN DATEADD(DAY, -7, CAST(GETDATE()AS DATE))  AND CAST(GETDATE() AS DATE))",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List down all processes which have been renamed in Day 1 op model.",
                            SQLQuery="SELECT DISTINCT N.Title Process, OldValue, NewValue  FROM OperatingModelActivityLog PL  LEFT JOIN Nodes N ON N.ID = PL.ObjectID  WHERE Object = 'Process' AND PL.Title = 'Updated' AND FieldImpacted = 'Title' AND N.TransactionStateId = 6",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="Please provide top 5 systems that are linked to various processes.",
                            SQLQuery="SELECT TOP 5     S.Title AS [Systems],     Count(NSS.NodesID) AS [ProcessCount] FROM Nodes N     LEFT JOIN [dbo].[NodesToSystemsForEnablerSystems] NSS         ON N.ID = NSS.NodesId     LEFT JOIN [dbo].[Systems] S         ON NSS.SystemsId = S.ID WHERE N.NodeTypeId = 3 GROUP BY S.Title ORDER BY Count(NSS.NodesID) DESC",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="For Current State, list all processes that doesn't have any ownership.",
                            SQLQuery="SELECT N.Title [List of processes for CurrentState where ownership is not present] FROM Nodes N JOIN TransactionStates T ON T.ID = N.TransactionStateId WHERE T.[Key] = 'CURRENT_STATE'   AND N.NodeTypeId = 3   AND N.ID NOT IN (     SELECT DISTINCT NTO.NodeId     FROM Nodes N1     LEFT JOIN NodesToOwnersForOwnerNew NTO ON NTO.NodeId = N1.ID 	where NTO.NodeId is not null   )",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="For Day 1 Operating Models, list all processes that doesn't have any dispositions.",
                            SQLQuery=" SELECT PR.Title [Process] FROM Nodes PR     JOIN TransactionStates  S  ON S.ID = PR.TransactionStateId    LEFT JOIN  NodesToDispositionsForDispositionNew D             ON D.NodeId = PR.ID WHERE     PR.NodeTypeId = 3     AND D.NodeId IS NULL     AND S.[Key] = 'DAY_ONE'",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="Which function has the highest number of processes?",
                            SQLQuery=";WITH GetSelectedFunction AS (SELECT id,            Title,            NodeParentID,            NodeTypeId,            HierId = 1     FROM Nodes  n   WHERE NodeParentID IS NULL     UNION ALL     SELECT nds.id,  nds.Title,   nds.NodeParentID, nds.NodeTypeId, HierId = HierId + 1     FROM Nodes nds, GetSelectedFunction  where nds.NodeParentID = GetSelectedFunction.id    ),       PG_Hierarchy ([Functions], NodeParentID, ID, Title, Parent, ParentID, NodeTypeId) AS (SELECT ROOT.Title [Functions],            ROOT.NodeParentID,            ROOT.id,            ROOT.Title,            ROOT.Title,            ROOT.ID AS ParentID,            ROOT.NodeTypeId     FROM GetSelectedFunction ROOT     WHERE HierId = 2     UNION ALL     SELECT PARENT.[Functions],            CHILD.NodeParentID,            CHILD.ID,            CHILD.Title,            PARENT.TITLE,            PARENT.ID,            CHILD.NodeTypeId     FROM PG_Hierarchy PARENT,          Nodes CHILD     where PARENT.id = CHILD.NodeParentID    )  , ProcessCTE AS (SELECT DISTINCT         P.Functions,         P.Title Processes,         P.ID     FROM     (SELECT * FROM PG_Hierarchy pgh WHERE NodeTypeId = 2) SF         LEFT JOIN         (SELECT * FROM PG_Hierarchy pg WHERE NodeTypeId = 3) P             ON P.NodeParentID = SF.ID     WHERE P.Title IS NOT NULL    ) SELECT TOP 1     Functions AS [Function with highest number of processes] FROM (     SELECT Functions,            COUNT(ID) as [Process Count]     FROM ProcessCTE  tc   GROUP BY Functions ) A order by [Process Count] desc    ",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="List down all Processes which have their disposition set as TSA.",
                            SQLQuery="SELECT     N.Title AS [List of Processes with Disposition as TSA] FROM   Nodes   N   LEFT JOIN     NodesToDispositionsForDispositionNew NTD             ON NTD.NodeId = N.ID     LEFT JOIN         Dispositions  D ON NTD.DispositionId = D.ID WHERE     D.Title = 'TSA'     AND N.NodeTypeId = 3",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List down all processes with no Disposition assigned.",
                            SQLQuery="SELECT N.Title as [List of Processes with No Disposition] FROM Nodes N WHERE N.NodeTypeId=3 AND N.ID NOT IN (SELECT NodeId FROM NodesToDispositionsForDispositionNew ndd)",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="How many processes are there in the IT function?",
                            SQLQuery="SELECT COUNT(1)  [No. of Processes] FROM Nodes PR JOIN NODES P ON PR.NodeParentID = P.ID WHERE PR.NodeTypeId = 3 AND P.Title = '{FunctionName}'",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="List processes that have more than 1 disposition in IT.",
                            SQLQuery="SELECT  PR.Title [Process] , COUNT(DISTINCT D.DispositionId) [DispostionCount] FROM Nodes PR JOIN NODES P ON PR.NodeParentID = P.ID LEFT JOIN NodesToDispositionsForDispositionNew D ON D.NodeId = PR.ID WHERE PR.NodeTypeId = 3 AND P.Title = 'COMMERCIAL' GROUP BY PR.Title HAVING COUNT(DISTINCT D.DispositionId) > 1",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="What is total number of processes in Real Estate grouped by geographic coverage?",
                            SQLQuery=";WITH GetSelectedFunction AS (SELECT id,            Title,            NodeParentID,            NodeTypeId,            HierId = 1     FROM Nodes nd    WHERE NodeParentID IS NULL     UNION ALL     SELECT nds.id,            nds.Title,            nds.NodeParentID,            nds.NodeTypeId,            HierId = HierId + 1     FROM Nodes nds,          GetSelectedFunction     where nds.NodeParentID = GetSelectedFunction.id    ),       PG_Hierarchy ([Functions], NodeParentID, ID, Title, Parent, ParentID, NodeTypeId) AS (SELECT ROOT.Title [Functions],            ROOT.NodeParentID,            ROOT.id,            ROOT.Title,            ROOT.Title,            ROOT.ID AS ParentID,            ROOT.NodeTypeId     FROM GetSelectedFunction ROOT     WHERE HierId = 2     UNION ALL     SELECT PARENT.[Functions],            CHILD.NodeParentID,            CHILD.ID,            CHILD.Title,            PARENT.TITLE,            PARENT.ID,            CHILD.NodeTypeId     FROM PG_Hierarchy PARENT,          Nodes CHILD     where PARENT.id = CHILD.NodeParentID    ), ProcessCTE AS (SELECT DISTINCT         P.Functions,         P.Title Processes,         P.ID AS [ProcessID]     FROM     (SELECT * FROM PG_Hierarchy pg WHERE NodeTypeId = 2) SF         LEFT JOIN         (SELECT * FROM PG_Hierarchy pg WHERE NodeTypeId = 3) P             ON P.NodeParentID = SF.ID     WHERE P.Title IS NOT NULL    ) SELECT ISNULL(Geo.Title, 'Not Assigned') AS [Geographic Coverages],        COUNT(P.ProcessID) AS [Total Number of Process in Real Estate] FROM ProcessCTE P     LEFT JOIN ProcessAttributes PA         ON P.ProcessID = PA.NodeId     LEFT JOIN GeographicCoverages Geo         ON PA.GeographicCoverageId = Geo.ID WHERE P.Functions ='{FunctionName}' GROUP BY Geo.Title",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="List all functions and sub-functions for functional operating model [Name].",
                            SQLQuery=";WITH PG_Hierarchy AS (SELECT id,            Title,            NodeParentID,            TransactionStateID,            HierId = 1     FROM Nodes nd    WHERE NodeParentID IS NULL     UNION ALL     SELECT nds.id,            nds.Title,            nds.NodeParentID,            nds.TransactionStateId,            HierId = HierId + 1     FROM Nodes nds,          PG_Hierarchy     WHERE nds.NodeParentID = PG_Hierarchy.id    ) SELECT DISTINCT      F.Title AS [Functions],     SF.[Title] AS  [Subfunctions] FROM (SELECT * FROM PG_Hierarchy pg WHERE HierId = 2) F     LEFT JOIN     (SELECT * FROM PG_Hierarchy pg WHERE HierId = 3) SF         ON F.ID = SF.NodeParentID ORDER BY 1,          2",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="Provide process owner distribution for my project.",
                            SQLQuery="SELECT     O.Title     AS [Process Owner],     COUNT(N.ID) AS [Process Distribution] FROM     Nodes      N     LEFT JOIN         Owners O             ON N.OwnerId = O.ID WHERE     N.NodeTypeId = 3 GROUP BY     O.Title ",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List all sub-functions for Finance.",
                            SQLQuery=";WITH PG_Hierarchy AS (SELECT id,            Title,            NodeParentID,            TransactionStateID,            HierId = 1     FROM Nodes  nd   WHERE NodeParentID IS NULL     UNION ALL     SELECT nds.id,            nds.Title,            nds.NodeParentID,            nds.TransactionStateId,            HierId = HierId + 1     FROM Nodes nds,          PG_Hierarchy     WHERE nds.NodeParentID = PG_Hierarchy.id    ) SELECT DISTINCT      SF.[Title] AS  [Subfunctions] FROM (SELECT * FROM PG_Hierarchy pg WHERE HierId = 2) F     LEFT JOIN     (SELECT * FROM PG_Hierarchy pg WHERE HierId = 3) SF         ON F.ID = SF.NodeParentID WHERE F.Title='{FunctionName}' ORDER BY 1",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="List all details for processes and systems, third party agreements linkages.",
                            SQLQuery=";WITH GetSelectedFunction AS (SELECT id,            Title,            NodeParentID,            NodeTypeId,            HierId = 1     FROM Nodes nd    WHERE NodeParentID IS NULL     UNION ALL     SELECT nds.id,            nds.Title,            nds.NodeParentID,            nds.NodeTypeId,            HierId = HierId + 1     FROM Nodes nds,          GetSelectedFunction     where nds.NodeParentID = GetSelectedFunction.id    ),       PG_Hierarchy ([Functions], NodeParentID, ID, Title, Parent, ParentID, NodeTypeId) AS (SELECT ROOT.Title [Functions],            ROOT.NodeParentID,            ROOT.id,            ROOT.Title,            ROOT.Title,            ROOT.ID AS ParentID,            ROOT.NodeTypeId     FROM GetSelectedFunction ROOT     WHERE HierId = 2     UNION ALL     SELECT PARENT.[Functions],            CHILD.NodeParentID,            CHILD.ID,            CHILD.Title,            PARENT.TITLE,            PARENT.ID,            CHILD.NodeTypeId     FROM PG_Hierarchy PARENT,          Nodes CHILD     where PARENT.id = CHILD.NodeParentID    )  ,        ProcessCTE AS (SELECT DISTINCT         P.Functions,         P.Title Processes,         P.ID AS [ProcessID]     FROM     (SELECT * FROM PG_Hierarchy pg WHERE NodeTypeId = 2) SF         LEFT JOIN         (SELECT * FROM PG_Hierarchy pg WHERE NodeTypeId = 3) P             ON P.NodeParentID = SF.ID     WHERE P.Title IS NOT NULL    ) SELECT P.Processes,        ISNULL(S.Title, 'Not Assigned') AS [Systems],        ISNULL(TPA.Title, 'Not Assigned') AS [Third Party Agreements] FROM ProcessCTE P     LEFT JOIN NodesToThirdPartyAgreementsForEnablerTpa NTPA         ON P.ProcessID = NTPA.NodesId     LEFT JOIN ThirdPartyAgreements TPA         ON NTPA.ThirdPartyAgreementsId = TPA.ID     LEFT JOIN NodesToSystemsForEnablerSystems NSys         ON NSys.NodesId = P.ProcessID     LEFT JOIN Systems S         ON NSys.SystemsId = S.ID",
                            VisibleToAssistant=false, IsIncluded = false},


                        new SuggestionData { SuggestionText = "List the Assets and their linked processes.",
                             SQLQuery= "SELECT A.Title Assest,        P.Title LinkedProcess FROM Assets A     LEFT JOIN ProcessAssetLinks PA         ON PA.AssetId = A.ID     LEFT JOIN Nodes P         ON P.ID = PA.ProcessId     LEFT JOIN NodeTypes NType         ON P.NodeTypeId = NType.ID WHERE NType.Title = 'Process'",
                             VisibleToAssistant=true, IsIncluded = true},
                         new SuggestionData { SuggestionText = "Are there any end-to-end business processes in this op model?",
                             SQLQuery= "SELECT N.Title OpModel, BP.Title  EndToEndProcess FROM BusinessProcesses BP  LEFT JOIN Nodes N ON N.ID = BP.NodeId  WHERE N.NodeTypeId = 1",
                             VisibleToAssistant=true, IsIncluded = true},
                         new SuggestionData { SuggestionText = "In the Progress Tracker, what is the current status of HR?",
                             SQLQuery= ";WITH GetSelectedFunction AS (SELECT id,            Title,            NodeParentID,            HierId = 1     FROM Nodes nd    WHERE NodeParentID IS NULL           AND TransactionStateID = 8     UNION ALL     SELECT nds.id,            nds.Title,            nds.NodeParentID,            HierId = HierId + 1     FROM Nodes nds,          GetSelectedFunction     where nds.NodeParentID = GetSelectedFunction.id    ) SELECT N.Title [Function],        NTSS.Title AS [Field Status],        OPS.Title AS [Op Status] FROM NodeTrackers NT     LEFT JOIN NodeTrackerStatuses NTS         ON NTS.NodeTrackerID = NT.ID     JOIN     (SELECT * FROM GetSelectedFunction gsf WHERE HierId = 2 and Title = 'HR') N         ON N.ID = NT.NodeId     LEFT JOIN NodeTrackerStatusFields NTSS         ON NTSS.ID = NTS.NodeTrackerStatusFieldId     LEFT JOIN OpStatuses OPS         ON OPS.ID = NTS.NodeTrackerStatusStatusId",
                             VisibleToAssistant=false, IsIncluded = false},
                         new SuggestionData { SuggestionText = "In Finance, how many processes have multiple dispositions?",
                             SQLQuery= ";WITH GetSelectedFunction AS (SELECT id,            Title,            NodeParentID,            HierId = 1     FROM Nodes nd    WHERE NodeParentID IS NULL           AND TransactionStateID = 6     UNION ALL     SELECT nds.id,            nds.Title,            nds.NodeParentID,            HierId = HierId + 1     FROM Nodes nds,          GetSelectedFunction     where nds.NodeParentID = GetSelectedFunction.id    ),       PG_Hierarchy (NodeParentID, ID, Title, Parent, ParentID, NodeTypeId) AS (SELECT ROOT.NodeParentID,            ROOT.id,            ROOT.Title,            ROOT.Title,            ROOT.ID AS ParentID,            ROOT.NodeTypeId     FROM Nodes ROOT     WHERE ROOT.ID in (select ID from GetSelectedFunction gsf where HierId = 2 and Title = 'Finance' )     UNION ALL     SELECT CHILD.NodeParentID,            CHILD.ID,            CHILD.Title,            PARENT.TITLE,            PARENT.ID,            CHILD.NodeTypeId     FROM PG_Hierarchy PARENT,          Nodes CHILD     where PARENT.id = CHILD.NodeParentID    ) SELECT COUNT(*) AS [Process with multiple dispositions for Finance] FROM PG_Hierarchy pg WHERE NodeTypeId = 3       AND ID IN (                     SELECT NodeID                     FROM                     (                         SELECT NodeId,                                Count(DispositionID) As [Disposition Count]                         FROM NodesToDispositionsForDispositionNew   ndf     GROUP BY NodeId                         HAVING Count(DispositionID) > 1                     ) a                 )",
                             VisibleToAssistant=false, IsIncluded = false},
                         new SuggestionData { SuggestionText ="List down all processes with no Owners assigned.",
                             SQLQuery="SELECT     N.Title AS [List of Process which doesn''t have ownership] FROM     Nodes                 N     JOIN         TransactionStates T             ON T.ID = N.TransactionStateId WHERE     OwnerId IS NULL     AND N.NodeTypeId = 3",
                             VisibleToAssistant=true, IsIncluded = true},


                         new SuggestionData { SuggestionText ="List down all processes with more than one Disposition associated with them.", SQLQuery="SELECT N.Title AS [List of Processes with more than one Disposition] FROM Nodes N WHERE N.NodeTypeId = 3       AND N.ID IN ( SELECT NodeID   FROM   (    SELECT NodeId, COUNT(DispositionID) AS [Disposition Count]                           FROM NodesToDispositionsForDispositionNew    ndf                       GROUP BY NodeId                           HAVING COUNT(DispositionID) > 1                       ) a                   ) ", VisibleToAssistant=true, IsIncluded = true},
                         new SuggestionData { SuggestionText ="Can you please list all processes associated with Legal function?", SQLQuery=";WITH GetSelectedFunction AS (SELECT ID,            Title,            NodeParentID,            TransactionStateID,            HierId = 1     FROM Nodes  nd   WHERE NodeParentID IS NULL     UNION ALL     SELECT nds.ID,            nds.Title,            nds.NodeParentID,            nds.TransactionStateId,            HierId = HierId + 1     FROM Nodes nds,          GetSelectedFunction     where nds.NodeParentID = GetSelectedFunction.id    ),       PG_Hierarchy (NodeParentID, ID, Title, Parent, ParentID, TransactionStateID) AS (SELECT ROOT.NodeParentID,            ROOT.id,            ROOT.Title,            ROOT.Title,            ROOT.ID AS ParentID,            ROOT.TransactionStateID     FROM Nodes ROOT     WHERE ROOT.ID IN (                          SELECT ID                          FROM GetSelectedFunction         gsf                 WHERE HierId = 2                                AND Title = '{FunctionName}'                                AND TransactionStateId = 6                      )     UNION ALL     SELECT CHILD.NodeParentID,            CHILD.ID,            CHILD.Title,            PARENT.TITLE,            PARENT.ID,            CHILD.TransactionStateId     FROM PG_Hierarchy PARENT,          Nodes CHILD     WHERE PARENT.id = CHILD.NodeParentID    ) SELECT Title AS [List of Processes Associated with Legal Function] FROM PG_Hierarchy pgh ORDER BY ID,          title DESC ", VisibleToAssistant=false, IsIncluded = false},
                         new SuggestionData { SuggestionText ="Can you please list all processes associated with APAC?", SQLQuery="SELECT     N.Title AS [List of all Processes associated with APAC] FROM     Nodes       N     LEFT JOIN         Regions R             ON N.CountryRegionID = R.ID WHERE     n.NodeTypeId = 3     AND R.Title = '{Region}'", VisibleToAssistant=false, IsIncluded = false},
                         new SuggestionData { SuggestionText ="Can you please list all processes with same names across different functions?",
                             SQLQuery=";WITH  GetSelectedFunction AS  (  SELECT id,Title,NodeParentID, NodeTypeId, HierId = 1 FROM Nodes nd WHERE NodeParentID IS NULL  UNION ALL        SELECT    nds.id,nds.Title,nds.NodeParentID,  nds.NodeTypeId,  HierId = HierId+1 FROM Nodes nds, GetSelectedFunction   where nds.NodeParentID = GetSelectedFunction.id )  ,PG_Hierarchy([Functions],NodeParentID, ID,Title,Parent,ParentID,NodeTypeId) AS  (  SELECT ROOT.Title [Functions],ROOT.NodeParentID,ROOT.id,ROOT.Title,ROOT.Title,ROOT.ID AS ParentID, ROOT.NodeTypeId FROM GetSelectedFunction ROOT WHERE HierId = 2       UNION ALL        SELECT  PARENT.[Functions],CHILD.NodeParentID,CHILD.ID,CHILD.Title,PARENT.TITLE,PARENT.ID,CHILD.NodeTypeId  FROM PG_Hierarchy PARENT ,Nodes   CHILD  where  PARENT.id=CHILD.NodeParentID  ), ProcessCTE AS ( SELECT DISTINCT P.Functions, P.Title Processes FROM (SELECT * FROM PG_Hierarchy pg WHERE NodeTypeId = 2) SF 	LEFT JOIN (SELECT * FROM PG_Hierarchy pg WHERE NodeTypeId = 3) P ON P.NodeParentID = SF.ID WHERE P.Title IS NOT NULL  )   SELECT P.Functions, A.Processes  FROM (SELECT DISTINCT [Processes]  		FROM ProcessCTE 	pte	GROUP BY Processes  		HAVING COUNT(DISTINCT [Functions] ) > 1) A  	LEFT JOIN ProcessCTE P ON P.Processes = A.Processes ",
                        VisibleToAssistant=false, IsIncluded = false},
                         new SuggestionData { SuggestionText ="Can you please list all processes with same name?", SQLQuery="SELECT     [List of Processes with same name] FROM     (         SELECT             N.Title  AS [List of Processes with same name],             Count(1) AS [Repeat Count]         FROM             Nodes N         WHERE             N.NodeTypeId = 3         GROUP BY             N.Title         HAVING             COUNT(*) > 1     ) a ORDER BY     1 ", VisibleToAssistant=true, IsIncluded = true},
                         new SuggestionData { SuggestionText ="Can you please list the processes which are tagged as 'ParentCo' in Current state having disposition set as 'TSA'?", SQLQuery="SELECT N.Title AS [List of Processes tagged as ParentCo in Current State with Disposition set as TSA ] FROM Nodes N     LEFT JOIN NodesToOwnersForOwnerNew NTO         on N.ID = NTO.NodeId     LEFT JOIN Owners O         ON O.ID = NTO.OwnerId     LEFT JOIN NodeTypes NT         ON N.NodeTypeId = NT.ID     LEFT JOIN TransactionStates TS         ON N.TransactionStateId = TS.ID     LEFT JOIN NodesToDispositionsForDispositionNew NTD         ON N.ID = NTD.NodeId     LEFT JOIN Dispositions D         on NTD.DispositionId = D.ID WHERE NT.Title = 'Process'       AND TS.[Key] = 'CURRENT_STATE'       AND O.Title = 'Parent Co'       AND D.Title = 'TSA'", VisibleToAssistant=true, IsIncluded = true},
                         new SuggestionData { SuggestionText ="can you please list all systems which are not tagged to any process in Day 1 op model?",
                             SQLQuery="SELECT     Title AS [Systems not tagged in any process] FROM     Systems s WHERE     ID NOT IN (                   SELECT DISTINCT                       SystemsId                   FROM                       Nodes                               N                       LEFT JOIN                           NodesToSystemsForEnablerSystems NSS                               ON N.ID = NSS.NodesId  					  LEFT JOIN TransactionStates T ON T.ID = N.TransactionStateId                    WHERE T.Title= 'Day 1' AND                        N.NodeTypeId = 3               )",
                        VisibleToAssistant=true, IsIncluded = true},
                         new SuggestionData { SuggestionText ="Can you please provide of all systems based upon their type?", SQLQuery="SELECT     ISNULL(ST.Title, 'System Type Not Assigned') AS [SystemsType],     S.Title                                      AS [Systems] FROM     Systems         S     LEFT JOIN         SystemTypes ST             ON S.TypeId = ST.ID", VisibleToAssistant=true, IsIncluded = true},
                         new SuggestionData { SuggestionText ="Which function has the highest number of multi disposition processes?",
                             SQLQuery=";WITH  GetSelectedFunction AS  (  SELECT id,Title,NodeParentID, NodeTypeId, HierId = 1 FROM Nodes nd  WHERE NodeParentID IS NULL  UNION ALL        SELECT    nds.id,nds.Title,nds.NodeParentID,  nds.NodeTypeId,  HierId = HierId+1 FROM Nodes nds, GetSelectedFunction   where nds.NodeParentID = GetSelectedFunction.id )  ,PG_Hierarchy([Functions],NodeParentID, ID,Title,Parent,ParentID,NodeTypeId) AS  (  SELECT ROOT.Title [Functions],ROOT.NodeParentID,ROOT.id,ROOT.Title,ROOT.Title,ROOT.ID AS ParentID, ROOT.NodeTypeId FROM GetSelectedFunction ROOT WHERE HierId = 2       UNION ALL        SELECT  PARENT.[Functions],CHILD.NodeParentID,CHILD.ID,CHILD.Title,PARENT.TITLE,PARENT.ID,CHILD.NodeTypeId  FROM PG_Hierarchy PARENT ,Nodes   CHILD  where  PARENT.id=CHILD.NodeParentID  ), ProcessCTE AS ( SELECT DISTINCT P.Functions, P.Title Processes, P.ID  FROM (SELECT * FROM PG_Hierarchy pg WHERE NodeTypeId = 2) SF LEFT JOIN (SELECT * FROM PG_Hierarchy pg WHERE NodeTypeId = 3) P ON P.NodeParentID = SF.ID WHERE P.Title IS NOT NULL  )   SELECT Top 1 [Functions] AS [Function with Highest Number for Multiple Deposition]  FROM ProcessCTE p WHERE ID IN ( SELECT NodeID FROM ( SELECT NodeId,    Count(DispositionID) As [Disposition Count] FROM NodesToDispositionsForDispositionNew ndn GROUP BY NodeId HAVING Count(DispositionID) > 1 ) a ) GROUP BY [Functions] ORDER BY  COUNT(*) DESC",
                        VisibleToAssistant=false, IsIncluded = false},
                         new SuggestionData { SuggestionText ="which function has the highest number of 'Live without'?",
                             SQLQuery=";WITH  GetSelectedFunction AS  (  SELECT id,Title,NodeParentID, NodeTypeId, HierId = 1 FROM Nodes n   WHERE NodeParentID IS NULL   UNION ALL         SELECT    nds.id,nds.Title,nds.NodeParentID,  nds.NodeTypeId,  HierId = HierId+1 FROM Nodes nds, GetSelectedFunction   WHERE nds.NodeParentID = GetSelectedFunction.id )  ,PG_Hierarchy([Functions],NodeParentID, ID,Title,Parent,ParentID,NodeTypeId) AS  (  SELECT ROOT.Title [Functions],ROOT.NodeParentID,ROOT.id,ROOT.Title,ROOT.Title,ROOT.ID AS ParentID, ROOT.NodeTypeId FROM GetSelectedFunction ROOT WHERE HierId = 2    UNION ALL         SELECT  PARENT.[Functions],CHILD.NodeParentID,CHILD.ID,CHILD.Title,PARENT.TITLE,PARENT.ID,CHILD.NodeTypeId  FROM PG_Hierarchy PARENT ,Nodes   CHILD  WHERE  PARENT.id=CHILD.NodeParentID  ), ProcessCTE AS (  SELECT DISTINCT P.Functions, P.Title Processes, P.ID  FROM (SELECT * FROM PG_Hierarchy pg WHERE NodeTypeId = 2) SF 	LEFT JOIN (SELECT * FROM PG_Hierarchy gg WHERE NodeTypeId = 3) P ON P.NodeParentID = SF.ID WHERE P.Title IS NOT NULL  )   SELECT Top 1 [Functions] AS [Function with Highest Number of Live Without]  FROM ProcessCTE pp WHERE ID IN (	SELECT NodeId 				FROM NodesToDispositionsForDispositionNew ND  				LEFT JOIN Dispositions D ON D.ID = DispositionID  				WHERE D.Title = 'Live without'			 				) GROUP BY [Functions] ORDER BY  COUNT(*) DESC",
                             VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="Which function has the highest number of processes tagged to them? and how many?",
                            SQLQuery=";WITH  GetSelectedFunction AS  (  SELECT id,Title,NodeParentID, NodeTypeId, HierId = 1 FROM Nodes nd  WHERE NodeParentID IS NULL  UNION ALL        SELECT    nds.id,nds.Title,nds.NodeParentID,  nds.NodeTypeId,  HierId = HierId+1 FROM Nodes nds, GetSelectedFunction   where nds.NodeParentID = GetSelectedFunction.id )  ,PG_Hierarchy([Functions],NodeParentID, ID,Title,Parent,ParentID,NodeTypeId) AS  (  SELECT ROOT.Title [Functions],ROOT.NodeParentID,ROOT.id,ROOT.Title,ROOT.Title,ROOT.ID AS ParentID, ROOT.NodeTypeId FROM GetSelectedFunction ROOT WHERE HierId = 2       UNION ALL        SELECT  PARENT.[Functions],CHILD.NodeParentID,CHILD.ID,CHILD.Title,PARENT.TITLE,PARENT.ID,CHILD.NodeTypeId  FROM PG_Hierarchy PARENT ,Nodes   CHILD  where  PARENT.id=CHILD.NodeParentID  ), ProcessCTE AS ( SELECT DISTINCT P.Functions, P.Title Processes, P.ID  FROM (SELECT * FROM PG_Hierarchy pp WHERE NodeTypeId = 2) SF 	LEFT JOIN (SELECT * FROM PG_Hierarchy pp WHERE NodeTypeId = 3) P ON P.NodeParentID = SF.ID WHERE P.Title IS NOT NULL  )   SELECT Top 1 [Functions] AS [Function with Highest Number of Processes tagged to them] , COUNT(*)  [No of Processes] 				FROM ProcessCTE 	ppt	GROUP BY [Functions] 				ORDER BY  COUNT(*) DESC    ",
                        VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="Which function has the highest number of enablers tagged to them? and how many?", SQLQuery=";WITH PG_Hierarchy AS (SELECT id,            Title,            NodeParentID,            TransactionStateID,            HierId = 1     FROM Nodes   n  WHERE NodeParentID IS NULL     UNION ALL     SELECT nds.id,            nds.Title,            nds.NodeParentID,            nds.TransactionStateId,             HierId = HierId + 1     FROM Nodes nds,          PG_Hierarchy     WHERE nds.NodeParentID = PG_Hierarchy.id    ),       ProcessCTE AS (SELECT DISTINCT          F.Title AS [Functions],         f.id AS FunctionID     FROM     (SELECT * FROM PG_Hierarchy pp WHERE HierId = 2) F         LEFT JOIN         (SELECT * FROM PG_Hierarchy gg WHERE HierId = 3) SF             ON F.ID = SF.NodeParentID    ) SELECT Top 1     Functions as [Function with Highest Number of Enablers],     [Enablers Count] FROM (     SELECT P.Functions,            COUNT(DISTINCT TPA.ID) + COUNT(DISTINCT S.ID) + COUNT(DISTINCT Asset.ID) + COUNT(DISTINCT Roles.ID) AS [Enablers Count]     FROM ProcessCTE P         LEFT JOIN NodesToThirdPartyAgreementsForEnablerTpa NTPA           ON P.FunctionID = NTPA.NodesId         LEFT JOIN ThirdPartyAgreements TPA             ON NTPA.ThirdPartyAgreementsId = TPA.ID          LEFT JOIN NodesToSystemsForEnablerSystems NSys              ON NSys.NodesId = P.FunctionID         LEFT JOIN Systems S             ON NSys.SystemsId = S.ID         LEFT JOIN NodesToAssetsForEnablerAssets NAsset              ON NAsset.NodesId = P.FunctionID         LEFT JOIN Assets Asset             ON Asset.ID = NAsset.AssetsId          LEFT JOIN NodesToRolesForEnablerRoles NRole --Roles              ON NAsset.NodesId = P.FunctionID         LEFT JOIN OrgRolesMaster Roles             ON Roles.ID = NRole.RolesId     GROUP BY P.Functions ) A ORDER BY [Enablers Count] DESC", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="Which process within Finance has been updated most recently and what was the updates?",
                            SQLQuery=";WITH  GetSelectedFunction AS  (  SELECT id,Title,NodeParentID,  HierId = 1 FROM Nodes n WHERE NodeParentID IS NULL    UNION ALL        SELECT    nds.id,nds.Title,nds.NodeParentID,    HierId = HierId+1 FROM Nodes nds, GetSelectedFunction   where nds.NodeParentID = GetSelectedFunction.id )  ,PG_Hierarchy(NodeParentID, ID,Title,Parent,ParentID,NodeTypeId) AS  (  SELECT ROOT.NodeParentID,ROOT.id,ROOT.Title,ROOT.Title,ROOT.ID AS ParentID, ROOT.NodeTypeId FROM Nodes ROOT   WHERE ROOT.ID in (select ID from GetSelectedFunction g where HierId=2 and Title='Finance & Accounting')       UNION ALL        SELECT  CHILD.NodeParentID,CHILD.ID,CHILD.Title,PARENT.TITLE,PARENT.ID,CHILD.NodeTypeId  FROM PG_Hierarchy PARENT ,Nodes   CHILD  where  PARENT.id=CHILD.NodeParentID  )   SELECT PG.Title, OldValue, NewValue  FROM PG_Hierarchy PG  JOIN (SELECT PL.ObjectID, OldValue, NewValue 			FROM OperatingModelActivityLog PL 			WHERE Object = 'Process' AND Title = 'Updated' AND PL.Modified = ( 			SELECT  Max(Modified) Modified FROM OperatingModelActivityLog  	op		WHERE ObjectID IN (SELECT ID FROM PG_Hierarchy PG WHERE NodeTypeId=3 )  			AND Object = 'Process' AND Title = 'Updated')) A ON A.ObjectID = PG.ID",
                        VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="How many processes have been associated with a workplan item?", SQLQuery="SELECT     N.Title AS [List of Process Associated with Workplan] FROM     Nodes                       N     LEFT JOIN         NodesToWorkPlansForTask NWP             ON N.ID = NWP.NodeId     LEFT JOIN         WorkPlan                WP             ON NWP.WorkPlanId = WP.ID WHERE     N.NodeTypeId = 3", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="How many processes have 2 owners or dispositions? ", SQLQuery="SELECT COUNT(DISTINCT n.ID) AS [No of Process having 2 owners or Dispositions] FROM Nodes n LEFT JOIN (     SELECT NodeId     FROM NodesToDispositionsForDispositionNew  nn   GROUP BY NodeId     HAVING COUNT(DispositionID) = 2 ) d ON n.ID = d.NodeId LEFT JOIN (     SELECT NodeID     FROM NodesToOwnersForOwnerNew  no   GROUP BY NodeID     HAVING COUNT(OwnerId) = 2 ) o ON n.ID = o.NodeID WHERE n.NodeTypeId = 3 AND (d.NodeId IS NOT NULL OR o.NodeID IS NOT NULL)", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="How many systems are dispositoned Rebuild?", SQLQuery="SELECT  	COUNT(SD.SystemId) [No of Systems are dispositioned rebuild] FROM  Dispositions D 	JOIN [SystemsToDispositionsForDispositionDay1New] SD ON SD.DispositionId = D.ID WHERE D.Title = 'Rebuild'", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="Provide a count of all processes by owner.", SQLQuery="SELECT O.Title [Owners], COUNT(N.ID) [No of Processes]  FROM Nodes N  LEFT JOIN NodeTypes NT ON N.NodeTypeId = NT.ID  LEFT JOIN NodesToOwnersForOwnerNew NOS ON NOS.NodeId = N.ID  LEFT JOIN Owners O ON O.ID = NOS.OwnerId  WHERE NT.Title = 'Process'  GROUP BY O.Title", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="Show me the count of dispositions in Day 1 model by assigned region.", SQLQuery="SELECT  	R.Title Regions 	, COUNT(D.DispositionId) [Count of Disposition]  FROM NodesToDispositionsForDispositionNew D     JOIN Nodes N ON D.NodeId = N.ID 	JOIN TransactionStates S ON S.ID = N.TransactionStateId  	LEFT JOIN NodeTypes NT ON NT.ID = N.NodeTypeId  	LEFT JOIN Regions R ON R.ID = N.CountryRegionID  WHERE NT.Title = 'Process'  	AND S.[Key] = 'DAY_ONE' GROUP BY R.Title", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List all processes that do not have an owner assigned.", SQLQuery="SELECT N.Title [Processes with no owner assigned] FROM Nodes N  LEFT JOIN NodeTypes NT ON N.NodeTypeId = NT.ID WHERE NT.Title = 'Process'    AND N.ID NOT IN (     SELECT DISTINCT NTO.NodeId     FROM Nodes N1     LEFT JOIN NodesToOwnersForOwnerNew NTO ON NTO.NodeId = N1.ID 	WHERE NTO.NodeId is not null   )", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="Which teams have processes that are disposition 'Unidentified'?", SQLQuery="SELECT PT.Title AS [List of Teams with Disposition set as Unidentified] FROM Nodes N     LEFT JOIN NodeTypes NT         ON N.NodeTypeId = NT.ID 	LEFT JOIN  NodesToProjectTeamsForProjectTeam NP 	    ON N.ID = NP.NodesId  	LEFT JOIN ProjectTeams PT 	    ON PT.ID = NP.ProjectTeamsId      LEFT JOIN NodesToDispositionsForDispositionNew NTD         ON N.ID = NTD.NodeId     LEFT JOIN Dispositions D         on NTD.DispositionId = D.ID WHERE NT.Title = 'Process'       AND D.Title = 'Unidentified'", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List all processes with total headcount greater than 0.", SQLQuery="SELECT N.Title [Processes with total headcount greater than 0] FROM Nodes N     LEFT JOIN vwHeadcount H         ON H.NodeId = N.ID     LEFT JOIN Nodetypes NT         ON NT.ID = N.NodeTypeId GROUP BY N.Title HAVING SUM(ISNULL(H.TotalHeadCount, 0)) > 0", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List all Facilities in North America that are leased or owned.", SQLQuery="SELECT F.Title [Facilities in North America that are leased or owned]   FROM Facilities F  LEFT JOIN FacilityOccupancyTypes FT ON FT.ID = F.FacilityOccupancyTypeID  LEFT JOIN Countries C ON C.ID = F.CountryID  LEFT JOIN Regions R ON R.ID = C.CountryRegionID WHERE FT.Title IN ('Leased', 'Owned') AND R.Title = 'North America'", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="How many processes have a TPA assigned to them? ", SQLQuery="SELECT COUNT(N.ID) [No of Proccesses to which TPA is assigned] FROM NodesToThirdPartyAgreementsForEnablerTpa NTP  INNER JOIN Nodes N ON N.ID = NTP.NodesId  LEFT JOIN NodeTypes NT ON N.NodeTypeId = NT.ID WHERE NT.Title = 'Process'", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="Show me all enablers that have a linked process.", SQLQuery="SELECT Enabler [Enabler with linked processes] FROM( SELECT DISTINCT A.Title Enabler 	 FROM Nodes N LEFT JOIN NodeTypes NTT ON NTT.ID = N.NodeTypeId  INNER JOIN [NodesToAssetsForEnablerAssets] NA ON NA.NodesId = N.ID INNER JOIN [Assets] A ON A.ID = NA.AssetsId  WHERE NTT.Title = 'Process'    UNION ALL  SELECT DISTINCT F.Title Enabler FROM Nodes N LEFT JOIN NodeTypes NTT ON NTT.ID = N.NodeTypeId  INNER JOIN [NodesToFacilitiesForEnablerFacilities] NF ON NF.NodesId = N.ID INNER JOIN [Facilities] F ON F.ID = NF.FacilitiesId WHERE NTT.Title = 'Process'    UNION ALL  SELECT DISTINCT S.Title Enabler  FROM Nodes N  LEFT JOIN NodeTypes NTT ON NTT.ID = N.NodeTypeId  INNER JOIN [NodesToSystemsForEnablerSystems] NS ON NS.NodesId = N.ID INNER JOIN [Systems] S ON S.ID = NS.SystemsId WHERE NTT.Title = 'Process'    UNION ALL  SELECT DISTINCT T.Title Enabler	 FROM Nodes N  LEFT JOIN NodeTypes NTT ON NTT.ID = N.NodeTypeId  INNER JOIN [NodesToThirdPartyAgreementsForEnablerTpa] NT ON NT.NodesId = N.ID INNER JOIN [ThirdPartyAgreements] T ON T.ID = NT.ThirdPartyAgreementsId  WHERE NTT.Title = 'Process'   ) A", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List all processes that have the disposition TSA.", SQLQuery="SELECT N.Title AS [List of Processes with Disposition set as TSA ] FROM Nodes N     LEFT JOIN NodeTypes NT         ON N.NodeTypeId = NT.ID     LEFT JOIN NodesToDispositionsForDispositionNew NTD         ON N.ID = NTD.NodeId     LEFT JOIN Dispositions D         on NTD.DispositionId = D.ID WHERE NT.Title = 'Process'       AND D.Title = 'TSA'", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="How many processes are Live without? ", SQLQuery="SELECT COUNT(N.ID) AS [No of Processes are Live Without]  FROM Nodes N  LEFT JOIN NodeTypes NT ON N.NodeTypeId = NT.ID WHERE NT.Title = 'Process' AND N.ID IN (	SELECT NodeId 				FROM NodesToDispositionsForDispositionNew ND  				LEFT JOIN Dispositions D ON D.ID = DispositionID  				WHERE D.Title = 'Live without'			 				) ", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List out the systems being used by Project Team and Process Group.", SQLQuery="SELECT     Title AS [Systems being used by Project Team and Process Group] FROM     Systems s WHERE  ID IN (                   SELECT DISTINCT                       SystemsId                   FROM                       Nodes N                       LEFT JOIN NodesToSystemsForEnablerSystems NSS                        ON N.ID = NSS.NodesId  					  LEFT JOIN  NodesToProjectTeamsForProjectTeam NP 					  ON N.ID = NP.NodesId  					  LEFT JOIN NodeTypes NT ON NT.ID = N.NodeTypeId                    WHERE  NT.Title IN ('ProcessGroup')               )	", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="Which process groups are not started on Followup Calls for Current State?", SQLQuery="SELECT N.Title [Process groups are not started on Followup Calls for Current State] FROM Nodes N     LEFT JOIN Nodetypes NT         ON NT.ID = N.NodeTypeId     LEFT JOIN NodeTrackers NTC         ON NTC.NodeID = N.ID     LEFT JOIN NodeTrackerStatuses NTS         ON NTS.NodeTrackerID = NTC.ID     LEFT JOIN TransactionStates T         ON T.ID = N.TransactionStateID WHERE N.NodeOnTracker = 1       AND NT.Title = 'Process Group'       AND T.[Key] = 'CURRENT_STATE'       AND N.ID NOT IN (                           SELECT N.ID ProcessGroupID                           FROM Nodes N                               LEFT JOIN Nodetypes NT                                   ON NT.ID = N.NodeTypeId                               LEFT JOIN NodeTrackers NTC                                   ON NTC.NodeID = N.ID                               LEFT JOIN NodeTrackerStatuses NTS                                   ON NTS.NodeTrackerID = NTC.ID                               LEFT JOIN TransactionStates T                                   ON T.ID = N.TransactionStateID                           WHERE N.NodeOnTracker = 1                                 AND NT.Title = 'Process Group'                                 AND T.[Key] = 'CURRENT_STATE'                                 AND NTS.Title = 'FollowUp Call'                       )", VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="Who is the Client owner for HR?", SQLQuery=";WITH GetSelectedFunction AS (SELECT id,            Title,            NodeParentID,            HierId = 1     FROM Nodes n    WHERE NodeParentID IS NULL      UNION ALL     SELECT nds.id,            nds.Title,            nds.NodeParentID,            HierId = HierId + 1     FROM Nodes nds,          GetSelectedFunction     where nds.NodeParentID = GetSelectedFunction.id    ) SELECT O.Title [Client Owner for HR] FROM GetSelectedFunction N 	LEFT JOIN NodesToOwnersForOwnerNew NOS ON NOS.NodeId = N.ID  	LEFT JOIN Owners O ON O.ID = NOS.OwnerId  WHERE N.HierId = 2 AND N.Title = 'HR'", VisibleToAssistant=false, IsIncluded = false},
                    }
                },
                new SuggestionMatrix
                {
                    Source = Constants.Source.ProjectData.Key,
                    AppAfinity = Constants.App.TSA,
                    Suggestions = new List<SuggestionData>
                    {
                        new SuggestionData { SuggestionText = "Show me the count of TSAs by function.",
                        SQLQuery = "SELECT F.Title, Count(1) as 'Number Of TSAs' from TSAItems T LEFT JOIN Functions F on F.ID = T.FunctionId Group By F.ID, F.Title "},
                        new SuggestionData { SuggestionText = "Show me the count of TSAs by sub function.",
                        SQLQuery = "SELECT SF.Title, Count(1) as 'Number Of TSAs' from TSAItems T LEFT JOIN SubFunctions SF on SF.ID = T.SubFunctionId where T.SubFunctionId IS NOT NULL Group By SF.ID, SF.Title "},
                        new SuggestionData { SuggestionText = "Give me the list of TSAs by Provider.",
                        SQLQuery = "SELECT LE.Title, Count(1) as 'Number Of TSAs' from TSAItems T LEFT JOIN LegalEntities LE on LE.ID = T.ProviderLegalEntityId Group By LE.ID, LE.Title "},
                        new SuggestionData { SuggestionText = "Give me the list of TSAs by Receiver.",
                        SQLQuery = "SELECT LE.Title, Count(1) as 'Number Of TSAs' from TSAItems T LEFT JOIN LegalEntities LE on LE.ID = T.ReceiverLegalEntityId Group By LE.ID, LE.Title "},
                        new SuggestionData { SuggestionText = "Can you provide me list of TSAs by phases?",
                        SQLQuery = "SELECT P.Title, T.Title from TSAItems T LEFT JOIN TSAPhases P on P.ID = T.PhaseId Group By P.ID, P.Title "},
                        new SuggestionData { SuggestionText = "Show me the breakdown of TSAs by duration.",
                        SQLQuery = "SELECT T.Title, T.Duration as 'Duration in Month' from TSAItems T where T.Duration is not null "},
                        new SuggestionData { SuggestionText = "How many TSAs does each team have?",
                        SQLQuery = "SELECT PT.Title, Count(1) as 'Number Of TSAs' from TSAItems T LEFT JOIN ProjectTeams PT on PT.ID = T.ProjectTeamId Group by PT.ID, PT.Title "},
                        new SuggestionData { SuggestionText ="List the number of TSAs across different phases.",
                            SQLQuery="SELECT    TST.Title as [Phase],    COUNT(TC.ID) AS [# TSAs across different phases] FROM    TSAItems TC    LEFT JOIN TSAPhases TST ON TC.PhaseID = TST.ID  Group BY    TST.Title ",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="How many pending TSA items do I have?",
                            SQLQuery="SELECT    T.Title PendingTSAItems  FROM    TSAItems T    JOIN TSAStatuses TS ON T.TSAItemTSAStatusId = TS.ID  WHERE    T.AuthorId = '{Username}'    AND TS.[key] = 'ACTIVE' ",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="In Cost Tracking, how is my billing periods setup?",
                            SQLQuery="SELECT    Title as [Billing Period Name],    DeadlineDate as [Contribution Deadlines]  FROM    TSABillingPeriods tb",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="What are the different TSA phases in my project?",
                            SQLQuery=" SELECT    Title AS [TSA Phases]  FROM TSAPhases tp",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List the TSA service locations in my project.",
                            SQLQuery="SELECT    L.ServiceLocation  FROM    TSAItems T    JOIN LegalEntities L ON T.ProviderLegalEntityId = L.ID where  L.ServiceLocation is not null UNION  SELECT    L.ServiceLocation  FROM    TSAItems T    JOIN LegalEntities L ON T.ReceiverLegalEntityId = L.ID   where  L.ServiceLocation is not null ",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="List the TSAs for the Finance fucntion with their status.",
                            SQLQuery="SELECT     TSA.Title AS [TSAs],     s.Title   AS [TSA Statuses] FROM     TSAItems        TSA     LEFT JOIN         TSAStatuses S             ON TSA.TSAItemTSAStatusId = S.ID     LEFT JOIN         Functions   F             ON TSA.FunctionId = F.ID WHERE     F.Title = '{FunctionName}'",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText = "List the TSAs that I need to review.",
                            SQLQuery= "DECLARE @UserProfiles int; SELECT    @UserProfiles = ID  FROM    UserProfiles up  WHERE    EMail = '{Username}' ; WITH TEMPCTE AS (   SELECT      FunctionId,      SubFunctionId    FROM      TSAReviewers  tr  WHERE      ProviderApproverId = @UserProfiles      OR RecipientApproverId = @UserProfiles )  SELECT    TSA.Title as [List of TSA to be reviewed] FROM    TSAItems TSA    JOIN TEMPCTE ON TSA.FunctionId = TEMPCTE.FunctionId    AND tsa.SubFunctionId = TEMPCTE.SubFunctionId    JOIN TSAPhases TP ON TSA.PhaseId = TP.ID  WHERE    TP.[Key] IN ('ALIGNMENT', 'APPROVAL'); ",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="What is the default currency setting?",
                            SQLQuery="SELECT   Title DefaultCurrency FROM  TSACurrencies tc WHERE CurrencyCode ='{CurrencyCode}'",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="List the exchange rates we setup for the default currency on my project.",
                            SQLQuery="SELECT   CurrencyExchangeRateToUSD  FROM  TSACurrencies t WHERE CurrencyCode ={CurrencyCode}",
                            VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="In Reviewer Assignments, what functions require to be configured properly?",
                            SQLQuery="SELECT    DISTINCT F.Title as [Functions To Be Configured] FROM    TSAReviewers TR    LEFT JOIN Functions F on F.ID = TR.FunctionId ",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="In Reviewer Assignments, what sub-functions need to be configured for my project?",
                            SQLQuery="SELECT    DISTINCT SF.Title as [SubFunctions To Be Configured] FROM    TSAReviewers TR    LEFT JOIN SubFunctions SF on SF.ID = TR.SubFunctionId ",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="In Billing Periods, have we setup email reminder beofre deadline?",
                            SQLQuery="SELECT CASE WHEN SUM(DeadlineReminder) > 0 THEN 'Yes, email reminder before the deadline is setup' ELSE 'No, email reminder before the deadline is setup' END AS [Send an email reminder before the deadline?] FROM( SELECT     Title,     CAST( DeadlineReminder AS INT) DeadlineReminder FROM     TSABillingPeriods tb WHERE     DeadlineReminder = 1) A",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List the billing periods with their Contribution deadlines.",
                            SQLQuery="SELECT     Title        AS [Billing Period Name],     DeadlineDate AS [Contribution Deadlines] FROM     TSABillingPeriods t",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="Are we not notifying data contributors by email for any billing periods?",
                            SQLQuery="SELECT CASE WHEN SUM(SendEmailImmediately) > 0 THEN 'Yes, notifying data contributors by email ' ELSE 'No, not notifying data contributors by email ' END AS [Notify data contributors by email ?] FROM( SELECT     Title                AS [Billing Period Name],     CAST(SendEmailImmediately AS INT) SendEmailImmediately FROM     TSABillingPeriods tb WHERE     SendEmailImmediately = 1) A",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="What my TSA costs by  function?",
                            SQLQuery="SELECT     f.title   AS [Functions],     (t.TSAItemFTECostForServiceDurationUSD + t.MarkupOnFTECostUSD + t.ExternalMaterialCostUSD) AS [TSA Costs] FROM     TSAItems        AS t     LEFT OUTER JOIN         TSAStatuses s             ON t.tsaitemtsastatusid = s.id     LEFT OUTER JOIN         Functions   f             ON t.FunctionId = f.id WHERE     s.title <> 'Canceled'     AND t.Duration IS NOT NULL",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="How many TSAs left to sign?",
                            SQLQuery="SELECT     TSA.Title AS [TSAs] FROM     TSAItems        TSA     LEFT JOIN         TSAStatuses S             ON TSA.TSAItemTSAStatusId = S.ID WHERE          S.Title<>'{TSAStatus}'", VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="List number of signed TSAs by function.",
                            SQLQuery="SELECT     COUNT(TSA.ID) AS [# TSAs signed by Function],     F.Title       AS Functions FROM     TSAItems        TSA     LEFT JOIN         TSAStatuses S             ON TSA.TSAItemTSAStatusId = S.ID     LEFT JOIN         Functions   F             ON TSA.FunctionId = F.ID WHERE     S.Title = '{TSAStatus}' GROUP BY     F.Title", VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="Break down the total TSA cost for this year by FTE and Non-FTE cost.",
                            SQLQuery="SELECT     [year]                               AS [By Year],     ROUND(SUM(fte_cost_per_month), 2)    AS [TSA FTE Cost for Selected Year],     ROUND(SUM(nonfte_cost_per_month), 2) AS [TSA Non-FTE Cost for Selected Year] FROM     vwTSACostWaterfall wf WHERE      [year] = '{Year}' GROUP BY     [year]", VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="List out stages that are preconfigured on this instance for TSA lifecycle.",
                            SQLQuery="SELECT     Title AS [TSA Stages] FROM     TSAPhases t ORDER BY     Ordinal", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="How many TSA have been identified?",
                            SQLQuery="SELECT Stg.Title AS [Stage Name],        COUNT(TSA.ID) AS [# TSAs Identified] FROM TSAItems TSA     LEFT JOIN TSAPhases Stg         ON TSA.PhaseId = Stg.ID WHERE Stg.[Key] = 'IDENTIFICATION' GROUP BY Stg.Title", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List out TSAs that have duration for more than 18 months.",
                            SQLQuery="SELECT     Title AS [TSAs that have duration for more than 18 months] FROM     TSAItems ts WHERE     Duration > 18", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List out TSAs are that are ready to be approved.",
                            SQLQuery="SELECT     TSA.Title AS [TSAs that are ready to be approved] FROM     TSAItems      TSA     LEFT JOIN         TSAPhases Stg             ON TSA.PhaseId = Stg.ID WHERE     Stg.[Key] IN ( 'ALIGNMENT','APPROVAL') ", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="What is the total of TSA cost by function?",
                            SQLQuery="SELECT     f.title  AS [Functions],     SUM((t.TSAItemFTECostForServiceDurationUSD + t.MarkupOnFTECostUSD + t.ExternalMaterialCostUSD) )AS [TSA Costs] FROM     TSAItems        AS t     LEFT OUTER JOIN         TSAStatuses s             ON t.tsaitemtsastatusid = s.id     LEFT OUTER JOIN         Functions   f             ON t.FunctionId = f.id WHERE     s.title <> 'Canceled'     AND t.Duration IS NOT NULL GROUP BY  f.title", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List out TSA with Open risks.",
                            SQLQuery="SELECT TSA.Title AS [TSAs with Open Risks] FROM TSAItems TSA     LEFT JOIN RisksAndIssues RI         ON TSA.ID = RI.TSAItemId     LEFT JOIN Statuses S         ON RI.ProgressId = S.ID WHERE S.[Key] NOT IN ( 'COMPLETED', 'CLOSED', 'CANCELLED', 'DELETED', 'REJECTED',  'ON_HOLD')", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="Who is the buy side reviewer for finance TSAs?",
                            SQLQuery="SELECT UP.Title AS [Buyer Side Reviewer for Finance TSAs] FROM TSAReviewers TRev     LEFT JOIN Functions F         ON TRev.FunctionId = F.ID     LEFT JOIN UserProfiles UP         ON TRev.RecipientApproverID = UP.ID WHERE F.Title ='{FunctionName}'", VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="Who is the sell side reviewer for finance TSAs?",
                            SQLQuery="SELECT UP.Title AS [Buyer Side Reviewer for Finance TSAs] FROM TSAReviewers TRev     LEFT JOIN Functions F         ON TRev.FunctionId = F.ID     LEFT JOIN UserProfiles UP         ON TRev.ProviderApproverId = UP.ID WHERE F.Title ='{FunctionName}'", VisibleToAssistant=false, IsIncluded = false},

                        new SuggestionData { SuggestionText ="Who is the approver for finance TSAs?",
                            SQLQuery="SELECT UP.Title AS [Approver for Finance TSAs] FROM TSAReviewers TRev     LEFT JOIN Functions F         ON TRev.FunctionId = F.ID     LEFT JOIN UserProfiles UP         ON TRev.RecipientApproverID = UP.ID WHERE F.Title = '{FunctionName}'  UNION   SELECT UP.Title AS [Approver for Finance TSAs] FROM TSAReviewers TRev     LEFT JOIN Functions F         ON TRev.FunctionId = F.ID     LEFT JOIN UserProfiles UP         ON TRev.ProviderApproverId = UP.ID WHERE F.Title ='{FunctionName}'", VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="List out TSAs with behind schedule tasks linked.",
                            SQLQuery="SELECT TSA.Title AS [TSAs with Behind Schedule Tasks Linked] FROM TSAItems TSA     LEFT JOIN Workplan WP         ON TSA.ID = WP.TSAItemId     LEFT JOIN Statuses S         ON WP.ProgressId = S.ID WHERE WP.WorkPlanTaskType = 'Task'       AND S.[Key] = 'BEHIND_SCHEDULE'", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="Show me the count and cost of reverse TSAs by function.",
                            SQLQuery="SELECT f.title AS [Functions],        COUNT(t.ID) AS [TSAs Count],        (SUM(t.TSAItemFTECostForServiceDurationUSD) + SUM(t.MarkupOnFTECostUSD) + SUM(t.ExternalMaterialCostUSD)) AS [TSAs Costs] FROM TSAItems AS t     LEFT OUTER JOIN TSAStatuses s         ON t.tsaitemtsastatusid = s.id     LEFT OUTER JOIN Functions f         ON t.FunctionId = f.id     LEFT OUTER JOIN TSADay1Dispositions TSADisp         ON t.TSADay1DispositionId = TSADisp.ID WHERE TSADisp.Title = 'rTSA (reverse TSA)'       AND s.title <> 'Canceled'       AND t.Duration IS NOT NULL GROUP BY f.title", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="How many items are in the allignment phase for IT?",
                            SQLQuery="SELECT COUNT(TSA.ID) AS [TSA Items in Alignment phase for IT] FROM TSAItems TSA LEFT JOIN TSAPhases Stg         ON TSA.PhaseId = Stg.ID     LEFT JOIN Functions F         ON TSA.FunctionId = F.ID WHERE Stg.[Key] = 'ALIGNMENT'       AND F.Title = '{FunctionName}'", VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="How many items in the repository have been modified in the last 7 days?",
                            SQLQuery="SELECT COUNT(TSA.ID) AS [# TSA items in the repository which have been modified in the last 7 days] FROM TSAItems TSA     LEFT JOIN TSAStatuses S         ON TSA.TSAItemTSAStatusId = S.ID WHERE S.[Key] <> 'CANCELED'       AND CAST(TSA.Modified AS DATE)       BETWEEN CAST(GETDATE() - 7 AS DATE) AND CAST(GETDATE() AS DATE) ", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="How many new items s in the repository have been created in the last 5 days?",
                            SQLQuery="SELECT COUNT(TSA.ID) AS [# TSA items in the repository which have been created in the last 5 days] FROM TSAItems TSA     LEFT JOIN TSAStatuses S         ON TSA.TSAItemTSAStatusId = S.ID WHERE S.[Key] <> 'CANCELED'       AND CAST(TSA.Created AS DATE)       BETWEEN CAST(GETDATE() - 5 AS DATE) AND CAST(GETDATE() AS DATE) ", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="What is the average duration and cost for IT TSAs?",
                            SQLQuery="SELECT AVG(t.Duration) AS [Average Duration for IT TSAs],        (SUM(t.TSAItemFTECostForServiceDurationUSD) + SUM(t.MarkupOnFTECostUSD) + SUM(t.ExternalMaterialCostUSD)) AS [Cost for IT TSAs] FROM TSAItems AS t     LEFT OUTER JOIN TSAStatuses s         ON t.tsaitemtsastatusid = s.id     LEFT OUTER JOIN Functions f         ON t.FunctionId = f.id WHERE s.title <> 'Canceled'       AND t.Duration IS NOT NULL       AND f.Title = 'IT' GROUP BY f.title", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="Show me all TSAs that have a linked task that is At Risk or Behind Schedule.",
                            SQLQuery="SELECT TSA.Title AS [TSAs with Behind Schedule / At Risk Tasks Linked] FROM TSAItems TSA     LEFT JOIN Workplan WP         ON TSA.ID = WP.TSAItemId     LEFT JOIN Statuses S         ON WP.WorkPlanTaskStatusId = S.ID WHERE WP.WorkPlanTaskType = 'Task'       AND S.[Key] IN ('BEHIND_SCHEDULE','AT_RISK')", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List all TSAs that need review.",
                            SQLQuery="SELECT TSA.Title AS [TSA Items that need review] FROM TSAItems TSA     LEFT JOIN TSAPhases Stg         ON TSA.PhaseId = Stg.ID WHERE Stg.[Key] IN ( 'ALIGNMENT', 'APPROVAL' )", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List all TSAs that need to be signed along with the item owner.",
                            SQLQuery="SELECT t.Title as [TSAs that need to be signed along with Item Owner], t.TSAItemPersonInCharge as [Item Owner] FROM     TSAItems        AS t     LEFT OUTER JOIN         TSAStatuses s             ON t.tsaitemtsastatusid = s.id WHERE s.[Key]='SIGNED'", VisibleToAssistant=true, IsIncluded = true},


                        new SuggestionData { SuggestionText ="Show me all TSAs and rTSAs that have a markup greater than 5%.",
                            SQLQuery="SELECT    t.Title AS [TSAs and rTSAs that have a markup greater than 5%]    ,TSADisp.Title AS [TSA / rTSA] FROM     TSAItems        AS t     LEFT OUTER JOIN         TSAStatuses s             ON t.tsaitemtsastatusid = s.id     	LEFT OUTER JOIN 	    TSADay1Dispositions TSADisp  		    ON t.TSADay1DispositionId=TSADisp.ID WHERE         s.title <> 'Canceled' 	  AND t.TSAItemMarkup >0.05", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="How many TSAs are in a local currency that is not US dollar?",
                            SQLQuery="SELECT t.Title AS [TSAs are in a local currency that is not US dollar] FROM TSAItems AS t     LEFT OUTER JOIN TSAStatuses s         ON t.tsaitemtsastatusid = s.id     LEFT OUTER JOIN TSACurrencies TSACurr         ON t.TSAItemLocalCurrencyId = TSACurr.ID     LEFT OUTER JOIN Currencies Curr         ON TSACurr.CurrencyID = Curr.ID WHERE Curr.Title <> 'USD ($)'       AND s.title <> 'Canceled'", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List out all Inactive TSAs.",
                            SQLQuery="SELECT t.Title as [Inactive TSAs] FROM     TSAItems        AS t     LEFT OUTER JOIN         TSAStatuses s             ON t.tsaitemtsastatusid = s.id WHERE s.[Key]<>'ACTIVE' ", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List All TSAs where the duration is less than 2 months.",
                            SQLQuery=" SELECT t.Title as [TSAs that have duration less than 2 months] FROM     TSAItems        AS t     LEFT OUTER JOIN         TSAStatuses s             ON t.tsaitemtsastatusid = s.id WHERE s.[Key]<>'CANCELED' AND t.Duration<2", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List all TSAs where the duration is more than 10 months.",
                            SQLQuery=" SELECT t.Title as [TSAs that have duration less than 2 months] FROM     TSAItems        AS t     LEFT OUTER JOIN         TSAStatuses s             ON t.tsaitemtsastatusid = s.id WHERE s.[Key]<>'CANCELED' AND t.Duration>10", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List All TSAs due in next 45days.",
                            SQLQuery="SELECT t.Title AS [TSAs due in next 45days] FROM TSAItems AS t     LEFT OUTER JOIN TSAStatuses s         ON t.tsaitemtsastatusid = s.id WHERE CAST(t.TSAItemEndDate AS DATE)       BETWEEN CAST(GETDATE() AS DATE) AND CAST(GETDATE() + 45 AS DATE)       AND s.title <> 'Canceled'", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List all TSAs where the markup is above 1%.",
                            SQLQuery="SELECT    t.Title AS [TSAs that have a markup above 1%] FROM     TSAItems        AS t     LEFT OUTER JOIN         TSAStatuses s             ON t.tsaitemtsastatusid = s.id     WHERE         s.title <> 'Canceled' 	  AND t.TSAItemMarkup >0.01", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List all TSAs where provider is not tagged.",
                            SQLQuery="SELECT     t.Title AS [TSAs where Provider is not tagged] FROM     TSAItems        AS t     LEFT OUTER JOIN         TSAStatuses s             ON t.tsaitemtsastatusid = s.id WHERE     s.title <> 'Canceled'     AND t.ProviderLegalEntityId IS NULL", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List all TSAs where receiver is not tagged.",
                            SQLQuery=" SELECT    t.Title AS [TSAs where Receiver is not tagged] FROM     TSAItems        AS t     LEFT OUTER JOIN         TSAStatuses s             ON t.tsaitemtsastatusid = s.id     WHERE         s.title <> 'Canceled' 	  AND t.ReceiverLegalEntityId IS NULL", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List all mixed price type TSAs.",
                            SQLQuery="SELECT    t.Title AS [Mixed Price Type TSAs] FROM     TSAItems        AS t     LEFT OUTER JOIN         TSAStatuses s             ON t.tsaitemtsastatusid = s.id   	LEFT OUTER JOIN 	PriceTypes Pric  	        ON t.TSAItemPriceTypeID=Pric.ID WHERE         s.title <> 'Canceled' 	  AND Pric.Title='Mixed price'", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List all TSAs which are not getting settled in USD.",
                            SQLQuery="	  SELECT    t.Title AS [List all TSAs which are not getting settled in USD]    FROM     TSAItems        AS t     LEFT OUTER JOIN         TSAStatuses s             ON t.tsaitemtsastatusid = s.id     	LEFT OUTER JOIN 	    TSACurrencies TSACurr  		    ON t.TSAItemLocalCurrencyId=TSACurr.ID 	LEFT OUTER JOIN TSACurrencies Curr 	        ON TSACurr.CurrencyID=Curr.ID WHERE         Curr.Title<>'USD ($)'  	  AND s.title <> 'Canceled'",
                            VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List all TSAs where User has provided comments.",
                            SQLQuery="SELECT    t.Title AS [TSAs where User has provided comments] FROM     TSAItems        AS t     LEFT OUTER JOIN         TSAStatuses s             ON t.tsaitemtsastatusid = s.id     WHERE         s.title <> 'Canceled' 	  AND t.Comments IS NOT NULL", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List all TSAs per phase.",
                            SQLQuery="SELECT     ISNULL(Stg.Title, 'No Phase Assigned') AS [Phase],     (TSA.Title)                          AS [ TSAs title] FROM     TSAItems      TSA     LEFT JOIN         TSAPhases Stg             ON TSA.PhaseId = Stg.ID", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List All TSAs assigned to IT due in next 30 days.",
                            SQLQuery="SELECT     t.Title AS [TSAs assigned to function due in next 30 days] FROM     TSAItems        AS t     LEFT OUTER JOIN         TSAStatuses s             ON t.tsaitemtsastatusid = s.id     LEFT OUTER JOIN         Functions   f             ON t.FunctionId = f.id WHERE     s.title <> 'Canceled'     AND f.Title='{FunctionName}' 	AND CAST(t.TSAItemEndDate AS DATE) BETWEEN CAST(GETDATE() AS DATE) AND CAST(GETDATE()+30 AS DATE)", VisibleToAssistant=false, IsIncluded = false},
                        new SuggestionData { SuggestionText ="List All TSAs assigned to finance due in next 15 days where markup is below 1% and has no receiver tagged.", SQLQuery="SELECT t.Title AS [TSAs assigned to IT due in next 30 days] FROM TSAItems AS t     LEFT OUTER JOIN TSAStatuses s         ON t.tsaitemtsastatusid = s.id     LEFT OUTER JOIN Functions f         ON t.FunctionId = f.id WHERE s.title <> 'Canceled'       AND f.Title = 'Finance'       AND CAST(t.TSAItemEndDate AS DATE)       BETWEEN CAST(GETDATE() AS DATE) AND CAST(GETDATE() + 15 AS DATE)       AND t.TSAItemMarkup <= 0.01       AND t.ReceiverLegalEntityId IS NULL", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List all Items which are tagged as rTSA for Day 1 disposition.",
                            SQLQuery="SELECT t.Title AS [TSAs Items which are tagged as rTSA for Day 1 disposition] FROM TSAItems AS t     LEFT OUTER JOIN TSAStatuses s         ON t.tsaitemtsastatusid = s.id     LEFT OUTER JOIN TSADay1Dispositions TSADisp         ON t.TSADay1DispositionId = TSADisp.ID WHERE s.title <> 'Canceled'       AND TSADisp.Title = 'rTSA (reverse TSA)'", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List all Items where total number of FTEs providing service is greater than 5.",
                            SQLQuery="SELECT t.Title AS [TSA Items where total number of FTEs providing service is greater than 5] FROM TSAItems AS t     LEFT OUTER JOIN TSAStatuses s         ON t.tsaitemtsastatusid = s.id     LEFT OUTER JOIN TSADay1Dispositions TSADisp         ON t.TSADay1DispositionId = TSADisp.ID WHERE s.title <> 'Canceled'       AND t.TSAItemNoOfFTEProvidingService > 5", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List all items which have been in Detailing phase for more than 15 days.",
                            SQLQuery="SELECT TSA.Title AS [TSA items which have been in Detailing phase for more than 15 days] FROM TSAItems TSA     LEFT JOIN TSAPhases Stg         ON TSA.PhaseId = Stg.ID WHERE Stg.[Key] = 'DETAILING'       AND CAST(TSA.Modified AS DATE) < CAST(GETDATE() - 15 AS DATE)", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List all finance related items with relevant SLA details.",
                            SQLQuery="SELECT TSA.Title AS [Finance related TSA items with relevant SLA details],        ISNULL(TSA.TSAItemSLAName, ' ') AS [SLA Details] FROM TSAItems TSA     LEFT JOIN Functions F         ON TSA.FunctionId = F.ID     LEFT JOIN TSAStatuses S         ON TSA.TSAItemTSAStatusId = S.ID WHERE S.[Key] <> 'CANCELED'       AND F.Title = 'Finance'", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText ="List all items where external cost is greater than FTE cost for entire duration.",
                            SQLQuery="SELECT TSA.Title AS [TSA items where external cost is greater than FTE cost for entire duration] FROM TSAItems TSA     LEFT JOIN Functions F         ON TSA.FunctionId = F.ID     LEFT JOIN TSAStatuses S         ON TSA.TSAItemTSAStatusId = S.ID WHERE S.[Key] <> 'CANCELED'       AND (TSA.TSAItemExternalMaterialCost > TSA.TSAItemFTECostForServiceDuration)", VisibleToAssistant=true, IsIncluded = true},
                    }
                },
                new SuggestionMatrix
                {
                    Source = Constants.Source.ProjectData.Key,
                    AppAfinity = Constants.App.ProjectLevel,
                    Suggestions = new List<SuggestionData>
                    {
                        new SuggestionData { SuggestionText = "What are the project teams that make up the governance structure for this engagement?",
                        SQLQuery = "SELECT PT.Title as Team, TT.Title as 'Type'  from ProjectTeams PT LEFT JOIN TeamTypes TT on TT.ID = PT.TeamTypeId where TT.[Key] = 'PROJECT_MANAGEMENT' order by TT.Title", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "How many milestones does each team have?",
                        SQLQuery = "SELECT pt.Title, COUNT(wp.WorkPlanTaskType) AS MilestoneCount  FROM WorkPlan wp  LEFT JOIN ProjectTeams pt ON pt.ID = wp.ProjectTeamId  LEFT JOIN TeamTypes TT on TT.ID = pt.TeamTypeId WHERE wp.WorkPlanTaskType = 'Milestone' AND TT.[Key] = 'PROJECT_MANAGEMENT' GROUP BY pt.Title", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "How many interdependencies does each team have?",
                        SQLQuery = "SELECT      ReceiverTeam.Title AS ReceiverTeamName,     COUNT(1) AS InterdependencyCount FROM      Interdependencies AS I INNER JOIN      ProjectTeams AS ReceiverTeam ON I.ReceiverProjectTeamId = ReceiverTeam.ID GROUP BY      ReceiverTeam.Title ", VisibleToAssistant=true, IsIncluded = true},
                        new SuggestionData { SuggestionText = "How many risks does each team have?",
                        SQLQuery = "SELECT pt.Title, COUNT(1) AS RiskCount  FROM RisksAndIssues RI  left join ProjectTeams pt on pt.ID = ri.ProjectTeamId LEFT JOIN TeamTypes TT on TT.ID = pt.TeamTypeId WHERE IssueRiskCategory = 'Risk' AND TT.[Key] = 'PROJECT_MANAGEMENT' GROUP BY pt.Title", VisibleToAssistant=true, IsIncluded = true}
                    }
                },
                //Seed data for EY Guidance
                new SuggestionMatrix
                {
                    Source = Constants.Source.EYGuidance.Key,
                    AppAfinity = Constants.App.ProjectManagement,
                    Suggestions = new List<SuggestionData>
                    {
                        new SuggestionData { SuggestionText = "What PMO workplan templates are available?",
                            SQLQuery = "SELECT DISTINCT _TemplateFile FROM WorkPlan" },
                        new SuggestionData { SuggestionText = "What are the best practices to run weekly status meetings with the client?" },
                        new SuggestionData { SuggestionText = "What is the difference between Progress and Calculated Status?" },
                        new SuggestionData { SuggestionText = "How do you add a new field to the workplan?" },
                        new SuggestionData { SuggestionText = "How do I link a Workplan Task to RAID?" },
                        new SuggestionData { SuggestionText = "Help me understand PMO methodology for this {ProjectType} project." }
                    }
                },
                new SuggestionMatrix
                {
                    Source = Constants.Source.EYGuidance.Key,
                    AppAfinity = Constants.App.ValueCapture,
                    Suggestions = new List<SuggestionData>
                    {
                        new SuggestionData { SuggestionText = "What cost savings levers are available?",
                            SQLQuery = "SELECT Title FROM ValueCaptureInitiatives WHERE ValueCaptureType = 'Cost Saving' or  ValueCaptureType = 'Cost Reduction'" },
                        new SuggestionData { SuggestionText = "What revenue growth levers are available?",
                            SQLQuery = "SELECT Title FROM ValueCaptureInitiatives WHERE ValueCaptureType = 'Revenue Growth'" },
                        new SuggestionData { SuggestionText = "What are typical one-time costs that we should be considering?",
                            SQLQuery = "SELECT Title FROM ValueCaptureInitiatives WHERE ValueCaptureType = 'One Time Cost'" },
                        new SuggestionData { SuggestionText = "What are the IT cost savings levers that I should be thinking about?",
                            SQLQuery = "SELECT Title FROM ValueCaptureInitiatives WHERE (ValueCaptureType = 'Cost Reduction' OR  ValueCaptureType = 'Cost Saving') AND ProjectTeam = 'IT'" },
                        new SuggestionData { SuggestionText = "What are the one-time costs I should be expecting to incur for Supply Chain related initiatives?",
                            SQLQuery = "SELECT Title FROM ValueCaptureInitiatives WHERE ValueCaptureType = 'One Time Cost' AND ProjectTeam = 'Supply Chain & Operations'" },
                        new SuggestionData { SuggestionText = "How do we evaluate our initiatives against one another to create an objective prioritization of what should be done first?" },
                        new SuggestionData { SuggestionText = "Help understand VC methodology." }
                    }
                },
                new SuggestionMatrix
                {
                    Source = Constants.Source.EYGuidance.Key,
                    AppAfinity = Constants.App.OperatingModel,
                    Suggestions = new List<SuggestionData>
                    {
                        new SuggestionData { SuggestionText = "What normative operating models are available?",
                            SQLQuery = "SELECT DISTINCT _TemplateFile FROM Nodes" },
                        new SuggestionData { SuggestionText = "How can I upload systems in bulk to the Op Model app?" },
                        new SuggestionData { SuggestionText = "What are the steps to setup the Op Model app?" },
                        new SuggestionData { SuggestionText = "What reports are available in the Op Model app?" },
                    }
                },
                new SuggestionMatrix
                {
                    Source = Constants.Source.EYGuidance.Key,
                    AppAfinity = Constants.App.TSA,
                    Suggestions = new List<SuggestionData>
                    {
                        new SuggestionData { SuggestionText = "What TSAs would you suggest?",
                            SQLQuery = "SELECT Title FROM TSAItems" },
                        new SuggestionData { SuggestionText = "What are examples for TSAs?",
                            SQLQuery = "SELECT Title, ServiceInScopeDescription, [Function], SubFunction FROM TSAItems" },
                        new SuggestionData { SuggestionText = "Why are TSAs important?" },
                    }
                },
                new SuggestionMatrix
                {
                    Source = Constants.Source.EYGuidance.Key,
                    AppAfinity = Constants.App.ProjectLevel,
                    Suggestions = new List<SuggestionData>
                    {
                        new SuggestionData { SuggestionText = "What PMO workplan templates are available?",
                            SQLQuery = "SELECT DISTINCT _TemplateFile FROM WorkPlan" },
                        new SuggestionData { SuggestionText = "What are the best practices to run weekly status meetings with the client?" },
                        new SuggestionData { SuggestionText = "How do you add a new field to the workplan?" },
                        new SuggestionData { SuggestionText = "How do I link a Workplan Task to RAID?" },
                        new SuggestionData { SuggestionText = "Help me understand PMO methodology for this {ProjectType} project." }
                    }
                },
                //Seed data for Internet
                new SuggestionMatrix
                {
                    Source = Constants.Source.Internet.Key,
                    AppAfinity = Constants.App.ProjectManagement,
                    Suggestions = new List<SuggestionData>
                    {
                        new SuggestionData { SuggestionText = "Generate a basic workplan template for my project." },
                        new SuggestionData { SuggestionText = "What are the key risks for a {ProjectType} project?" },
                        new SuggestionData { SuggestionText = "What are the key milestones for a {ProjectType} project?" },
                        new SuggestionData { SuggestionText = "What are the best practices to run weekly status meetings?" },
                        new SuggestionData { SuggestionText = "What are some of the similar deals that have happened in the past?" },
                        new SuggestionData { SuggestionText = "What are the best practices to build workplan, and track dependencies?" }
                    }
                },
                new SuggestionMatrix
                {
                    Source = Constants.Source.Internet.Key,
                    AppAfinity = Constants.App.ValueCapture,
                    Suggestions = new List<SuggestionData>
                    {
                        new SuggestionData { SuggestionText = "What are the best cost saving initiatives?" },
                        new SuggestionData { SuggestionText = "What are the best revenue growth initiatives?" },
                        new SuggestionData { SuggestionText = "What are the best strategies for improving a company in the {Sector} sector?" },
                        new SuggestionData { SuggestionText = "What are recent examples of improvements being made in the {Sector} sector?" },
                        new SuggestionData { SuggestionText = "What are the best ways to track actuals?" },
                        new SuggestionData { SuggestionText = "What should be the frequency of tracking dollar values during the engagement?" },
                        new SuggestionData { SuggestionText = "What are typical implications for cross border deals?" }
                    }
                },
                new SuggestionMatrix
                {
                    Source = Constants.Source.Internet.Key,
                    AppAfinity = Constants.App.OperatingModel,
                    Suggestions = new List<SuggestionData>
                    {
                        new SuggestionData { SuggestionText = "What is a normative operating model for the {Sector} sector?" },
                        new SuggestionData { SuggestionText = "What are key considerations when defining an operating model for a {Sector} sector company?" },
                        new SuggestionData { SuggestionText = "What are examples of Day 1 process dispositions?" },
                    }
                },
                new SuggestionMatrix
                {
                    Source = Constants.Source.Internet.Key,
                    AppAfinity = Constants.App.TSA,
                    Suggestions = new List<SuggestionData>
                    {
                        new SuggestionData { SuggestionText = "What are the corporate functions typically involved in the {Sector} sector?" },
                        new SuggestionData { SuggestionText = "What are the typical services of the Sales and Marketing function?" },
                        new SuggestionData { SuggestionText = "Draft a TSA for the Groceries Retail sector, Merchandising and Product Management function, and Endcap and Display Management service." },
                        new SuggestionData { SuggestionText = "Provides templates of TSA." },
                        new SuggestionData { SuggestionText = "What should be the typical duration for TSA?" },
                        new SuggestionData { SuggestionText = "Things I should keep in mind for longer duration TSAs?" }
                    }
                },
                new SuggestionMatrix
                {
                    Source = Constants.Source.Internet.Key,
                    AppAfinity = Constants.App.ProjectLevel,
                    Suggestions = new List<SuggestionData>
                    {
                        new SuggestionData { SuggestionText = "Generate a basic workplan template for my project." },
                        new SuggestionData { SuggestionText = "What are the key risks for a {ProjectType} project?" },
                        new SuggestionData { SuggestionText = "What are the key milestones for a {ProjectType} project?" },
                        new SuggestionData { SuggestionText = "What are the best practices to run weekly status meetings?" },
                        new SuggestionData { SuggestionText = "What are the best practices to build workplan, and track dependencies?" }
                    }
                },

                new SuggestionMatrix
                {
                    Source = Constants.Source.ProjectData.Key,
                    AppAfinity = Constants.App.ProjectManagement,
                    Suggestions = new List<SuggestionData>
                    {
                        new SuggestionData { SuggestionText = "How many actions are assigned to IT team?",
                        SQLQuery = "SELECT  A.UniqueItemIdentifier,  A.Title , PT.Title ProjectTeam, U.Title ItemOwner  FROM    Actions A      LEFT JOIN Statuses S ON A.ItemStatusId = S.ID      LEFT JOIN ProjectTeams PT ON A.ProjectTeamId = PT.ID   LEFT JOIN TeamTypes TT ON PT.TeamTypeId = TT.ID    LEFT JOIN UserProfiles U ON A.ItemOwnerId = U.ID   WHERE    PT.Title = 'IT'  AND TT.[Key] = 'PROJECT_MANAGEMENT'",
                        IsIncluded = false,VisibleToAssistant = false
                        },
                        new SuggestionData { SuggestionText = "Could you provide the number of action items categorized by project team?",
                        SQLQuery = "SELECT       PT.Title AS ProjectTeam,                COUNT(A.UniqueItemIdentifier) AS ActionCount    FROM       Actions A      LEFT JOIN       ProjectTeams PT ON A.ProjectTeamId = PT.ID    LEFT JOIN       TeamTypes TT ON PT.TeamTypeId = TT.ID    WHERE       TT.[Key] = 'PROJECT_MANAGEMENT'   GROUP BY       PT.Title                           ORDER BY       ActionCount DESC",
                        IsIncluded = true,VisibleToAssistant = true
                        },
                        new SuggestionData { SuggestionText = "List all Open Actions in PMO app.",
                        SQLQuery = "SELECT  A.UniqueItemIdentifier,  A.Title, PT.Title AS ProjectTeam, U.Title AS ItemOwner, S.Title as Status  FROM Actions A      LEFT JOIN Statuses S ON A.ItemStatusId = S.ID      LEFT JOIN ProjectTeams PT ON A.ProjectTeamId = PT.ID   LEFT JOIN TeamTypes TT ON PT.TeamTypeId = TT.ID    LEFT JOIN UserProfiles U ON A.ItemOwnerId = U.ID   WHERE S.[KEY] NOT IN ('COMPLETED', 'CLOSED', 'CANCELLED', 'DELETED', 'REJECTED', 'ON_HOLD')   AND TT.[Key] = 'PROJECT_MANAGEMENT'",
                        IsIncluded = true,VisibleToAssistant = true
                        },
                    }
                },

                new SuggestionMatrix
                {
                    Source = Constants.Source.ProjectData.Key,
                    AppAfinity = Constants.App.ProjectManagement,
                    Suggestions = new List<SuggestionData>
                    {
                        new SuggestionData { SuggestionText = "Which team has the most current state processes?",
                            SQLQuery = "SELECT \r\n    PT.Title AS ProjectTeam,\r\n    COUNT(N.ID) AS CurrentStateProcessesCount\r\nFROM \r\n    Nodes N\r\n    LEFT JOIN ProjectTeams PT ON N.GeneratedWorkplanProjectTeamId = PT.ID\r\n    LEFT JOIN TransactionStates TS ON N.TransactionStateId = TS.ID\r\nWHERE \r\n    TS.[Key] = 'CURRENT_STATE'\r\n\tAND N.NodeTypeId = 3\r\nGROUP BY \r\n    PT.Title\r\nORDER BY \r\n    CurrentStateProcessesCount DESC"},
                        new SuggestionData { SuggestionText = "How much value have we already achieved from all of our initiatives?",
                            SQLQuery = "SELECT \r\n    SUM(VCA.Y1Actual) AS Y1TotalActual,\r\n    SUM(VCA.Y2Actual) AS Y2TotalActual,\r\n    SUM(VCA.Y3Actual) AS Y3TotalActual,\r\n    SUM(VCA.Y4Actual) AS Y4TotalActual,\r\n    SUM(VCA.Y5Actual) AS Y5TotalActual\r\nFROM \r\n    ValueCaptureActuals VCA \r\nJOIN \r\n    ValueCaptureInitiatives VCI ON VCA.ValueCaptureInitiativeId = VCI.ID"},
                    }
                },
            };
            List<Suggestion> suggestions = new List<Suggestion>();
            int id = 1;

            foreach (var matrix in suggestionMatrix)
            {
                foreach (var suggestion in matrix.Suggestions)
                {
                    suggestions.Add(new Suggestion
                    {
                        ID = id++,
                        Source = matrix.Source,
                        SuggestionText = suggestion.SuggestionText,
                        AppAffinity = matrix.AppAfinity,
                        CreatedAt = null,//This two values are made null as without it always seed script would be generated to udpate createdAt and updatedAt with current datetime.now
                        UpdatedAt = null,//This two values are made null as without it always seed script would be generated to udpate createdAt and updatedAt with current datetime.now
                        CreatedBy = "System",
                        UpdatedBy = "System",
                        AnswerSQL = suggestion.SQLQuery,
                        VisibleToAssistant = suggestion.VisibleToAssistant,
                        IsIncluded = suggestion.IsIncluded,
                    }); ;
                }
            }

            var suggestionsArray = suggestions.ToArray();

            modelBuilder.ToTable("AssistantSuggestions");

            modelBuilder.HasData(suggestionsArray);
        }
    }
}